# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

name: Build and Test

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: |
          sudo apt-get install -y cmake valgrind

      - name: Cache Dependency Builds
        id: cache-deps-build
        uses: actions/cache@v3
        with:
          path: build-deps
          key: ${{ runner.os }}-5

      - name: Init build dir
        if: steps.cache-deps-build.outputs.cache-hit != 'true'
        run: mkdir build-deps

      # There seems to be an error passing -DGTest_DIR into Arrow's build
      # so we just build the same version of it and install
      - name: Fetch googletest
        if: steps.cache-deps-build.outputs.cache-hit != 'true'
        uses: actions/checkout@v3
        with:
          repository: google/googletest
          ref: release-1.11.0
          path: build-deps/googletest
          fetch-depth: 0

      - name: Build googletest
        if: steps.cache-deps-build.outputs.cache-hit != 'true'
        run: |
          cd build-deps/googletest
          cmake . -DCMAKE_CXX_FLAGS=-fPIC
          cmake --build .
          cmake --install . --prefix ../../dist

      - name: Install googletest
        run: |
          cd build-deps/googletest
          cmake --install . --prefix ../../dist

      - name: Fetch Arrow
        if: steps.cache-deps-build.outputs.cache-hit != 'true'
        uses: actions/checkout@v3
        with:
          repository: apache/arrow
          ref: apache-arrow-8.0.0
          path: build-deps/arrow
          fetch-depth: 0

      - name: Build Arrow
        if: steps.cache-deps-build.outputs.cache-hit != 'true'
        run: |
          mkdir build-deps/arrow-build
          cd build-deps/arrow-build
          cmake ../arrow/cpp -DARROW_JSON=ON -DARROW_TESTING=ON -DBoost_SOURCE=BUNDLED -DGTest_DIR=`pwd`/../../dist/lib/cmake/GTest
          cmake --build .
          cmake --install . --prefix ../../dist

      - name: Install arrow
        run: |
          cd build-deps/arrow-build
          cmake --install . --prefix ../../dist

      - name: Build nanoarrow
        run: |
          export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:`pwd`/dist/lib
          sudo ldconfig
          mkdir build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Debug -DGTest_DIR=`pwd`/../dist/lib/cmake/GTest -DArrow_DIR=`pwd`/../dist/lib/cmake/arrow -DArrowTesting_DIR=`pwd`/../dist/lib/cmake/arrow -DNANOARROW_CODE_COVERAGE=ON -DNANOARROW_BUILD_TESTS=ON
          cmake --build .

      - name: Run tests
        run: |
          export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:`pwd`/dist/lib
          sudo ldconfig
          cd build
          ctest -T test --output-on-failure .

      - name: Run tests with valgrind
        run: |
          export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:`pwd`/dist/lib
          sudo ldconfig
          cd build
          ctest -T memcheck . 
      
      - name: Upload memcheck results
        if: failure()
        uses: actions/upload-artifact@main
        with:
          name: nanoarrow-memcheck
          path: build/Testing/Temporary/MemoryChecker.*.log

      - name: Calculate coverage
        run: |
          SOURCE_PREFIX=`pwd`
          mkdir build/cov
          cd build/cov
          gcov -abcfu --source-prefix=$SOURCE_PREFIX `find ../CMakeFiles/nanoarrow.dir/ -name "*.gcno"`

      - name: Upload coverage
        uses: codecov/codecov-action@v2
        with:
          directory: build/cov

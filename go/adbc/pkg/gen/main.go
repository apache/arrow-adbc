// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

package main

import (
	"bytes"
	"errors"
	"flag"
	"fmt"
	"io/ioutil"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
	"text/template"

	"golang.org/x/tools/go/packages"
)

const Ext = ".tmpl"

func errExit(format string, a ...interface{}) {
	fmt.Fprintf(os.Stderr, format, a...)
	fmt.Fprintln(os.Stderr)
	os.Exit(1)
}

func formatSource(in []byte) ([]byte, error) {
	r := bytes.NewReader(in)
	cmd := exec.Command("goimports")
	cmd.Stdin = r
	out, err := cmd.Output()
	if err != nil {
		var ee *exec.ExitError
		if errors.As(err, &ee) {
			return nil, fmt.Errorf("error running goimports: %s", string(ee.Stderr))
		}
		return nil, fmt.Errorf("error running goimports: %s", string(out))
	}

	return out, nil
}

type pathSpec struct {
	in, out string
}

func (p *pathSpec) String() string { return p.in + " â†’ " + p.out }
func (p *pathSpec) IsGoFile() bool { return filepath.Ext(p.out) == ".go" }

type tmplData struct {
	Driver string
	Prefix string
}

var fileList = []string{
	"driver.go.tmpl", "utils.c.tmpl", "utils.h.tmpl",
}

func main() {
	var (
		prefix     = flag.String("prefix", "", "function prefix")
		driverPkg  = flag.String("driver", "", "path to driver package")
		driverType = flag.String("type", "Driver", "name of the driver type")
		outDir     = flag.String("o", "", "output directory")
		tmplDir    = flag.String("in", "./_tmpl", "template directory [default=./_tmpl]")
	)

	flag.Parse()
	switch {
	case *prefix == "":
		errExit("prefix is required")
	case *driverPkg == "":
		errExit("driver pkg path is required")
	case *outDir == "":
		errExit("must provide output directory with -o")
	}

	pkg, err := packages.Load(&packages.Config{
		Mode: packages.NeedName | packages.NeedTypes | packages.NeedModule,
		Dir:  *driverPkg,
	})
	if err != nil {
		errExit(err.Error())
	}

	switch len(pkg) {
	case 0:
		errExit("package %s not found", *driverPkg)
	case 1:
	default:
		errExit("more than one package met path %s", *driverPkg)
	}

	specs := make([]pathSpec, len(fileList))
	for i, f := range fileList {
		specs[i] = pathSpec{
			in:  filepath.Join(*tmplDir, f),
			out: filepath.Join(*outDir, strings.TrimSuffix(f, Ext))}
	}

	process(tmplData{Driver: pkg[0].Name + "." + *driverType, Prefix: *prefix}, specs)
}

func mustReadAll(path string) []byte {
	data, err := ioutil.ReadFile(path)
	if err != nil {
		errExit(err.Error())
	}

	return data
}

func fileMode(path string) os.FileMode {
	stat, err := os.Stat(path)
	if err != nil {
		errExit(err.Error())
	}
	return stat.Mode()
}

func process(data interface{}, specs []pathSpec) {
	for _, spec := range specs {
		t, err := template.New("gen").Parse(string(mustReadAll(spec.in)))
		if err != nil {
			errExit("error processing template '%s': %s", spec.in, err)
		}

		var buf bytes.Buffer
		// preamble
		fmt.Fprintf(&buf, "// Code generated by %s. DO NOT EDIT.\n", spec.in)
		fmt.Fprintln(&buf)
		if err = t.Execute(&buf, data); err != nil {
			errExit("error executing template '%s': %s", spec.in, err)
		}

		generated := buf.Bytes()
		if spec.IsGoFile() {
			generated, err = formatSource(generated)
			if err != nil {
				errExit("error formatting '%s': %s", spec.in, err)
			}
		}
		ioutil.WriteFile(spec.out, generated, fileMode(spec.in))
	}
}

# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

name: Packaging - Nightly Artifacts

on:
  push:
    # Automatically build on RC tags
    branches-ignore:
      - '**'
    tags:
      - 'apache-arrow-adbc-*-rc*'
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:
    inputs:
      upload_artifacts:
        description: "Upload artifacts to Gemfury"
        required: true
        type: boolean
        default: false

concurrency:
  group: ${{ github.repository }}-${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  docs:
    name: "Documentation"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Update tags
        shell: bash
        run: |
          git fetch --tags --force origin

      - name: Show inputs
        shell: bash
        run: |
          echo "upload_artifacts: ${{ inputs.upload_artifacts }}"
          echo "schedule: ${{ github.event.schedule }}"
          echo "ref: ${{ github.ref }}"

      - name: Build and test
        shell: bash
        run: |
          docker-compose run docs

      - name: Compress docs
        shell: bash
        run: |
          tar --transform "s|docs/build/html|adbc-docs|" -czf docs.tgz docs/build/html

      - name: Archive docs
        uses: actions/upload-artifact@v3
        with:
          name: docs
          retention-days: 2
          path: |
            docs.tgz

  java:
    name: "Java 1.8"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Update tags
        shell: bash
        run: |
          git fetch --tags --force origin

      - name: Show inputs
        shell: bash
        run: |
          echo "upload_artifacts: ${{ inputs.upload_artifacts }}"
          echo "schedule: ${{ github.event.schedule }}"
          echo "ref: ${{ github.ref }}"

      - name: Build and test
        shell: bash
        run: |
          docker-compose run java-dist

      - name: Archive JARs
        uses: actions/upload-artifact@v3
        with:
          name: java
          retention-days: 7
          path: |
            dist/*.jar
            dist/*.pom

      - name: Upload JARs to Gemfury
        shell: bash
        if: github.ref == 'refs/heads/main' && (github.event.schedule || inputs.upload_artifacts)
        run: |
          # Preserve env vars so GEMFURY_PUSH_TOKEN gets preserved
          sudo -E ./ci/scripts/java_jar_upload.sh "$(pwd)"
        env:
          GEMFURY_PUSH_TOKEN: ${{ secrets.GEMFURY_PUSH_TOKEN }}

  python-manylinux:
    name: "Python ${{ matrix.arch }} manylinux${{ matrix.manylinux_version }}"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: ["amd64", "arm64v8"]
        manylinux_version: ["2014"]
      # Let this one run in parallel because the arm64 build is so much slower
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Update tags
        shell: bash
        run: |
          git fetch --tags --force origin

      - name: Show inputs
        shell: bash
        run: |
          echo "upload_artifacts: ${{ github.event.inputs.upload_artifacts }}"
          echo "schedule: ${{ github.event.schedule }}"
          echo "ref: ${{ github.ref }}"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Build wheel
        shell: bash
        env:
          ARCH: ${{ matrix.arch }}
          MANYLINUX: ${{ matrix.manylinux_version }}
        run: |
          docker-compose run python-wheel-manylinux

      - name: Archive wheels
        uses: actions/upload-artifact@v3
        with:
          name: python-${{ matrix.arch }}-manylinux${{ matrix.manylinux_version }}
          retention-days: 7
          path: |
            python/adbc_driver_manager/repaired_wheels/*.whl
            python/adbc_driver_postgresql/repaired_wheels/*.whl
            python/adbc_driver_sqlite/repaired_wheels/*.whl

      - name: Test wheel
        shell: bash
        env:
          ARCH: ${{ matrix.arch }}
          MANYLINUX: ${{ matrix.manylinux_version }}
        run: |
          env PYTHON=3.9 docker-compose run python-wheel-manylinux-test
          env PYTHON=3.10 docker-compose run python-wheel-manylinux-test
          env PYTHON=3.11 docker-compose run python-wheel-manylinux-test

      - name: Upload wheels to Gemfury
        shell: bash
        if: github.ref == 'refs/heads/main' && (github.event.schedule || github.event.inputs.upload_artifacts == true)
        run: |
          ./ci/scripts/python_wheel_upload.sh python/adbc_driver_{manager,postgresql,sqlite}/repaired_wheels/*.whl
        env:
          GEMFURY_PUSH_TOKEN: ${{ secrets.GEMFURY_PUSH_TOKEN }}

  python-macos:
    name: "Python ${{ matrix.arch }} macOS"
    runs-on: macos-latest
    strategy:
      matrix:
        arch: ["amd64", "arm64v8"]
      # Limit parallelism; gemfury appears to return 409 CONFLICT on concurrent uploads
      max-parallel: 1
    env:
      MACOSX_DEPLOYMENT_TARGET: "10.15"
      PYTHON: "/Library/Frameworks/Python.framework/Versions/3.10/bin/python3.10"
      # Where to install vcpkg
      VCPKG_ROOT: "${{ github.workspace }}/vcpkg"
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Update tags
        shell: bash
        run: |
          git fetch --tags --force origin

      - name: Show inputs
        shell: bash
        run: |
          echo "upload_artifacts: ${{ github.event.inputs.upload_artifacts }}"
          echo "schedule: ${{ github.event.schedule }}"
          echo "ref: ${{ github.ref }}"

      - name: Install Homebrew dependencies
        shell: bash
        run: brew install autoconf bash pkg-config ninja

      - name: Retrieve VCPKG version from .env
        shell: bash
        run: |
          vcpkg_version=$(cat ".env" | grep "VCPKG" | cut -d "=" -f2 | tr -d '"')
          echo "VCPKG_VERSION=$vcpkg_version" | tee -a $GITHUB_ENV

      - name: Install vcpkg
        shell: bash
        run: ci/scripts/install_vcpkg.sh $VCPKG_ROOT $VCPKG_VERSION

      - name: Install Python
        shell: bash
        run: |
          sudo ci/scripts/install_python.sh macos 3.9
          sudo ci/scripts/install_python.sh macos 3.10
          sudo ci/scripts/install_python.sh macos 3.11

      - name: Build wheel
        shell: bash
        env:
          ARCH: ${{ matrix.arch }}
        run: |
          $PYTHON -m venv build-env
          source build-env/bin/activate
          ./ci/scripts/python_wheel_unix_build.sh $ARCH $(pwd) $(pwd)/build

      - name: Archive wheels
        uses: actions/upload-artifact@v3
        with:
          name: python-${{ matrix.arch }}-macos
          retention-days: 7
          path: |
            python/adbc_driver_manager/repaired_wheels/*.whl
            python/adbc_driver_postgresql/repaired_wheels/*.whl
            python/adbc_driver_sqlite/repaired_wheels/*.whl

      - name: Test wheel
        if: matrix.arch == 'amd64'
        shell: bash
        run: |
          /Library/Frameworks/Python.framework/Versions/3.9/bin/python3.9 -m venv test-env-39
          source test-env-39/bin/activate
          export PYTHON_VERSION=3.9
          ./ci/scripts/python_wheel_unix_test.sh $(pwd)
          deactivate

          /Library/Frameworks/Python.framework/Versions/3.10/bin/python3.10 -m venv test-env-310
          source test-env-310/bin/activate
          export PYTHON_VERSION=3.10
          ./ci/scripts/python_wheel_unix_test.sh $(pwd)
          deactivate

          /Library/Frameworks/Python.framework/Versions/3.11/bin/python3.11 -m venv test-env-311
          source test-env-311/bin/activate
          export PYTHON_VERSION=3.11
          ./ci/scripts/python_wheel_unix_test.sh $(pwd)
          deactivate

      - name: Upload wheels to Gemfury
        shell: bash
        if: github.ref == 'refs/heads/main' && (github.event.schedule || github.event.inputs.upload_artifacts == true)
        run: |
          ./ci/scripts/python_wheel_upload.sh python/adbc_driver_{manager,postgresql,sqlite}/repaired_wheels/*.whl
        env:
          GEMFURY_PUSH_TOKEN: ${{ secrets.GEMFURY_PUSH_TOKEN }}

  python-windows:
    name: "Python ${{ matrix.python_version }} Windows"
    runs-on: windows-latest
    strategy:
      matrix:
        python_version: ["3.9.13", "3.10.8", "3.11.0"]
        include:
          - python_version: "3.9.13"
            PYTHON_HOME: "C:\\Python39"
          - python_version: "3.10.8"
            PYTHON_HOME: "C:\\Python310"

      # Limit parallelism; gemfury appears to return 409 CONFLICT on concurrent uploads
      max-parallel: 1
    env:
      PYTHON_VERSION: "${{ matrix.python_version }}"
      # Where to install vcpkg
      VCPKG_ROOT: "${{ github.workspace }}\\vcpkg"
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Update tags
        shell: bash
        run: |
          git fetch --tags --force origin

      - name: Show inputs
        shell: pwsh
        run: |
          echo "upload_artifacts: ${{ inputs.upload_artifacts }}"
          echo "schedule: ${{ github.event.schedule }}"
          echo "ref: ${{ github.ref }}"

      - name: Install Chocolatey Dependencies
        shell: pwsh
        run: |
          choco install --no-progress -y cmake --installargs 'ADD_CMAKE_TO_PATH=System'
          choco install --no-progress -y visualcpp-build-tools

      - name: Retrieve VCPKG version from .env
        shell: pwsh
        run: |
          Select-String -Path .env -Pattern 'VCPKG="(.+)"' | % {"VCPKG_VERSION=$($_.matches.groups[1])"} >> $env:GITHUB_ENV

      - name: Install vcpkg
        shell: pwsh
        run: |
          echo $env:VCPKG_VERSION
          git clone --shallow-since=2022-06-01 https://github.com/microsoft/vcpkg $env:VCPKG_ROOT
          pushd $env:VCPKG_ROOT
          .\bootstrap-vcpkg.bat -disableMetrics
          popd

      - name: Install Python ${{ matrix.python_version }}
        shell: pwsh
        run: |
          choco install --no-progress -y python --version=${{ matrix.python_version }}
          echo ("PATH=${{ matrix.PYTHON_HOME }};" + $env:PATH) >> $env:GITHUB_ENV

      - name: Build wheel
        shell: cmd
        run: |
          where python.exe
          CALL "C:\Program Files (x86)\Microsoft Visual Studio\2017\BuildTools\VC\Auxiliary\Build\vcvars64.bat"
          .\ci\scripts\python_wheel_windows_build.bat %cd% %cd%\build

      - name: Archive wheels
        uses: actions/upload-artifact@v3
        with:
          name: python${{ matrix.python_version }}-windows
          retention-days: 7
          path: |
            python/adbc_driver_manager/repaired_wheels/*.whl
            python/adbc_driver_postgresql/repaired_wheels/*.whl
            python/adbc_driver_sqlite/repaired_wheels/*.whl

      - name: Test wheel
        shell: cmd
        run: |
          where python.exe
          python -m venv venv
          CALL venv\Scripts\activate.bat
          .\ci\scripts\python_wheel_windows_test.bat %cd%

      - name: Upload wheels to Gemfury
        shell: pwsh
        if: github.ref == 'refs/heads/main' && (github.event.schedule || inputs.upload_artifacts)
        run: |
          foreach ($wheel in Get-ChildItem python\adbc_driver_*\repaired_wheels\*.whl) {
              .\ci\scripts\python_wheel_upload.ps1 $wheel.FullName
          }
        env:
          GEMFURY_PUSH_TOKEN: ${{ secrets.GEMFURY_PUSH_TOKEN }}

  python-sdist:
    name: "Python sdist"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Update tags
        shell: bash
        run: |
          git fetch --tags --force origin

      - name: Show inputs
        shell: bash
        run: |
          echo "upload_artifacts: ${{ github.event.inputs.upload_artifacts }}"
          echo "schedule: ${{ github.event.schedule }}"
          echo "ref: ${{ github.ref }}"

      - name: Build sdist
        shell: bash
        run: |
          docker-compose run python-sdist

      - name: Archive sdist
        uses: actions/upload-artifact@v3
        with:
          name: python${{ matrix.python_version }}-manylinux${{ matrix.manylinux_version }}
          retention-days: 7
          path: |
            python/adbc_driver_manager/dist/*.tar.gz
            python/adbc_driver_postgresql/dist/*.tar.gz
            python/adbc_driver_sqlite/dist/*.tar.gz

      - name: Test sdist
        shell: bash
        run: |
          docker-compose run python-sdist-test

      - name: Upload sdist to Gemfury
        shell: bash
        if: github.ref == 'refs/heads/main' && (github.event.schedule || github.event.inputs.upload_artifacts == true || github.event.inputs.upload_artifacts == 'true')
        run: |
          ./ci/scripts/python_wheel_upload.sh python/adbc_driver_{manager,postgresql,sqlite}/dist/*.tar.gz
        env:
          GEMFURY_PUSH_TOKEN: ${{ secrets.GEMFURY_PUSH_TOKEN }}

  release:
    name: "Create release"
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs:
      - docs
      - java
      - python-manylinux
      - python-macos
      - python-windows
      - python-sdist
    steps:
      - name: Get All Artifacts
        uses: actions/download-artifact@v3
        with:
          path: release-artifacts
      - name: Release
        shell: bash
        run: |
          RELEASE_TAG=${GITHUB_REF#refs/*/}

          # Deduplicate wheels built in different jobs with same tag
          mkdir -p upload-staging
          find ./release-artifacts/ \
            '(' \
              -name docs.tgz -or \
              -name '*.jar' -or \
              -name '*.pom' -or \
              -name '*.whl' -or \
              -name 'adbc_*.tar.gz' \
            ')' \
            -exec mv '{}' upload-staging \;

          UPLOAD=$(find upload-staging -type f | sort | uniq)

          echo "Uploading files:"
          echo ${UPLOAD}

          gh release create "${RELEASE_TAG}" \
            --repo ${{ github.repository }} \
            --prerelease \
            --title "ADBC Libraries ${RELEASE_TAG}" \
            ${UPLOAD}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

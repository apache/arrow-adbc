# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

name: C/C++/GLib/Python/Ruby

on:
  pull_request:
    branches:
      - main
    paths:
      - "adbc.h"
      - "c/**"
      - "glib/**"
      - "python/**"
      - ".github/workflows/cpp.yml"
  push:
    paths:
      - "adbc.h"
      - "c/**"
      - "glib/**"
      - "python/**"
      - ".github/workflows/cpp.yml"

concurrency:
  group: ${{ github.repository }}-${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  cpp-conda-unix:
    name: "Conda/${{ matrix.os }}"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ["macos-latest", "ubuntu-latest"]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: false
      - name: Get Date
        id: get-date
        shell: bash
        run: |
          echo "::set-output name=today::$(/bin/date -u '+%Y%m%d')"
      - name: Cache Conda
        uses: actions/cache@v3
        env:
          # Increment this to reset cache manually
          CACHE_NUMBER: 0
        with:
          path: ~/conda_pkgs_dir
          key: conda-${{ runner.os }}-${{ steps.get-date.outputs.today }}-${{ env.CACHE_NUMBER }}-${{ hashFiles('ci/**') }}
      - uses: conda-incubator/setup-miniconda@v2
        with:
          miniforge-variant: Mambaforge
          miniforge-version: latest
          use-mamba: true
          # Required for caching
          use-only-tar-bz2: true
      - name: Install Dependencies
        shell: bash -l {0}
        run: |
          mamba install \
            --file ci/conda_env_cpp.txt \
            --file ci/conda_env_docs.txt \
            --file ci/conda_env_glib.txt \
            --file ci/conda_env_python.txt

      - name: Build SQLite3 Driver
        shell: bash -l {0}
        run: |
          env BUILD_ALL=0 BUILD_DRIVER_SQLITE=1 ./ci/scripts/cpp_build.sh "$(pwd)" "$(pwd)/build"
      - name: Test SQLite3 Driver
        shell: bash -l {0}
        run: |
          env BUILD_ALL=0 BUILD_DRIVER_SQLITE=1 ./ci/scripts/cpp_test.sh "$(pwd)" "$(pwd)/build"
      - name: Build Postgres Driver
        shell: bash -l {0}
        # No test for now, since we need to spin up Postgres itself
        run: |
          env BUILD_ALL=0 BUILD_DRIVER_POSTGRES=1 ./ci/scripts/cpp_build.sh "$(pwd)" "$(pwd)/build"
      - name: Build Driver Manager
        shell: bash -l {0}
        run: |
          env BUILD_ALL=0 BUILD_DRIVER_MANAGER=1 ./ci/scripts/cpp_build.sh "$(pwd)" "$(pwd)/build"
      - name: Test Driver Manager
        shell: bash -l {0}
        run: |
          env BUILD_ALL=0 BUILD_DRIVER_MANAGER=1 ./ci/scripts/cpp_build.sh "$(pwd)" "$(pwd)/build"
          env BUILD_ALL=0 BUILD_DRIVER_MANAGER=1 ./ci/scripts/cpp_test.sh "$(pwd)" "$(pwd)/build"

      - name: Build and Install (No ASan)
        shell: bash -l {0}
        run: |
          # Python and others need something that don't use the ASAN runtime
          rm -rf "$(pwd)/build"
          export BUILD_ALL=1
          export ADBC_BUILD_TESTS=OFF
          export ADBC_USE_ASAN=OFF
          export ADBC_USE_UBSAN=OFF
          ./ci/scripts/cpp_build.sh "$(pwd)" "$(pwd)/build" "$HOME/local"

      - name: Build Python Driver Manager
        shell: bash -l {0}
        run: |
          env BUILD_ALL=0 BUILD_DRIVER_MANAGER=1 ./ci/scripts/python_build.sh "$(pwd)" "$(pwd)/build" "$HOME/local"
      - name: Test Python Driver Manager
        shell: bash -l {0}
        run: |
          env BUILD_ALL=0 BUILD_DRIVER_MANAGER=1 ./ci/scripts/python_test.sh "$(pwd)" "$(pwd)/build" "$HOME/local"
      - name: Build Python Driver Postgres
        shell: bash -l {0}
        run: |
          env BUILD_ALL=0 BUILD_DRIVER_POSTGRES=1 ./ci/scripts/python_build.sh "$(pwd)" "$(pwd)/build" "$HOME/local"
      - name: Test Python Driver Postgres
        shell: bash -l {0}
        run: |
          env BUILD_ALL=0 BUILD_DRIVER_POSTGRES=1 ./ci/scripts/python_test.sh "$(pwd)" "$(pwd)/build" "$HOME/local"

      - name: Build GLib Driver Manager
        shell: bash -l {0}
        run: |
          env BUILD_ALL=0 BUILD_DRIVER_MANAGER=1 ./ci/scripts/glib_build.sh "$(pwd)" "$(pwd)/build" "$HOME/local"
      - name: Test GLib/Ruby Driver Manager
        shell: bash -l {0}
        run: |
          env BUILD_ALL=0 BUILD_DRIVER_MANAGER=1 ./ci/scripts/glib_test.sh "$(pwd)" "$(pwd)/build" "$HOME/local"

      - name: Build Docs
        shell: bash -l {0}
        run: |
          ./ci/scripts/docs_build.sh "$(pwd)"

  cpp-conda-windows:
    name: "Conda/${{ matrix.os }}"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ["windows-latest"]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: false
      - uses: conda-incubator/setup-miniconda@v2
        with:
          miniforge-variant: Mambaforge
          miniforge-version: latest
          use-mamba: true
          # Required for caching
          use-only-tar-bz2: true
      - name: Install Dependencies
        shell: cmd /C call {0}
        run: |
          mamba install --file ci/conda_env_cpp.txt
      - name: Build/Test SQLite3 Driver
        shell: cmd /C call {0}
        run: |
          mkdir build\driver_sqlite
          cd build\driver_sqlite
          cmake -GNinja ..\..\c\drivers\sqlite -DADBC_BUILD_TESTS=ON -DCMAKE_BUILD_TYPE=Debug -DCMAKE_PREFIX_PATH=%CONDA_PREFIX% -DADBC_BUILD_SHARED=ON -DADBC_BUILD_STATIC=OFF
          if %errorlevel% neq 0 then exit /b %errorlevel%
          cmake --build .
          if %errorlevel% neq 0 then exit /b %errorlevel%
          ctest --output-on-failure --no-tests=error
          if %errorlevel% neq 0 then exit /b %errorlevel%
          cd ..\..
      - name: Build/Test Driver Manager
        shell: cmd /C call {0}
        run: |
          mkdir build\driver_manager
          cd build\driver_manager
          cmake -GNinja ..\..\c\driver_manager -DADBC_BUILD_TESTS=ON -DCMAKE_BUILD_TYPE=Debug -DCMAKE_PREFIX_PATH=%CONDA_PREFIX% -DADBC_BUILD_SHARED=ON -DADBC_BUILD_STATIC=OFF
          if %errorlevel% neq 0 then exit /b %errorlevel%
          cmake --build .
          if %errorlevel% neq 0 then exit /b %errorlevel%
          set PATH=%PATH%;${{ github.workspace }}\build\driver_sqlite
          ctest --output-on-failure --no-tests=error
          if %errorlevel% neq 0 then exit /b %errorlevel%
          cd ..\..
      - name: Build/Test Python Driver Manager
        shell: cmd /C call {0}
        run: |
          cd python\adbc_driver_manager
          pip install -e .
          set PATH=%PATH%;${{ github.workspace }}\build\driver_sqlite
          python -m pytest -vv
          cd ..\..

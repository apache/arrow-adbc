% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/helpers.R
\name{with_adbc_database}
\alias{with_adbc_database}
\alias{with_adbc_connection}
\alias{with_adbc_statement}
\alias{local_adbc_database}
\alias{local_adbc_connection}
\alias{local_adbc_statement}
\title{Cleanup helpers}
\usage{
with_adbc_database(database, code)

with_adbc_connection(connection, code)

with_adbc_statement(statement, code)

local_adbc_database(database, .local_envir = parent.frame())

local_adbc_connection(connection, .local_envir = parent.frame())

local_adbc_statement(statement, .local_envir = parent.frame())
}
\arguments{
\item{database}{A database created with \code{\link[=adbc_database_init]{adbc_database_init()}}}

\item{code}{Code to execute before cleaning up the input.}

\item{connection}{A connection created with \code{\link[=adbc_connection_init]{adbc_connection_init()}}}

\item{statement}{A statement created with \code{\link[=adbc_statement_init]{adbc_statement_init()}}}

\item{.local_envir}{The execution environment whose scope should be tied
to the input.}
}
\value{
\itemize{
\item \verb{with_*()} variants return the result of \code{code}
\item \verb{local_*()} variants return the input, invisibly.
}
}
\description{
Managing the lifecycle of databases, connections, and statements can
be complex and error-prone. These helpers
}
\examples{
with_adbc_database(db <- adbc_database_init(adbc_driver_void()), {
  with_adbc_connection(con <- adbc_connection_init(db), {
    with_adbc_statement(stmt <- adbc_statement_init(con), {
      # adbc_statement_set_sql_query(stmt, "SELECT * FROM foofy")
      # adbc_statement_execute_query(stmt)
    })
  })
})

local({
  db <- local_adbc_database(adbc_database_init(adbc_driver_void()))
  con <- local_adbc_connection(adbc_connection_init(db))
  stmt <- local_adbc_statement(adbc_statement_init(con))
  # adbc_statement_set_sql_query(stmt, "SELECT * FROM foofy")
  # adbc_statement_execute_query(stmt)
})

}

# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

R_BIN="$R_HOME/bin/R"
RSCRIPT_BIN="$R_HOME/bin/Rscript"

# Set to non-false for CRAN releases, which require this approach to comply with
# guidance regarding large dependency sources. When non-false, this script
# will fail if the download fails or if checksum verification fails on
# the downloaded file.
DOWNLOAD_DEPENDENCY_ARCHIVE="false"

# CRAN checks CPU time to enforce ~2 cores for building. Set GOMAXPROCS to 1
# when building on CRAN to be safe.
if [ ! "$DOWNLOAD_DEPENDENCY_ARCHIVE" = "false" ] && [ -z "$GOMAXPROCS" ]; then
  echo "Using GOMAXPROCS=1 for go build"
  echo "Set GOMAXPROCS to a higher value in ~/.Renviron for a faster build"
  GOMAXPROCS=1
elif [ ! -z "$GOMAXPROCS" ]; then
  echo "Using GOMAXPROCS=$GOMAXPROCS for go build"
fi

# Run bootstrap.R. This will have already run if we are installing a source
# package built with pkgbuild::build() with pkgbuild >1.4.0; however, we
# run it again in case this is R CMD INSTALL on a directory or
# devtools::load_all(). This will vendor files from elsewhere in the
# ADBC repo into this package. If the file doesn't exist, we're installing
# from a pre-built tarball.
if [ -f bootstrap.R ]; then
  "$RSCRIPT_BIN" bootstrap.R
fi

# If we need to fetch an archive of the vendored dependencies, do so now
if [ ! "$DOWNLOAD_DEPENDENCY_ARCHIVE" = "false" ]; then
  "$RSCRIPT_BIN" tools/download-go-vendor-archive.R
  if [ ! -f tools/src-go-adbc-vendor.zip ]; then
    echo "Failed to fetch vendored dependency archive"
    exit 1
  fi
fi

# If we've fetched an archive of vendored dependencies (or built one for testing)
# extract it into src/go/adbc/vendor to use the archived/vendored dependencies.
# You can run Rscript tools/create-go-vendor-archive.zip to generate the
# dependency archive and checksum file and place it in the tools/ directory.
if [ -f tools/src-go-adbc-vendor.zip ]; then
  if [ -z "$SHASUM_BIN" ]; then
    SHASUM_BIN=`which shasum`
  fi

  DEFAULT_SHASUM_RTOOLS="/usr/bin/core_perl/shasum"
  if [ -z "$SHASUM_BIN" ] && [  -f "$DEFAULT_SHASUM_RTOOLS" ]; then
    SHASUM_BIN="$DEFAULT_SHASUM_RTOOLS"
  fi

  cd tools
  if "$SHASUM_BIN" --algorithm 512 --check --status src-go-adbc-vendor.zip.sha512 ; then
    cd ..
    "$RSCRIPT_BIN" tools/extract-go-vendor-archive.R
  else
    cd ..
    if "$RSCRIPT_BIN" tools/verify-go-vendor-archive.R ; then
      "$RSCRIPT_BIN" tools/extract-go-vendor-archive.R
    else
      echo "Checksum verification failed for vendored dependency archive"
      exit 1
    fi
  fi
fi

# Find the go binary so that we can go build!
# If we've downloaded a specific version of go to src/go/tmp, use that
# one (helpful for testing different version of go locally)
PREVIOUSLY_DOWNLOADED_GO="`pwd`/src/go/tmp/go/bin/go"
if [ -z "$GO_BIN" ] && [ -f "$PREVIOUSLY_DOWNLOADED_GO" ]; then
  GO_BIN="$PREVIOUSLY_DOWNLOADED_GO"
fi

# Check go on PATH
if [ -z "$GO_BIN" ]; then
  GO_BIN=`which go`
fi

# Try some default install locations that might not be on PATH
DEFAULT_GO_WIN="C:/Program Files/Go/bin/go.exe"
if [ -z "$GO_BIN" ] && [ -f "$DEFAULT_GO_WIN" ]; then
  GO_BIN="$DEFAULT_GO_WIN"
fi

DEFAULT_GO_MACOS="/usr/local/go/bin/go"
if [ -z "$GO_BIN" ] && [ -f "$DEFAULT_GO_MACOS" ]; then
  GO_BIN="$DEFAULT_GO_MACOS"
fi

DEFAULT_GO_HOMEBREW_M1="/opt/homebrew/bin/go"
if [ -z "$GO_BIN" ] && [ -f "$DEFAULT_GO_HOMEBREW_M1" ]; then
  GO_BIN="$DEFAULT_GO_HOMEBREW_M1"
fi

if [ -z "$GO_BIN" ]; then
  echo ""
  echo "The Go compiler is required to install this package. You can install go"
  echo "from your faviourite package manager or set the GO_BIN environment variable:"
  echo "- apt-get install golang"
  echo "- brew install golang"
  echo "- dnf install golang"
  echo "- apk add go"
  echo "- pacman -S go"
  echo "...or from the official installers available at https://go.dev/dl/"
  exit 1
fi

echo "Trying 'go version' with GO_BIN at '$GO_BIN'"
"$GO_BIN" version
if [ $? -ne 0 ]; then
  echo "go --version had a non-zero exit code"
  exit 1
fi

# Get the CC and CXX compilers
CC=`"$R_BIN" CMD config CC`
CXX=`"$R_BIN" CMD config CXX`

# Attempt to hide symbols where possible
if "$R_BIN" CMD config CC | grep -e "gcc" >/dev/null ; then
  SYMBOL_ARGS="-Wl,--version-script=go/symbols.map"
fi

# On OSX we need -framework Security because of some dependency somewhere
if [ `uname` = "Darwin" ]; then
  PKG_LIBS="-framework Security -lresolv $PKG_LIBS"
elif uname | grep -e "MSYS" >/dev/null ; then
  # Windows
  PKG_LIBS="$PKG_LIBS"
else
  # Linux
  PKG_LIBS="-lresolv $PKG_LIBS"
fi

PKG_LIBS="$PKG_LIBS $SYMBOL_ARGS"

sed \
  -e "s|@gobin@|$GO_BIN|" \
  -e "s|@libs@|$PKG_LIBS|" \
  -e "s|@cflags@|$PKG_CPPFLAGS|" \
  -e "s|@cc@|$CC|" \
  -e "s|@cxx@|$CXX|" \
  -e "s|@nproc@|$GOMAXPROCS|" \
  src/Makevars.in > src/Makevars

if [ -f "src/go/adbc/pkg/snowflake/driver.go" ]; then
  echo "Found vendored ADBC Snowflake driver"
  exit 0
fi

echo "Vendored ADBC Snowflake driver was not found."
echo "This source package was probably built incorrectly and it's probably not your fault"
exit 1

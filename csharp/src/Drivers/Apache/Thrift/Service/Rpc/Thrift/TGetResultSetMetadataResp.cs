/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Apache.Hive.Service.Rpc.Thrift
{

  public partial class TGetResultSetMetadataResp : TBase
  {
    private global::Apache.Hive.Service.Rpc.Thrift.TTableSchema _schema;
    private int _resultFormat;
    private bool _lz4Compressed;
    private string _arrowSchema;
    private int _cacheLookupResult;
    private long _uncompressedBytes;
    private long _compressedBytes;
    private bool _isStagingOperation;
    private int _reasonForNoCloudFetch;
    private List<global::Apache.Hive.Service.Rpc.Thrift.TDBSqlCloudResultFile> _resultFiles;
    private string _manifestFile;
    private string _manifestFileFormat;

    public global::Apache.Hive.Service.Rpc.Thrift.TStatus Status { get; set; }

    public global::Apache.Hive.Service.Rpc.Thrift.TTableSchema Schema
    {
      get
      {
        return _schema;
      }
      set
      {
        __isset.schema = true;
        this._schema = value;
      }
    }

    public int ResultFormat
    {
      get
      {
        return _resultFormat;
      }
      set
      {
        __isset.resultFormat = true;
        this._resultFormat = value;
      }
    }

    public bool Lz4Compressed
    {
      get
      {
        return _lz4Compressed;
      }
      set
      {
        __isset.lz4Compressed = true;
        this._lz4Compressed = value;
      }
    }

    public string ArrowSchema
    {
      get
      {
        return _arrowSchema;
      }
      set
      {
        __isset.arrowSchema = true;
        this._arrowSchema = value;
      }
    }

    public int CacheLookupResult
    {
      get
      {
        return _cacheLookupResult;
      }
      set
      {
        __isset.cacheLookupResult = true;
        this._cacheLookupResult = value;
      }
    }

    public long UncompressedBytes
    {
      get
      {
        return _uncompressedBytes;
      }
      set
      {
        __isset.uncompressedBytes = true;
        this._uncompressedBytes = value;
      }
    }

    public long CompressedBytes
    {
      get
      {
        return _compressedBytes;
      }
      set
      {
        __isset.compressedBytes = true;
        this._compressedBytes = value;
      }
    }

    public bool IsStagingOperation
    {
      get
      {
        return _isStagingOperation;
      }
      set
      {
        __isset.isStagingOperation = true;
        this._isStagingOperation = value;
      }
    }

    public int ReasonForNoCloudFetch
    {
      get
      {
        return _reasonForNoCloudFetch;
      }
      set
      {
        __isset.reasonForNoCloudFetch = true;
        this._reasonForNoCloudFetch = value;
      }
    }

    public List<global::Apache.Hive.Service.Rpc.Thrift.TDBSqlCloudResultFile> ResultFiles
    {
      get
      {
        return _resultFiles;
      }
      set
      {
        __isset.resultFiles = true;
        this._resultFiles = value;
      }
    }

    public string ManifestFile
    {
      get
      {
        return _manifestFile;
      }
      set
      {
        __isset.manifestFile = true;
        this._manifestFile = value;
      }
    }

    public string ManifestFileFormat
    {
      get
      {
        return _manifestFileFormat;
      }
      set
      {
        __isset.manifestFileFormat = true;
        this._manifestFileFormat = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool schema;
      public bool resultFormat;
      public bool lz4Compressed;
      public bool arrowSchema;
      public bool cacheLookupResult;
      public bool uncompressedBytes;
      public bool compressedBytes;
      public bool isStagingOperation;
      public bool reasonForNoCloudFetch;
      public bool resultFiles;
      public bool manifestFile;
      public bool manifestFileFormat;
    }

    public TGetResultSetMetadataResp()
    {
    }

    public TGetResultSetMetadataResp(global::Apache.Hive.Service.Rpc.Thrift.TStatus status) : this()
    {
      this.Status = status;
    }

    public TGetResultSetMetadataResp DeepCopy()
    {
      var tmp574 = new TGetResultSetMetadataResp();
      if ((Status != null))
      {
        tmp574.Status = (global::Apache.Hive.Service.Rpc.Thrift.TStatus)this.Status.DeepCopy();
      }
      if ((Schema != null) && __isset.schema)
      {
        tmp574.Schema = (global::Apache.Hive.Service.Rpc.Thrift.TTableSchema)this.Schema.DeepCopy();
      }
      tmp574.__isset.schema = this.__isset.schema;
      if (__isset.resultFormat)
      {
        tmp574.ResultFormat = this.ResultFormat;
      }
      tmp574.__isset.resultFormat = this.__isset.resultFormat;
      if (__isset.lz4Compressed)
      {
        tmp574.Lz4Compressed = this.Lz4Compressed;
      }
      tmp574.__isset.lz4Compressed = this.__isset.lz4Compressed;
      if ((ArrowSchema != null) && __isset.arrowSchema)
      {
        tmp574.ArrowSchema = this.ArrowSchema;
      }
      tmp574.__isset.arrowSchema = this.__isset.arrowSchema;
      if (__isset.cacheLookupResult)
      {
        tmp574.CacheLookupResult = this.CacheLookupResult;
      }
      tmp574.__isset.cacheLookupResult = this.__isset.cacheLookupResult;
      if (__isset.uncompressedBytes)
      {
        tmp574.UncompressedBytes = this.UncompressedBytes;
      }
      tmp574.__isset.uncompressedBytes = this.__isset.uncompressedBytes;
      if (__isset.compressedBytes)
      {
        tmp574.CompressedBytes = this.CompressedBytes;
      }
      tmp574.__isset.compressedBytes = this.__isset.compressedBytes;
      if (__isset.isStagingOperation)
      {
        tmp574.IsStagingOperation = this.IsStagingOperation;
      }
      tmp574.__isset.isStagingOperation = this.__isset.isStagingOperation;
      if (__isset.reasonForNoCloudFetch)
      {
        tmp574.ReasonForNoCloudFetch = this.ReasonForNoCloudFetch;
      }
      tmp574.__isset.reasonForNoCloudFetch = this.__isset.reasonForNoCloudFetch;
      if ((ResultFiles != null) && __isset.resultFiles)
      {
        tmp574.ResultFiles = this.ResultFiles.DeepCopy();
      }
      tmp574.__isset.resultFiles = this.__isset.resultFiles;
      if ((ManifestFile != null) && __isset.manifestFile)
      {
        tmp574.ManifestFile = this.ManifestFile;
      }
      tmp574.__isset.manifestFile = this.__isset.manifestFile;
      if ((ManifestFileFormat != null) && __isset.manifestFileFormat)
      {
        tmp574.ManifestFileFormat = this.ManifestFileFormat;
      }
      tmp574.__isset.manifestFileFormat = this.__isset.manifestFileFormat;
      return tmp574;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_status = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                Status = new global::Apache.Hive.Service.Rpc.Thrift.TStatus();
                await Status.ReadAsync(iprot, cancellationToken);
                isset_status = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                Schema = new global::Apache.Hive.Service.Rpc.Thrift.TTableSchema();
                await Schema.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1281:
              if (field.Type == TType.I32)
              {
                ResultFormat = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1282:
              if (field.Type == TType.Bool)
              {
                Lz4Compressed = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1283:
              if (field.Type == TType.String)
              {
                ArrowSchema = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1284:
              if (field.Type == TType.I32)
              {
                CacheLookupResult = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1285:
              if (field.Type == TType.I64)
              {
                UncompressedBytes = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1286:
              if (field.Type == TType.I64)
              {
                CompressedBytes = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1287:
              if (field.Type == TType.Bool)
              {
                IsStagingOperation = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3329:
              if (field.Type == TType.I32)
              {
                ReasonForNoCloudFetch = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3330:
              if (field.Type == TType.List)
              {
                {
                  var _list575 = await iprot.ReadListBeginAsync(cancellationToken);
                  ResultFiles = new List<global::Apache.Hive.Service.Rpc.Thrift.TDBSqlCloudResultFile>(_list575.Count);
                  for(int _i576 = 0; _i576 < _list575.Count; ++_i576)
                  {
                    global::Apache.Hive.Service.Rpc.Thrift.TDBSqlCloudResultFile _elem577;
                    _elem577 = new global::Apache.Hive.Service.Rpc.Thrift.TDBSqlCloudResultFile();
                    await _elem577.ReadAsync(iprot, cancellationToken);
                    ResultFiles.Add(_elem577);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3331:
              if (field.Type == TType.String)
              {
                ManifestFile = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3332:
              if (field.Type == TType.String)
              {
                ManifestFileFormat = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default:
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_status)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp578 = new TStruct("TGetResultSetMetadataResp");
        await oprot.WriteStructBeginAsync(tmp578, cancellationToken);
        var tmp579 = new TField();
        if ((Status != null))
        {
          tmp579.Name = "status";
          tmp579.Type = TType.Struct;
          tmp579.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp579, cancellationToken);
          await Status.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if ((Schema != null) && __isset.schema)
        {
          tmp579.Name = "schema";
          tmp579.Type = TType.Struct;
          tmp579.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp579, cancellationToken);
          await Schema.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.resultFormat)
        {
          tmp579.Name = "resultFormat";
          tmp579.Type = TType.I32;
          tmp579.ID = 1281;
          await oprot.WriteFieldBeginAsync(tmp579, cancellationToken);
          await oprot.WriteI32Async(ResultFormat, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.lz4Compressed)
        {
          tmp579.Name = "lz4Compressed";
          tmp579.Type = TType.Bool;
          tmp579.ID = 1282;
          await oprot.WriteFieldBeginAsync(tmp579, cancellationToken);
          await oprot.WriteBoolAsync(Lz4Compressed, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if ((ArrowSchema != null) && __isset.arrowSchema)
        {
          tmp579.Name = "arrowSchema";
          tmp579.Type = TType.String;
          tmp579.ID = 1283;
          await oprot.WriteFieldBeginAsync(tmp579, cancellationToken);
          await oprot.WriteStringAsync(ArrowSchema, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.cacheLookupResult)
        {
          tmp579.Name = "cacheLookupResult";
          tmp579.Type = TType.I32;
          tmp579.ID = 1284;
          await oprot.WriteFieldBeginAsync(tmp579, cancellationToken);
          await oprot.WriteI32Async(CacheLookupResult, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.uncompressedBytes)
        {
          tmp579.Name = "uncompressedBytes";
          tmp579.Type = TType.I64;
          tmp579.ID = 1285;
          await oprot.WriteFieldBeginAsync(tmp579, cancellationToken);
          await oprot.WriteI64Async(UncompressedBytes, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.compressedBytes)
        {
          tmp579.Name = "compressedBytes";
          tmp579.Type = TType.I64;
          tmp579.ID = 1286;
          await oprot.WriteFieldBeginAsync(tmp579, cancellationToken);
          await oprot.WriteI64Async(CompressedBytes, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.isStagingOperation)
        {
          tmp579.Name = "isStagingOperation";
          tmp579.Type = TType.Bool;
          tmp579.ID = 1287;
          await oprot.WriteFieldBeginAsync(tmp579, cancellationToken);
          await oprot.WriteBoolAsync(IsStagingOperation, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.reasonForNoCloudFetch)
        {
          tmp579.Name = "reasonForNoCloudFetch";
          tmp579.Type = TType.I32;
          tmp579.ID = 3329;
          await oprot.WriteFieldBeginAsync(tmp579, cancellationToken);
          await oprot.WriteI32Async(ReasonForNoCloudFetch, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if ((ResultFiles != null) && __isset.resultFiles)
        {
          tmp579.Name = "resultFiles";
          tmp579.Type = TType.List;
          tmp579.ID = 3330;
          await oprot.WriteFieldBeginAsync(tmp579, cancellationToken);
          await oprot.WriteListBeginAsync(new TList(TType.Struct, ResultFiles.Count), cancellationToken);
          foreach (global::Apache.Hive.Service.Rpc.Thrift.TDBSqlCloudResultFile _iter580 in ResultFiles)
          {
            await _iter580.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if ((ManifestFile != null) && __isset.manifestFile)
        {
          tmp579.Name = "manifestFile";
          tmp579.Type = TType.String;
          tmp579.ID = 3331;
          await oprot.WriteFieldBeginAsync(tmp579, cancellationToken);
          await oprot.WriteStringAsync(ManifestFile, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if ((ManifestFileFormat != null) && __isset.manifestFileFormat)
        {
          tmp579.Name = "manifestFileFormat";
          tmp579.Type = TType.String;
          tmp579.ID = 3332;
          await oprot.WriteFieldBeginAsync(tmp579, cancellationToken);
          await oprot.WriteStringAsync(ManifestFileFormat, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is TGetResultSetMetadataResp other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return global::System.Object.Equals(Status, other.Status)
        && ((__isset.schema == other.__isset.schema) && ((!__isset.schema) || (global::System.Object.Equals(Schema, other.Schema))))
        && ((__isset.resultFormat == other.__isset.resultFormat) && ((!__isset.resultFormat) || (global::System.Object.Equals(ResultFormat, other.ResultFormat))))
        && ((__isset.lz4Compressed == other.__isset.lz4Compressed) && ((!__isset.lz4Compressed) || (global::System.Object.Equals(Lz4Compressed, other.Lz4Compressed))))
        && ((__isset.arrowSchema == other.__isset.arrowSchema) && ((!__isset.arrowSchema) || (global::System.Object.Equals(ArrowSchema, other.ArrowSchema))))
        && ((__isset.cacheLookupResult == other.__isset.cacheLookupResult) && ((!__isset.cacheLookupResult) || (global::System.Object.Equals(CacheLookupResult, other.CacheLookupResult))))
        && ((__isset.uncompressedBytes == other.__isset.uncompressedBytes) && ((!__isset.uncompressedBytes) || (global::System.Object.Equals(UncompressedBytes, other.UncompressedBytes))))
        && ((__isset.compressedBytes == other.__isset.compressedBytes) && ((!__isset.compressedBytes) || (global::System.Object.Equals(CompressedBytes, other.CompressedBytes))))
        && ((__isset.isStagingOperation == other.__isset.isStagingOperation) && ((!__isset.isStagingOperation) || (global::System.Object.Equals(IsStagingOperation, other.IsStagingOperation))))
        && ((__isset.reasonForNoCloudFetch == other.__isset.reasonForNoCloudFetch) && ((!__isset.reasonForNoCloudFetch) || (global::System.Object.Equals(ReasonForNoCloudFetch, other.ReasonForNoCloudFetch))))
        && ((__isset.resultFiles == other.__isset.resultFiles) && ((!__isset.resultFiles) || (TCollections.Equals(ResultFiles, other.ResultFiles))))
        && ((__isset.manifestFile == other.__isset.manifestFile) && ((!__isset.manifestFile) || (global::System.Object.Equals(ManifestFile, other.ManifestFile))))
        && ((__isset.manifestFileFormat == other.__isset.manifestFileFormat) && ((!__isset.manifestFileFormat) || (global::System.Object.Equals(ManifestFileFormat, other.ManifestFileFormat))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if ((Status != null))
        {
          hashcode = (hashcode * 397) + Status.GetHashCode();
        }
        if ((Schema != null) && __isset.schema)
        {
          hashcode = (hashcode * 397) + Schema.GetHashCode();
        }
        if (__isset.resultFormat)
        {
          hashcode = (hashcode * 397) + ResultFormat.GetHashCode();
        }
        if (__isset.lz4Compressed)
        {
          hashcode = (hashcode * 397) + Lz4Compressed.GetHashCode();
        }
        if ((ArrowSchema != null) && __isset.arrowSchema)
        {
          hashcode = (hashcode * 397) + ArrowSchema.GetHashCode();
        }
        if (__isset.cacheLookupResult)
        {
          hashcode = (hashcode * 397) + CacheLookupResult.GetHashCode();
        }
        if (__isset.uncompressedBytes)
        {
          hashcode = (hashcode * 397) + UncompressedBytes.GetHashCode();
        }
        if (__isset.compressedBytes)
        {
          hashcode = (hashcode * 397) + CompressedBytes.GetHashCode();
        }
        if (__isset.isStagingOperation)
        {
          hashcode = (hashcode * 397) + IsStagingOperation.GetHashCode();
        }
        if (__isset.reasonForNoCloudFetch)
        {
          hashcode = (hashcode * 397) + ReasonForNoCloudFetch.GetHashCode();
        }
        if ((ResultFiles != null) && __isset.resultFiles)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(ResultFiles);
        }
        if ((ManifestFile != null) && __isset.manifestFile)
        {
          hashcode = (hashcode * 397) + ManifestFile.GetHashCode();
        }
        if ((ManifestFileFormat != null) && __isset.manifestFileFormat)
        {
          hashcode = (hashcode * 397) + ManifestFileFormat.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp581 = new StringBuilder("TGetResultSetMetadataResp(");
      if ((Status != null))
      {
        tmp581.Append(", Status: ");
        Status.ToString(tmp581);
      }
      if ((Schema != null) && __isset.schema)
      {
        tmp581.Append(", Schema: ");
        Schema.ToString(tmp581);
      }
      if (__isset.resultFormat)
      {
        tmp581.Append(", ResultFormat: ");
        ResultFormat.ToString(tmp581);
      }
      if (__isset.lz4Compressed)
      {
        tmp581.Append(", Lz4Compressed: ");
        Lz4Compressed.ToString(tmp581);
      }
      if ((ArrowSchema != null) && __isset.arrowSchema)
      {
        tmp581.Append(", ArrowSchema: ");
        ArrowSchema.ToString(tmp581);
      }
      if (__isset.cacheLookupResult)
      {
        tmp581.Append(", CacheLookupResult: ");
        CacheLookupResult.ToString(tmp581);
      }
      if (__isset.uncompressedBytes)
      {
        tmp581.Append(", UncompressedBytes: ");
        UncompressedBytes.ToString(tmp581);
      }
      if (__isset.compressedBytes)
      {
        tmp581.Append(", CompressedBytes: ");
        CompressedBytes.ToString(tmp581);
      }
      if (__isset.isStagingOperation)
      {
        tmp581.Append(", IsStagingOperation: ");
        IsStagingOperation.ToString(tmp581);
      }
      if (__isset.reasonForNoCloudFetch)
      {
        tmp581.Append(", ReasonForNoCloudFetch: ");
        ReasonForNoCloudFetch.ToString(tmp581);
      }
      if ((ResultFiles != null) && __isset.resultFiles)
      {
        tmp581.Append(", ResultFiles: ");
        ResultFiles.ToString(tmp581);
      }
      if ((ManifestFile != null) && __isset.manifestFile)
      {
        tmp581.Append(", ManifestFile: ");
        ManifestFile.ToString(tmp581);
      }
      if ((ManifestFileFormat != null) && __isset.manifestFileFormat)
      {
        tmp581.Append(", ManifestFileFormat: ");
        ManifestFileFormat.ToString(tmp581);
      }
      tmp581.Append(')');
      return tmp581.ToString();
    }
  }

}

/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.21.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


// targeting netstandard 2.x
#if(! NETSTANDARD2_0_OR_GREATER && ! NET6_0_OR_GREATER && ! NET472_OR_GREATER)
#error Unexpected target platform. See 'thrift --help' for details.
#endif

#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable CS0618   // silence our own deprecation warnings
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Apache.Hive.Service.Rpc.Thrift
{

  internal partial class TExecuteStatementReq : TBase
  {
    private Dictionary<string, string> _confOverlay;
    private bool _runAsync;
    private global::Apache.Hive.Service.Rpc.Thrift.TSparkGetDirectResults _getDirectResults;
    private long _queryTimeout;
    private bool _canReadArrowResult;
    private bool _canDownloadResult;
    private bool _canDecompressLZ4Result;
    private long _maxBytesPerFile;
    private global::Apache.Hive.Service.Rpc.Thrift.TSparkArrowTypes _useArrowNativeTypes;
    private long _resultRowLimit;
    private List<global::Apache.Hive.Service.Rpc.Thrift.TSparkParameter> _parameters;
    private long _maxBytesPerBatch;
    private global::Apache.Hive.Service.Rpc.Thrift.TStatementConf _statementConf;
    private global::Apache.Hive.Service.Rpc.Thrift.TResultPersistenceMode _resultPersistenceMode;
    private bool _enforceResultPersistenceMode;

    public global::Apache.Hive.Service.Rpc.Thrift.TSessionHandle SessionHandle { get; set; }

    public string Statement { get; set; }

    [Obsolete("This code is deprecated.")]
    public Dictionary<string, string> ConfOverlay
    {
      get
      {
        return _confOverlay;
      }
      set
      {
        __isset.confOverlay = true;
        this._confOverlay = value;
      }
    }

    public bool RunAsync
    {
      get
      {
        return _runAsync;
      }
      set
      {
        __isset.runAsync = true;
        this._runAsync = value;
      }
    }

    public global::Apache.Hive.Service.Rpc.Thrift.TSparkGetDirectResults GetDirectResults
    {
      get
      {
        return _getDirectResults;
      }
      set
      {
        __isset.getDirectResults = true;
        this._getDirectResults = value;
      }
    }

    public long QueryTimeout
    {
      get
      {
        return _queryTimeout;
      }
      set
      {
        __isset.queryTimeout = true;
        this._queryTimeout = value;
      }
    }

    public bool CanReadArrowResult
    {
      get
      {
        return _canReadArrowResult;
      }
      set
      {
        __isset.canReadArrowResult = true;
        this._canReadArrowResult = value;
      }
    }

    public bool CanDownloadResult
    {
      get
      {
        return _canDownloadResult;
      }
      set
      {
        __isset.canDownloadResult = true;
        this._canDownloadResult = value;
      }
    }

    public bool CanDecompressLZ4Result
    {
      get
      {
        return _canDecompressLZ4Result;
      }
      set
      {
        __isset.canDecompressLZ4Result = true;
        this._canDecompressLZ4Result = value;
      }
    }

    public long MaxBytesPerFile
    {
      get
      {
        return _maxBytesPerFile;
      }
      set
      {
        __isset.maxBytesPerFile = true;
        this._maxBytesPerFile = value;
      }
    }

    public global::Apache.Hive.Service.Rpc.Thrift.TSparkArrowTypes UseArrowNativeTypes
    {
      get
      {
        return _useArrowNativeTypes;
      }
      set
      {
        __isset.useArrowNativeTypes = true;
        this._useArrowNativeTypes = value;
      }
    }

    public long ResultRowLimit
    {
      get
      {
        return _resultRowLimit;
      }
      set
      {
        __isset.resultRowLimit = true;
        this._resultRowLimit = value;
      }
    }

    public List<global::Apache.Hive.Service.Rpc.Thrift.TSparkParameter> Parameters
    {
      get
      {
        return _parameters;
      }
      set
      {
        __isset.@parameters = true;
        this._parameters = value;
      }
    }

    public long MaxBytesPerBatch
    {
      get
      {
        return _maxBytesPerBatch;
      }
      set
      {
        __isset.maxBytesPerBatch = true;
        this._maxBytesPerBatch = value;
      }
    }

    public global::Apache.Hive.Service.Rpc.Thrift.TStatementConf StatementConf
    {
      get
      {
        return _statementConf;
      }
      set
      {
        __isset.statementConf = true;
        this._statementConf = value;
      }
    }

    /// <summary>
    ///
    /// <seealso cref="global::Apache.Hive.Service.Rpc.Thrift.TResultPersistenceMode"/>
    /// </summary>
    public global::Apache.Hive.Service.Rpc.Thrift.TResultPersistenceMode ResultPersistenceMode
    {
      get
      {
        return _resultPersistenceMode;
      }
      set
      {
        __isset.resultPersistenceMode = true;
        this._resultPersistenceMode = value;
      }
    }

    public bool EnforceResultPersistenceMode
    {
      get
      {
        return _enforceResultPersistenceMode;
      }
      set
      {
        __isset.enforceResultPersistenceMode = true;
        this._enforceResultPersistenceMode = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool confOverlay;
      public bool runAsync;
      public bool getDirectResults;
      public bool queryTimeout;
      public bool canReadArrowResult;
      public bool canDownloadResult;
      public bool canDecompressLZ4Result;
      public bool maxBytesPerFile;
      public bool useArrowNativeTypes;
      public bool resultRowLimit;
      public bool @parameters;
      public bool maxBytesPerBatch;
      public bool statementConf;
      public bool resultPersistenceMode;
      public bool enforceResultPersistenceMode;
    }

    public TExecuteStatementReq()
    {
      this._runAsync = false;
      this.__isset.runAsync = true;
      this._queryTimeout = 0;
      this.__isset.queryTimeout = true;
    }

    public TExecuteStatementReq(global::Apache.Hive.Service.Rpc.Thrift.TSessionHandle sessionHandle, string @statement) : this()
    {
      this.SessionHandle = sessionHandle;
      this.Statement = @statement;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_sessionHandle = false;
        bool isset_statement = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                SessionHandle = new global::Apache.Hive.Service.Rpc.Thrift.TSessionHandle();
                await SessionHandle.ReadAsync(iprot, cancellationToken);
                isset_sessionHandle = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Statement = await iprot.ReadStringAsync(cancellationToken);
                isset_statement = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Map)
              {
                {
                  var _map379 = await iprot.ReadMapBeginAsync(cancellationToken);
                  ConfOverlay = new Dictionary<string, string>(_map379.Count);
                  for(int _i380 = 0; _i380 < _map379.Count; ++_i380)
                  {
                    string _key381;
                    string _val382;
                    _key381 = await iprot.ReadStringAsync(cancellationToken);
                    _val382 = await iprot.ReadStringAsync(cancellationToken);
                    ConfOverlay[_key381] = _val382;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Bool)
              {
                RunAsync = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1281:
              if (field.Type == TType.Struct)
              {
                GetDirectResults = new global::Apache.Hive.Service.Rpc.Thrift.TSparkGetDirectResults();
                await GetDirectResults.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.I64)
              {
                QueryTimeout = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1282:
              if (field.Type == TType.Bool)
              {
                CanReadArrowResult = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1283:
              if (field.Type == TType.Bool)
              {
                CanDownloadResult = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1284:
              if (field.Type == TType.Bool)
              {
                CanDecompressLZ4Result = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1285:
              if (field.Type == TType.I64)
              {
                MaxBytesPerFile = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1286:
              if (field.Type == TType.Struct)
              {
                UseArrowNativeTypes = new global::Apache.Hive.Service.Rpc.Thrift.TSparkArrowTypes();
                await UseArrowNativeTypes.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1287:
              if (field.Type == TType.I64)
              {
                ResultRowLimit = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1288:
              if (field.Type == TType.List)
              {
                {
                  var _list383 = await iprot.ReadListBeginAsync(cancellationToken);
                  Parameters = new List<global::Apache.Hive.Service.Rpc.Thrift.TSparkParameter>(_list383.Count);
                  for(int _i384 = 0; _i384 < _list383.Count; ++_i384)
                  {
                    global::Apache.Hive.Service.Rpc.Thrift.TSparkParameter _elem385;
                    _elem385 = new global::Apache.Hive.Service.Rpc.Thrift.TSparkParameter();
                    await _elem385.ReadAsync(iprot, cancellationToken);
                    Parameters.Add(_elem385);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1289:
              if (field.Type == TType.I64)
              {
                MaxBytesPerBatch = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1296:
              if (field.Type == TType.Struct)
              {
                StatementConf = new global::Apache.Hive.Service.Rpc.Thrift.TStatementConf();
                await StatementConf.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3335:
              if (field.Type == TType.I32)
              {
                ResultPersistenceMode = (global::Apache.Hive.Service.Rpc.Thrift.TResultPersistenceMode)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3344:
              if (field.Type == TType.Bool)
              {
                EnforceResultPersistenceMode = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default:
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_sessionHandle)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_statement)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp393 = new TStruct("TExecuteStatementReq");
        await oprot.WriteStructBeginAsync(tmp393, cancellationToken);
        var tmp394 = new TField();
        if((SessionHandle != null))
        {
          tmp394.Name = "sessionHandle";
          tmp394.Type = TType.Struct;
          tmp394.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp394, cancellationToken);
          await SessionHandle.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Statement != null))
        {
          tmp394.Name = "statement";
          tmp394.Type = TType.String;
          tmp394.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp394, cancellationToken);
          await oprot.WriteStringAsync(Statement, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((ConfOverlay != null) && __isset.confOverlay)
        {
          tmp394.Name = "confOverlay";
          tmp394.Type = TType.Map;
          tmp394.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp394, cancellationToken);
          await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, ConfOverlay.Count), cancellationToken);
          foreach (string _iter395 in ConfOverlay.Keys)
          {
            await oprot.WriteStringAsync(_iter395, cancellationToken);
            await oprot.WriteStringAsync(ConfOverlay[_iter395], cancellationToken);
          }
          await oprot.WriteMapEndAsync(cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.runAsync)
        {
          tmp394.Name = "runAsync";
          tmp394.Type = TType.Bool;
          tmp394.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp394, cancellationToken);
          await oprot.WriteBoolAsync(RunAsync, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.queryTimeout)
        {
          tmp394.Name = "queryTimeout";
          tmp394.Type = TType.I64;
          tmp394.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp394, cancellationToken);
          await oprot.WriteI64Async(QueryTimeout, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((GetDirectResults != null) && __isset.getDirectResults)
        {
          tmp394.Name = "getDirectResults";
          tmp394.Type = TType.Struct;
          tmp394.ID = 1281;
          await oprot.WriteFieldBeginAsync(tmp394, cancellationToken);
          await GetDirectResults.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.canReadArrowResult)
        {
          tmp394.Name = "canReadArrowResult";
          tmp394.Type = TType.Bool;
          tmp394.ID = 1282;
          await oprot.WriteFieldBeginAsync(tmp394, cancellationToken);
          await oprot.WriteBoolAsync(CanReadArrowResult, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.canDownloadResult)
        {
          tmp394.Name = "canDownloadResult";
          tmp394.Type = TType.Bool;
          tmp394.ID = 1283;
          await oprot.WriteFieldBeginAsync(tmp394, cancellationToken);
          await oprot.WriteBoolAsync(CanDownloadResult, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.canDecompressLZ4Result)
        {
          tmp394.Name = "canDecompressLZ4Result";
          tmp394.Type = TType.Bool;
          tmp394.ID = 1284;
          await oprot.WriteFieldBeginAsync(tmp394, cancellationToken);
          await oprot.WriteBoolAsync(CanDecompressLZ4Result, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.maxBytesPerFile)
        {
          tmp394.Name = "maxBytesPerFile";
          tmp394.Type = TType.I64;
          tmp394.ID = 1285;
          await oprot.WriteFieldBeginAsync(tmp394, cancellationToken);
          await oprot.WriteI64Async(MaxBytesPerFile, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((UseArrowNativeTypes != null) && __isset.useArrowNativeTypes)
        {
          tmp394.Name = "useArrowNativeTypes";
          tmp394.Type = TType.Struct;
          tmp394.ID = 1286;
          await oprot.WriteFieldBeginAsync(tmp394, cancellationToken);
          await UseArrowNativeTypes.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.resultRowLimit)
        {
          tmp394.Name = "resultRowLimit";
          tmp394.Type = TType.I64;
          tmp394.ID = 1287;
          await oprot.WriteFieldBeginAsync(tmp394, cancellationToken);
          await oprot.WriteI64Async(ResultRowLimit, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Parameters != null) && __isset.@parameters)
        {
          tmp394.Name = "parameters";
          tmp394.Type = TType.List;
          tmp394.ID = 1288;
          await oprot.WriteFieldBeginAsync(tmp394, cancellationToken);
          await oprot.WriteListBeginAsync(new TList(TType.Struct, Parameters.Count), cancellationToken);
          foreach (global::Apache.Hive.Service.Rpc.Thrift.TSparkParameter _iter396 in Parameters)
          {
            await _iter396.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.maxBytesPerBatch)
        {
          tmp394.Name = "maxBytesPerBatch";
          tmp394.Type = TType.I64;
          tmp394.ID = 1289;
          await oprot.WriteFieldBeginAsync(tmp394, cancellationToken);
          await oprot.WriteI64Async(MaxBytesPerBatch, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((StatementConf != null) && __isset.statementConf)
        {
          tmp394.Name = "statementConf";
          tmp394.Type = TType.Struct;
          tmp394.ID = 1296;
          await oprot.WriteFieldBeginAsync(tmp394, cancellationToken);
          await StatementConf.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.resultPersistenceMode)
        {
          tmp394.Name = "resultPersistenceMode";
          tmp394.Type = TType.I32;
          tmp394.ID = 3335;
          await oprot.WriteFieldBeginAsync(tmp394, cancellationToken);
          await oprot.WriteI32Async((int)ResultPersistenceMode, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.enforceResultPersistenceMode)
        {
          tmp394.Name = "enforceResultPersistenceMode";
          tmp394.Type = TType.Bool;
          tmp394.ID = 3344;
          await oprot.WriteFieldBeginAsync(tmp394, cancellationToken);
          await oprot.WriteBoolAsync(EnforceResultPersistenceMode, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is TExecuteStatementReq other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return global::System.Object.Equals(SessionHandle, other.SessionHandle)
        && global::System.Object.Equals(Statement, other.Statement)
        && ((__isset.confOverlay == other.__isset.confOverlay) && ((!__isset.confOverlay) || (TCollections.Equals(ConfOverlay, other.ConfOverlay))))
        && ((__isset.runAsync == other.__isset.runAsync) && ((!__isset.runAsync) || (global::System.Object.Equals(RunAsync, other.RunAsync))))
        && ((__isset.getDirectResults == other.__isset.getDirectResults) && ((!__isset.getDirectResults) || (global::System.Object.Equals(GetDirectResults, other.GetDirectResults))))
        && ((__isset.queryTimeout == other.__isset.queryTimeout) && ((!__isset.queryTimeout) || (global::System.Object.Equals(QueryTimeout, other.QueryTimeout))))
        && ((__isset.canReadArrowResult == other.__isset.canReadArrowResult) && ((!__isset.canReadArrowResult) || (global::System.Object.Equals(CanReadArrowResult, other.CanReadArrowResult))))
        && ((__isset.canDownloadResult == other.__isset.canDownloadResult) && ((!__isset.canDownloadResult) || (global::System.Object.Equals(CanDownloadResult, other.CanDownloadResult))))
        && ((__isset.canDecompressLZ4Result == other.__isset.canDecompressLZ4Result) && ((!__isset.canDecompressLZ4Result) || (global::System.Object.Equals(CanDecompressLZ4Result, other.CanDecompressLZ4Result))))
        && ((__isset.maxBytesPerFile == other.__isset.maxBytesPerFile) && ((!__isset.maxBytesPerFile) || (global::System.Object.Equals(MaxBytesPerFile, other.MaxBytesPerFile))))
        && ((__isset.useArrowNativeTypes == other.__isset.useArrowNativeTypes) && ((!__isset.useArrowNativeTypes) || (global::System.Object.Equals(UseArrowNativeTypes, other.UseArrowNativeTypes))))
        && ((__isset.resultRowLimit == other.__isset.resultRowLimit) && ((!__isset.resultRowLimit) || (global::System.Object.Equals(ResultRowLimit, other.ResultRowLimit))))
        && ((__isset.@parameters == other.__isset.@parameters) && ((!__isset.@parameters) || (global::System.Object.Equals(Parameters, other.Parameters))))
        && ((__isset.maxBytesPerBatch == other.__isset.maxBytesPerBatch) && ((!__isset.maxBytesPerBatch) || (global::System.Object.Equals(MaxBytesPerBatch, other.MaxBytesPerBatch))))
        && ((__isset.statementConf == other.__isset.statementConf) && ((!__isset.statementConf) || (global::System.Object.Equals(StatementConf, other.StatementConf))))
        && ((__isset.resultPersistenceMode == other.__isset.resultPersistenceMode) && ((!__isset.resultPersistenceMode) || (global::System.Object.Equals(ResultPersistenceMode, other.ResultPersistenceMode))))
        && ((__isset.enforceResultPersistenceMode == other.__isset.enforceResultPersistenceMode) && ((!__isset.enforceResultPersistenceMode) || (global::System.Object.Equals(EnforceResultPersistenceMode, other.EnforceResultPersistenceMode))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((SessionHandle != null))
        {
          hashcode = (hashcode * 397) + SessionHandle.GetHashCode();
        }
        if((Statement != null))
        {
          hashcode = (hashcode * 397) + Statement.GetHashCode();
        }
        if((ConfOverlay != null) && __isset.confOverlay)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(ConfOverlay);
        }
        if(__isset.runAsync)
        {
          hashcode = (hashcode * 397) + RunAsync.GetHashCode();
        }
        if((GetDirectResults != null) && __isset.getDirectResults)
        {
          hashcode = (hashcode * 397) + GetDirectResults.GetHashCode();
        }
        if(__isset.queryTimeout)
        {
          hashcode = (hashcode * 397) + QueryTimeout.GetHashCode();
        }
        if(__isset.canReadArrowResult)
        {
          hashcode = (hashcode * 397) + CanReadArrowResult.GetHashCode();
        }
        if(__isset.canDownloadResult)
        {
          hashcode = (hashcode * 397) + CanDownloadResult.GetHashCode();
        }
        if(__isset.canDecompressLZ4Result)
        {
          hashcode = (hashcode * 397) + CanDecompressLZ4Result.GetHashCode();
        }
        if(__isset.maxBytesPerFile)
        {
          hashcode = (hashcode * 397) + MaxBytesPerFile.GetHashCode();
        }
        if((UseArrowNativeTypes != null) && __isset.useArrowNativeTypes)
        {
          hashcode = (hashcode * 397) + UseArrowNativeTypes.GetHashCode();
        }
        if(__isset.resultRowLimit)
        {
          hashcode = (hashcode * 397) + ResultRowLimit.GetHashCode();
        }
        if((Parameters != null) && __isset.@parameters)
        {
          hashcode = (hashcode * 397) + Parameters.GetHashCode();
        }
        if(__isset.maxBytesPerBatch)
        {
          hashcode = (hashcode * 397) + MaxBytesPerBatch.GetHashCode();
        }
        if((StatementConf != null) && __isset.statementConf)
        {
          hashcode = (hashcode * 397) + StatementConf.GetHashCode();
        }
        if(__isset.resultPersistenceMode)
        {
          hashcode = (hashcode * 397) + ResultPersistenceMode.GetHashCode();
        }
        if(__isset.enforceResultPersistenceMode)
        {
          hashcode = (hashcode * 397) + EnforceResultPersistenceMode.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp399 = new StringBuilder("TExecuteStatementReq(");
      if((SessionHandle != null))
      {
        tmp399.Append(", SessionHandle: ");
        SessionHandle.ToString(tmp399);
      }
      if((Statement != null))
      {
        tmp399.Append(", Statement: ");
        Statement.ToString(tmp399);
      }
      if((ConfOverlay != null) && __isset.confOverlay)
      {
        tmp399.Append(", ConfOverlay: ");
        ConfOverlay.ToString(tmp399);
      }
      if(__isset.runAsync)
      {
        tmp399.Append(", RunAsync: ");
        RunAsync.ToString(tmp399);
      }
      if((GetDirectResults != null) && __isset.getDirectResults)
      {
        tmp399.Append(", GetDirectResults: ");
        GetDirectResults.ToString(tmp399);
      }
      if(__isset.queryTimeout)
      {
        tmp399.Append(", QueryTimeout: ");
        QueryTimeout.ToString(tmp399);
      }
      if(__isset.canReadArrowResult)
      {
        tmp399.Append(", CanReadArrowResult: ");
        CanReadArrowResult.ToString(tmp399);
      }
      if(__isset.canDownloadResult)
      {
        tmp399.Append(", CanDownloadResult: ");
        CanDownloadResult.ToString(tmp399);
      }
      if(__isset.canDecompressLZ4Result)
      {
        tmp399.Append(", CanDecompressLZ4Result: ");
        CanDecompressLZ4Result.ToString(tmp399);
      }
      if(__isset.maxBytesPerFile)
      {
        tmp399.Append(", MaxBytesPerFile: ");
        MaxBytesPerFile.ToString(tmp399);
      }
      if((UseArrowNativeTypes != null) && __isset.useArrowNativeTypes)
      {
        tmp399.Append(", UseArrowNativeTypes: ");
        UseArrowNativeTypes.ToString(tmp399);
      }
      if(__isset.resultRowLimit)
      {
        tmp399.Append(", ResultRowLimit: ");
        ResultRowLimit.ToString(tmp399);
      }
      if((Parameters != null) && __isset.@parameters)
      {
        tmp399.Append(", Parameters: ");
        Parameters.ToString(tmp399);
      }
      if(__isset.maxBytesPerBatch)
      {
        tmp399.Append(", MaxBytesPerBatch: ");
        MaxBytesPerBatch.ToString(tmp399);
      }
      if((StatementConf != null) && __isset.statementConf)
      {
        tmp399.Append(", StatementConf: ");
        StatementConf.ToString(tmp399);
      }
      if(__isset.resultPersistenceMode)
      {
        tmp399.Append(", ResultPersistenceMode: ");
        ResultPersistenceMode.ToString(tmp399);
      }
      if(__isset.enforceResultPersistenceMode)
      {
        tmp399.Append(", EnforceResultPersistenceMode: ");
        EnforceResultPersistenceMode.ToString(tmp399);
      }
      tmp399.Append(')');
      return tmp399.ToString();
    }
  }

}

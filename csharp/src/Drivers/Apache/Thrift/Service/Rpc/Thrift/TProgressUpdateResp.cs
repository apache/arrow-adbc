/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.21.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


// targeting netstandard 2.x
#if(! NETSTANDARD2_0_OR_GREATER && ! NET6_0_OR_GREATER && ! NET472_OR_GREATER)
#error Unexpected target platform. See 'thrift --help' for details.
#endif

#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable CS0618   // silence our own deprecation warnings
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Apache.Hive.Service.Rpc.Thrift
{

  public partial class TProgressUpdateResp : TBase
  {

    public List<string> HeaderNames { get; set; }

    public List<List<string>> Rows { get; set; }

    public double ProgressedPercentage { get; set; }

    /// <summary>
    ///
    /// <seealso cref="global::Apache.Hive.Service.Rpc.Thrift.TJobExecutionStatus"/>
    /// </summary>
    public global::Apache.Hive.Service.Rpc.Thrift.TJobExecutionStatus Status { get; set; }

    public string FooterSummary { get; set; }

    public long StartTime { get; set; }

    public TProgressUpdateResp()
    {
    }

    public TProgressUpdateResp(List<string> headerNames, List<List<string>> @rows, double progressedPercentage, global::Apache.Hive.Service.Rpc.Thrift.TJobExecutionStatus @status, string footerSummary, long startTime) : this()
    {
      this.HeaderNames = headerNames;
      this.Rows = @rows;
      this.ProgressedPercentage = progressedPercentage;
      this.Status = @status;
      this.FooterSummary = footerSummary;
      this.StartTime = startTime;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_headerNames = false;
        bool isset_rows = false;
        bool isset_progressedPercentage = false;
        bool isset_status = false;
        bool isset_footerSummary = false;
        bool isset_startTime = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List)
              {
                {
                  var _list591 = await iprot.ReadListBeginAsync(cancellationToken);
                  HeaderNames = new List<string>(_list591.Count);
                  for(int _i592 = 0; _i592 < _list591.Count; ++_i592)
                  {
                    string _elem593;
                    _elem593 = await iprot.ReadStringAsync(cancellationToken);
                    HeaderNames.Add(_elem593);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
                isset_headerNames = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.List)
              {
                {
                  var _list594 = await iprot.ReadListBeginAsync(cancellationToken);
                  Rows = new List<List<string>>(_list594.Count);
                  for(int _i595 = 0; _i595 < _list594.Count; ++_i595)
                  {
                    List<string> _elem596;
                    {
                      var _list597 = await iprot.ReadListBeginAsync(cancellationToken);
                      _elem596 = new List<string>(_list597.Count);
                      for(int _i598 = 0; _i598 < _list597.Count; ++_i598)
                      {
                        string _elem599;
                        _elem599 = await iprot.ReadStringAsync(cancellationToken);
                        _elem596.Add(_elem599);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                    Rows.Add(_elem596);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
                isset_rows = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Double)
              {
                ProgressedPercentage = await iprot.ReadDoubleAsync(cancellationToken);
                isset_progressedPercentage = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I32)
              {
                Status = (global::Apache.Hive.Service.Rpc.Thrift.TJobExecutionStatus)await iprot.ReadI32Async(cancellationToken);
                isset_status = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.String)
              {
                FooterSummary = await iprot.ReadStringAsync(cancellationToken);
                isset_footerSummary = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.I64)
              {
                StartTime = await iprot.ReadI64Async(cancellationToken);
                isset_startTime = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default:
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_headerNames)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_rows)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_progressedPercentage)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_status)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_footerSummary)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_startTime)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp600 = new TStruct("TProgressUpdateResp");
        await oprot.WriteStructBeginAsync(tmp600, cancellationToken);
        var tmp601 = new TField();
        if((HeaderNames != null))
        {
          tmp601.Name = "headerNames";
          tmp601.Type = TType.List;
          tmp601.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp601, cancellationToken);
          await oprot.WriteListBeginAsync(new TList(TType.String, HeaderNames.Count), cancellationToken);
          foreach (string _iter602 in HeaderNames)
          {
            await oprot.WriteStringAsync(_iter602, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Rows != null))
        {
          tmp601.Name = "rows";
          tmp601.Type = TType.List;
          tmp601.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp601, cancellationToken);
          await oprot.WriteListBeginAsync(new TList(TType.List, Rows.Count), cancellationToken);
          foreach (List<string> _iter603 in Rows)
          {
            await oprot.WriteListBeginAsync(new TList(TType.String, _iter603.Count), cancellationToken);
            foreach (string _iter604 in _iter603)
            {
              await oprot.WriteStringAsync(_iter604, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        tmp601.Name = "progressedPercentage";
        tmp601.Type = TType.Double;
        tmp601.ID = 3;
        await oprot.WriteFieldBeginAsync(tmp601, cancellationToken);
        await oprot.WriteDoubleAsync(ProgressedPercentage, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        tmp601.Name = "status";
        tmp601.Type = TType.I32;
        tmp601.ID = 4;
        await oprot.WriteFieldBeginAsync(tmp601, cancellationToken);
        await oprot.WriteI32Async((int)Status, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if((FooterSummary != null))
        {
          tmp601.Name = "footerSummary";
          tmp601.Type = TType.String;
          tmp601.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp601, cancellationToken);
          await oprot.WriteStringAsync(FooterSummary, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        tmp601.Name = "startTime";
        tmp601.Type = TType.I64;
        tmp601.ID = 6;
        await oprot.WriteFieldBeginAsync(tmp601, cancellationToken);
        await oprot.WriteI64Async(StartTime, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is TProgressUpdateResp other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return TCollections.Equals(HeaderNames, other.HeaderNames)
        && TCollections.Equals(Rows, other.Rows)
        && global::System.Object.Equals(ProgressedPercentage, other.ProgressedPercentage)
        && global::System.Object.Equals(Status, other.Status)
        && global::System.Object.Equals(FooterSummary, other.FooterSummary)
        && global::System.Object.Equals(StartTime, other.StartTime);
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((HeaderNames != null))
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(HeaderNames);
        }
        if((Rows != null))
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Rows);
        }
        hashcode = (hashcode * 397) + ProgressedPercentage.GetHashCode();
        hashcode = (hashcode * 397) + Status.GetHashCode();
        if((FooterSummary != null))
        {
          hashcode = (hashcode * 397) + FooterSummary.GetHashCode();
        }
        hashcode = (hashcode * 397) + StartTime.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp605 = new StringBuilder("TProgressUpdateResp(");
      if((HeaderNames != null))
      {
        tmp605.Append(", HeaderNames: ");
        HeaderNames.ToString(tmp605);
      }
      if((Rows != null))
      {
        tmp605.Append(", Rows: ");
        Rows.ToString(tmp605);
      }
      tmp605.Append(", ProgressedPercentage: ");
      ProgressedPercentage.ToString(tmp605);
      tmp605.Append(", Status: ");
      Status.ToString(tmp605);
      if((FooterSummary != null))
      {
        tmp605.Append(", FooterSummary: ");
        FooterSummary.ToString(tmp605);
      }
      tmp605.Append(", StartTime: ");
      StartTime.ToString(tmp605);
      tmp605.Append(')');
      return tmp605.ToString();
    }
  }

}

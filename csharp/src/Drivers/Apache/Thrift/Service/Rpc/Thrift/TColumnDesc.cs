/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Apache.Hive.Service.Rpc.Thrift
{

  public partial class TColumnDesc : TBase
  {
    private string _comment;

    public string ColumnName { get; set; }

    public global::Apache.Hive.Service.Rpc.Thrift.TTypeDesc TypeDesc { get; set; }

    public int Position { get; set; }

    public string Comment
    {
      get
      {
        return _comment;
      }
      set
      {
        __isset.comment = true;
        this._comment = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool comment;
    }

    public TColumnDesc()
    {
    }

    public TColumnDesc(string columnName, global::Apache.Hive.Service.Rpc.Thrift.TTypeDesc typeDesc, int position) : this()
    {
      this.ColumnName = columnName;
      this.TypeDesc = typeDesc;
      this.Position = position;
    }

    public TColumnDesc DeepCopy()
    {
      var tmp69 = new TColumnDesc();
      if ((ColumnName != null))
      {
        tmp69.ColumnName = this.ColumnName;
      }
      if ((TypeDesc != null))
      {
        tmp69.TypeDesc = (global::Apache.Hive.Service.Rpc.Thrift.TTypeDesc)this.TypeDesc.DeepCopy();
      }
      tmp69.Position = this.Position;
      if ((Comment != null) && __isset.comment)
      {
        tmp69.Comment = this.Comment;
      }
      tmp69.__isset.comment = this.__isset.comment;
      return tmp69;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_columnName = false;
        bool isset_typeDesc = false;
        bool isset_position = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                ColumnName = await iprot.ReadStringAsync(cancellationToken);
                isset_columnName = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                TypeDesc = new global::Apache.Hive.Service.Rpc.Thrift.TTypeDesc();
                await TypeDesc.ReadAsync(iprot, cancellationToken);
                isset_typeDesc = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I32)
              {
                Position = await iprot.ReadI32Async(cancellationToken);
                isset_position = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.String)
              {
                Comment = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default:
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_columnName)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_typeDesc)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_position)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp70 = new TStruct("TColumnDesc");
        await oprot.WriteStructBeginAsync(tmp70, cancellationToken);
        var tmp71 = new TField();
        if ((ColumnName != null))
        {
          tmp71.Name = "columnName";
          tmp71.Type = TType.String;
          tmp71.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp71, cancellationToken);
          await oprot.WriteStringAsync(ColumnName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if ((TypeDesc != null))
        {
          tmp71.Name = "typeDesc";
          tmp71.Type = TType.Struct;
          tmp71.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp71, cancellationToken);
          await TypeDesc.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        tmp71.Name = "position";
        tmp71.Type = TType.I32;
        tmp71.ID = 3;
        await oprot.WriteFieldBeginAsync(tmp71, cancellationToken);
        await oprot.WriteI32Async(Position, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if ((Comment != null) && __isset.comment)
        {
          tmp71.Name = "comment";
          tmp71.Type = TType.String;
          tmp71.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp71, cancellationToken);
          await oprot.WriteStringAsync(Comment, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is TColumnDesc other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return global::System.Object.Equals(ColumnName, other.ColumnName)
        && global::System.Object.Equals(TypeDesc, other.TypeDesc)
        && global::System.Object.Equals(Position, other.Position)
        && ((__isset.comment == other.__isset.comment) && ((!__isset.comment) || (global::System.Object.Equals(Comment, other.Comment))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if ((ColumnName != null))
        {
          hashcode = (hashcode * 397) + ColumnName.GetHashCode();
        }
        if ((TypeDesc != null))
        {
          hashcode = (hashcode * 397) + TypeDesc.GetHashCode();
        }
        hashcode = (hashcode * 397) + Position.GetHashCode();
        if ((Comment != null) && __isset.comment)
        {
          hashcode = (hashcode * 397) + Comment.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp72 = new StringBuilder("TColumnDesc(");
      if ((ColumnName != null))
      {
        tmp72.Append(", ColumnName: ");
        ColumnName.ToString(tmp72);
      }
      if ((TypeDesc != null))
      {
        tmp72.Append(", TypeDesc: ");
        TypeDesc.ToString(tmp72);
      }
      tmp72.Append(", Position: ");
      Position.ToString(tmp72);
      if ((Comment != null) && __isset.comment)
      {
        tmp72.Append(", Comment: ");
        Comment.ToString(tmp72);
      }
      tmp72.Append(')');
      return tmp72.ToString();
    }
  }

}

/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Apache.Hive.Service.Rpc.Thrift
{

  public partial class TOpenSessionResp : TBase
  {
    private global::Apache.Hive.Service.Rpc.Thrift.TSessionHandle _sessionHandle;
    private Dictionary<string, string> _configuration;
    private global::Apache.Hive.Service.Rpc.Thrift.TNamespace _initialNamespace;
    private bool _canUseMultipleCatalogs;
    private List<int> _getInfos;

    public global::Apache.Hive.Service.Rpc.Thrift.TStatus Status { get; set; }

    /// <summary>
    ///
    /// <seealso cref="global::Apache.Hive.Service.Rpc.Thrift.TProtocolVersion"/>
    /// </summary>
    public global::Apache.Hive.Service.Rpc.Thrift.TProtocolVersion ServerProtocolVersion { get; set; }

    public global::Apache.Hive.Service.Rpc.Thrift.TSessionHandle SessionHandle
    {
      get
      {
        return _sessionHandle;
      }
      set
      {
        __isset.sessionHandle = true;
        this._sessionHandle = value;
      }
    }

    public Dictionary<string, string> Configuration
    {
      get
      {
        return _configuration;
      }
      set
      {
        __isset.configuration = true;
        this._configuration = value;
      }
    }

    public global::Apache.Hive.Service.Rpc.Thrift.TNamespace InitialNamespace
    {
      get
      {
        return _initialNamespace;
      }
      set
      {
        __isset.initialNamespace = true;
        this._initialNamespace = value;
      }
    }

    public bool CanUseMultipleCatalogs
    {
      get
      {
        return _canUseMultipleCatalogs;
      }
      set
      {
        __isset.canUseMultipleCatalogs = true;
        this._canUseMultipleCatalogs = value;
      }
    }

    public List<int> GetInfos
    {
      get
      {
        return _getInfos;
      }
      set
      {
        __isset.getInfos = true;
        this._getInfos = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool sessionHandle;
      public bool configuration;
      public bool initialNamespace;
      public bool canUseMultipleCatalogs;
      public bool getInfos;
    }

    public TOpenSessionResp()
    {
      this.ServerProtocolVersion = global::Apache.Hive.Service.Rpc.Thrift.TProtocolVersion.HIVE_CLI_SERVICE_PROTOCOL_V10;
    }

    public TOpenSessionResp(global::Apache.Hive.Service.Rpc.Thrift.TStatus status, global::Apache.Hive.Service.Rpc.Thrift.TProtocolVersion serverProtocolVersion) : this()
    {
      this.Status = status;
      this.ServerProtocolVersion = serverProtocolVersion;
    }

    public TOpenSessionResp DeepCopy()
    {
      var tmp303 = new TOpenSessionResp();
      if ((Status != null))
      {
        tmp303.Status = (global::Apache.Hive.Service.Rpc.Thrift.TStatus)this.Status.DeepCopy();
      }
      tmp303.ServerProtocolVersion = this.ServerProtocolVersion;
      if ((SessionHandle != null) && __isset.sessionHandle)
      {
        tmp303.SessionHandle = (global::Apache.Hive.Service.Rpc.Thrift.TSessionHandle)this.SessionHandle.DeepCopy();
      }
      tmp303.__isset.sessionHandle = this.__isset.sessionHandle;
      if ((Configuration != null) && __isset.configuration)
      {
        tmp303.Configuration = this.Configuration.DeepCopy();
      }
      tmp303.__isset.configuration = this.__isset.configuration;
      if ((InitialNamespace != null) && __isset.initialNamespace)
      {
        tmp303.InitialNamespace = (global::Apache.Hive.Service.Rpc.Thrift.TNamespace)this.InitialNamespace.DeepCopy();
      }
      tmp303.__isset.initialNamespace = this.__isset.initialNamespace;
      if (__isset.canUseMultipleCatalogs)
      {
        tmp303.CanUseMultipleCatalogs = this.CanUseMultipleCatalogs;
      }
      tmp303.__isset.canUseMultipleCatalogs = this.__isset.canUseMultipleCatalogs;
      if ((GetInfos != null) && __isset.getInfos)
      {
        tmp303.GetInfos = this.GetInfos.DeepCopy();
      }
      tmp303.__isset.getInfos = this.__isset.getInfos;
      return tmp303;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_status = false;
        bool isset_serverProtocolVersion = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                Status = new global::Apache.Hive.Service.Rpc.Thrift.TStatus();
                await Status.ReadAsync(iprot, cancellationToken);
                isset_status = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                ServerProtocolVersion = (global::Apache.Hive.Service.Rpc.Thrift.TProtocolVersion)await iprot.ReadI32Async(cancellationToken);
                isset_serverProtocolVersion = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Struct)
              {
                SessionHandle = new global::Apache.Hive.Service.Rpc.Thrift.TSessionHandle();
                await SessionHandle.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Map)
              {
                {
                  var _map304 = await iprot.ReadMapBeginAsync(cancellationToken);
                  Configuration = new Dictionary<string, string>(_map304.Count);
                  for(int _i305 = 0; _i305 < _map304.Count; ++_i305)
                  {
                    string _key306;
                    string _val307;
                    _key306 = await iprot.ReadStringAsync(cancellationToken);
                    _val307 = await iprot.ReadStringAsync(cancellationToken);
                    Configuration[_key306] = _val307;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1284:
              if (field.Type == TType.Struct)
              {
                InitialNamespace = new global::Apache.Hive.Service.Rpc.Thrift.TNamespace();
                await InitialNamespace.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1285:
              if (field.Type == TType.Bool)
              {
                CanUseMultipleCatalogs = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1281:
              if (field.Type == TType.List)
              {
                {
                  var _list308 = await iprot.ReadListBeginAsync(cancellationToken);
                  GetInfos = new List<int>(_list308.Count);
                  for(int _i309 = 0; _i309 < _list308.Count; ++_i309)
                  {
                    int _elem310;
                    _elem310 = await iprot.ReadI32Async(cancellationToken);
                    GetInfos.Add(_elem310);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default:
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_status)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_serverProtocolVersion)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp311 = new TStruct("TOpenSessionResp");
        await oprot.WriteStructBeginAsync(tmp311, cancellationToken);
        var tmp312 = new TField();
        if ((Status != null))
        {
          tmp312.Name = "status";
          tmp312.Type = TType.Struct;
          tmp312.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp312, cancellationToken);
          await Status.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        tmp312.Name = "serverProtocolVersion";
        tmp312.Type = TType.I32;
        tmp312.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp312, cancellationToken);
        await oprot.WriteI32Async((int)ServerProtocolVersion, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if ((SessionHandle != null) && __isset.sessionHandle)
        {
          tmp312.Name = "sessionHandle";
          tmp312.Type = TType.Struct;
          tmp312.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp312, cancellationToken);
          await SessionHandle.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if ((Configuration != null) && __isset.configuration)
        {
          tmp312.Name = "configuration";
          tmp312.Type = TType.Map;
          tmp312.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp312, cancellationToken);
          await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, Configuration.Count), cancellationToken);
          foreach (string _iter313 in Configuration.Keys)
          {
            await oprot.WriteStringAsync(_iter313, cancellationToken);
            await oprot.WriteStringAsync(Configuration[_iter313], cancellationToken);
          }
          await oprot.WriteMapEndAsync(cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if ((GetInfos != null) && __isset.getInfos)
        {
          tmp312.Name = "getInfos";
          tmp312.Type = TType.List;
          tmp312.ID = 1281;
          await oprot.WriteFieldBeginAsync(tmp312, cancellationToken);
          await oprot.WriteListBeginAsync(new TList(TType.I32, GetInfos.Count), cancellationToken);
          foreach (int _iter314 in GetInfos)
          {
            await oprot.WriteI32Async(_iter314, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if ((InitialNamespace != null) && __isset.initialNamespace)
        {
          tmp312.Name = "initialNamespace";
          tmp312.Type = TType.Struct;
          tmp312.ID = 1284;
          await oprot.WriteFieldBeginAsync(tmp312, cancellationToken);
          await InitialNamespace.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.canUseMultipleCatalogs)
        {
          tmp312.Name = "canUseMultipleCatalogs";
          tmp312.Type = TType.Bool;
          tmp312.ID = 1285;
          await oprot.WriteFieldBeginAsync(tmp312, cancellationToken);
          await oprot.WriteBoolAsync(CanUseMultipleCatalogs, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is TOpenSessionResp other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return global::System.Object.Equals(Status, other.Status)
        && global::System.Object.Equals(ServerProtocolVersion, other.ServerProtocolVersion)
        && ((__isset.sessionHandle == other.__isset.sessionHandle) && ((!__isset.sessionHandle) || (global::System.Object.Equals(SessionHandle, other.SessionHandle))))
        && ((__isset.configuration == other.__isset.configuration) && ((!__isset.configuration) || (TCollections.Equals(Configuration, other.Configuration))))
        && ((__isset.initialNamespace == other.__isset.initialNamespace) && ((!__isset.initialNamespace) || (global::System.Object.Equals(InitialNamespace, other.InitialNamespace))))
        && ((__isset.canUseMultipleCatalogs == other.__isset.canUseMultipleCatalogs) && ((!__isset.canUseMultipleCatalogs) || (global::System.Object.Equals(CanUseMultipleCatalogs, other.CanUseMultipleCatalogs))))
        && ((__isset.getInfos == other.__isset.getInfos) && ((!__isset.getInfos) || (TCollections.Equals(GetInfos, other.GetInfos))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if ((Status != null))
        {
          hashcode = (hashcode * 397) + Status.GetHashCode();
        }
        hashcode = (hashcode * 397) + ServerProtocolVersion.GetHashCode();
        if ((SessionHandle != null) && __isset.sessionHandle)
        {
          hashcode = (hashcode * 397) + SessionHandle.GetHashCode();
        }
        if ((Configuration != null) && __isset.configuration)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Configuration);
        }
        if ((InitialNamespace != null) && __isset.initialNamespace)
        {
          hashcode = (hashcode * 397) + InitialNamespace.GetHashCode();
        }
        if (__isset.canUseMultipleCatalogs)
        {
          hashcode = (hashcode * 397) + CanUseMultipleCatalogs.GetHashCode();
        }
        if ((GetInfos != null) && __isset.getInfos)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(GetInfos);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp315 = new StringBuilder("TOpenSessionResp(");
      if ((Status != null))
      {
        tmp315.Append(", Status: ");
        Status.ToString(tmp315);
      }
      tmp315.Append(", ServerProtocolVersion: ");
      ServerProtocolVersion.ToString(tmp315);
      if ((SessionHandle != null) && __isset.sessionHandle)
      {
        tmp315.Append(", SessionHandle: ");
        SessionHandle.ToString(tmp315);
      }
      if ((Configuration != null) && __isset.configuration)
      {
        tmp315.Append(", Configuration: ");
        Configuration.ToString(tmp315);
      }
      if ((InitialNamespace != null) && __isset.initialNamespace)
      {
        tmp315.Append(", InitialNamespace: ");
        InitialNamespace.ToString(tmp315);
      }
      if (__isset.canUseMultipleCatalogs)
      {
        tmp315.Append(", CanUseMultipleCatalogs: ");
        CanUseMultipleCatalogs.ToString(tmp315);
      }
      if ((GetInfos != null) && __isset.getInfos)
      {
        tmp315.Append(", GetInfos: ");
        GetInfos.ToString(tmp315);
      }
      tmp315.Append(')');
      return tmp315.ToString();
    }
  }

}

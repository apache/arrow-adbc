/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.21.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


// targeting netstandard 2.x
#if(! NETSTANDARD2_0_OR_GREATER && ! NET6_0_OR_GREATER && ! NET472_OR_GREATER)
#error Unexpected target platform. See 'thrift --help' for details.
#endif

#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable CS0618   // silence our own deprecation warnings
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Apache.Hive.Service.Rpc.Thrift
{

  internal partial class TGetCrossReferenceReq : TBase, IRequest
  {
    private string _parentCatalogName;
    private string _parentSchemaName;
    private string _parentTableName;
    private string _foreignCatalogName;
    private string _foreignSchemaName;
    private string _foreignTableName;
    private global::Apache.Hive.Service.Rpc.Thrift.TSparkGetDirectResults _getDirectResults;
    private bool _runAsync;

    public global::Apache.Hive.Service.Rpc.Thrift.TSessionHandle SessionHandle { get; set; }

    public string ParentCatalogName
    {
      get
      {
        return _parentCatalogName;
      }
      set
      {
        __isset.parentCatalogName = true;
        this._parentCatalogName = value;
      }
    }

    public string ParentSchemaName
    {
      get
      {
        return _parentSchemaName;
      }
      set
      {
        __isset.parentSchemaName = true;
        this._parentSchemaName = value;
      }
    }

    public string ParentTableName
    {
      get
      {
        return _parentTableName;
      }
      set
      {
        __isset.parentTableName = true;
        this._parentTableName = value;
      }
    }

    public string ForeignCatalogName
    {
      get
      {
        return _foreignCatalogName;
      }
      set
      {
        __isset.foreignCatalogName = true;
        this._foreignCatalogName = value;
      }
    }

    public string ForeignSchemaName
    {
      get
      {
        return _foreignSchemaName;
      }
      set
      {
        __isset.foreignSchemaName = true;
        this._foreignSchemaName = value;
      }
    }

    public string ForeignTableName
    {
      get
      {
        return _foreignTableName;
      }
      set
      {
        __isset.foreignTableName = true;
        this._foreignTableName = value;
      }
    }

    public global::Apache.Hive.Service.Rpc.Thrift.TSparkGetDirectResults GetDirectResults
    {
      get
      {
        return _getDirectResults;
      }
      set
      {
        __isset.getDirectResults = true;
        this._getDirectResults = value;
      }
    }

    public bool RunAsync
    {
      get
      {
        return _runAsync;
      }
      set
      {
        __isset.runAsync = true;
        this._runAsync = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool parentCatalogName;
      public bool parentSchemaName;
      public bool parentTableName;
      public bool foreignCatalogName;
      public bool foreignSchemaName;
      public bool foreignTableName;
      public bool getDirectResults;
      public bool runAsync;
    }

    public TGetCrossReferenceReq()
    {
      this._runAsync = false;
      this.__isset.runAsync = true;
    }

    public TGetCrossReferenceReq(global::Apache.Hive.Service.Rpc.Thrift.TSessionHandle sessionHandle) : this()
    {
      this.SessionHandle = sessionHandle;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_sessionHandle = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                SessionHandle = new global::Apache.Hive.Service.Rpc.Thrift.TSessionHandle();
                await SessionHandle.ReadAsync(iprot, cancellationToken);
                isset_sessionHandle = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                ParentCatalogName = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                ParentSchemaName = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.String)
              {
                ParentTableName = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.String)
              {
                ForeignCatalogName = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.String)
              {
                ForeignSchemaName = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.String)
              {
                ForeignTableName = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1281:
              if (field.Type == TType.Struct)
              {
                GetDirectResults = new global::Apache.Hive.Service.Rpc.Thrift.TSparkGetDirectResults();
                await GetDirectResults.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1282:
              if (field.Type == TType.Bool)
              {
                RunAsync = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default:
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_sessionHandle)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp510 = new TStruct("TGetCrossReferenceReq");
        await oprot.WriteStructBeginAsync(tmp510, cancellationToken);
        var tmp511 = new TField();
        if((SessionHandle != null))
        {
          tmp511.Name = "sessionHandle";
          tmp511.Type = TType.Struct;
          tmp511.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp511, cancellationToken);
          await SessionHandle.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((ParentCatalogName != null) && __isset.parentCatalogName)
        {
          tmp511.Name = "parentCatalogName";
          tmp511.Type = TType.String;
          tmp511.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp511, cancellationToken);
          await oprot.WriteStringAsync(ParentCatalogName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((ParentSchemaName != null) && __isset.parentSchemaName)
        {
          tmp511.Name = "parentSchemaName";
          tmp511.Type = TType.String;
          tmp511.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp511, cancellationToken);
          await oprot.WriteStringAsync(ParentSchemaName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((ParentTableName != null) && __isset.parentTableName)
        {
          tmp511.Name = "parentTableName";
          tmp511.Type = TType.String;
          tmp511.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp511, cancellationToken);
          await oprot.WriteStringAsync(ParentTableName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((ForeignCatalogName != null) && __isset.foreignCatalogName)
        {
          tmp511.Name = "foreignCatalogName";
          tmp511.Type = TType.String;
          tmp511.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp511, cancellationToken);
          await oprot.WriteStringAsync(ForeignCatalogName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((ForeignSchemaName != null) && __isset.foreignSchemaName)
        {
          tmp511.Name = "foreignSchemaName";
          tmp511.Type = TType.String;
          tmp511.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp511, cancellationToken);
          await oprot.WriteStringAsync(ForeignSchemaName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((ForeignTableName != null) && __isset.foreignTableName)
        {
          tmp511.Name = "foreignTableName";
          tmp511.Type = TType.String;
          tmp511.ID = 7;
          await oprot.WriteFieldBeginAsync(tmp511, cancellationToken);
          await oprot.WriteStringAsync(ForeignTableName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((GetDirectResults != null) && __isset.getDirectResults)
        {
          tmp511.Name = "getDirectResults";
          tmp511.Type = TType.Struct;
          tmp511.ID = 1281;
          await oprot.WriteFieldBeginAsync(tmp511, cancellationToken);
          await GetDirectResults.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.runAsync)
        {
          tmp511.Name = "runAsync";
          tmp511.Type = TType.Bool;
          tmp511.ID = 1282;
          await oprot.WriteFieldBeginAsync(tmp511, cancellationToken);
          await oprot.WriteBoolAsync(RunAsync, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is TGetCrossReferenceReq other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return global::System.Object.Equals(SessionHandle, other.SessionHandle)
        && ((__isset.parentCatalogName == other.__isset.parentCatalogName) && ((!__isset.parentCatalogName) || (global::System.Object.Equals(ParentCatalogName, other.ParentCatalogName))))
        && ((__isset.parentSchemaName == other.__isset.parentSchemaName) && ((!__isset.parentSchemaName) || (global::System.Object.Equals(ParentSchemaName, other.ParentSchemaName))))
        && ((__isset.parentTableName == other.__isset.parentTableName) && ((!__isset.parentTableName) || (global::System.Object.Equals(ParentTableName, other.ParentTableName))))
        && ((__isset.foreignCatalogName == other.__isset.foreignCatalogName) && ((!__isset.foreignCatalogName) || (global::System.Object.Equals(ForeignCatalogName, other.ForeignCatalogName))))
        && ((__isset.foreignSchemaName == other.__isset.foreignSchemaName) && ((!__isset.foreignSchemaName) || (global::System.Object.Equals(ForeignSchemaName, other.ForeignSchemaName))))
        && ((__isset.foreignTableName == other.__isset.foreignTableName) && ((!__isset.foreignTableName) || (global::System.Object.Equals(ForeignTableName, other.ForeignTableName))))
        && ((__isset.getDirectResults == other.__isset.getDirectResults) && ((!__isset.getDirectResults) || (global::System.Object.Equals(GetDirectResults, other.GetDirectResults))))
        && ((__isset.runAsync == other.__isset.runAsync) && ((!__isset.runAsync) || (global::System.Object.Equals(RunAsync, other.RunAsync))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((SessionHandle != null))
        {
          hashcode = (hashcode * 397) + SessionHandle.GetHashCode();
        }
        if((ParentCatalogName != null) && __isset.parentCatalogName)
        {
          hashcode = (hashcode * 397) + ParentCatalogName.GetHashCode();
        }
        if((ParentSchemaName != null) && __isset.parentSchemaName)
        {
          hashcode = (hashcode * 397) + ParentSchemaName.GetHashCode();
        }
        if((ParentTableName != null) && __isset.parentTableName)
        {
          hashcode = (hashcode * 397) + ParentTableName.GetHashCode();
        }
        if((ForeignCatalogName != null) && __isset.foreignCatalogName)
        {
          hashcode = (hashcode * 397) + ForeignCatalogName.GetHashCode();
        }
        if((ForeignSchemaName != null) && __isset.foreignSchemaName)
        {
          hashcode = (hashcode * 397) + ForeignSchemaName.GetHashCode();
        }
        if((ForeignTableName != null) && __isset.foreignTableName)
        {
          hashcode = (hashcode * 397) + ForeignTableName.GetHashCode();
        }
        if((GetDirectResults != null) && __isset.getDirectResults)
        {
          hashcode = (hashcode * 397) + GetDirectResults.GetHashCode();
        }
        if(__isset.runAsync)
        {
          hashcode = (hashcode * 397) + RunAsync.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp512 = new StringBuilder("TGetCrossReferenceReq(");
      if((SessionHandle != null))
      {
        tmp512.Append(", SessionHandle: ");
        SessionHandle.ToString(tmp512);
      }
      if((ParentCatalogName != null) && __isset.parentCatalogName)
      {
        tmp512.Append(", ParentCatalogName: ");
        ParentCatalogName.ToString(tmp512);
      }
      if((ParentSchemaName != null) && __isset.parentSchemaName)
      {
        tmp512.Append(", ParentSchemaName: ");
        ParentSchemaName.ToString(tmp512);
      }
      if((ParentTableName != null) && __isset.parentTableName)
      {
        tmp512.Append(", ParentTableName: ");
        ParentTableName.ToString(tmp512);
      }
      if((ForeignCatalogName != null) && __isset.foreignCatalogName)
      {
        tmp512.Append(", ForeignCatalogName: ");
        ForeignCatalogName.ToString(tmp512);
      }
      if((ForeignSchemaName != null) && __isset.foreignSchemaName)
      {
        tmp512.Append(", ForeignSchemaName: ");
        ForeignSchemaName.ToString(tmp512);
      }
      if((ForeignTableName != null) && __isset.foreignTableName)
      {
        tmp512.Append(", ForeignTableName: ");
        ForeignTableName.ToString(tmp512);
      }
      if((GetDirectResults != null) && __isset.getDirectResults)
      {
        tmp512.Append(", GetDirectResults: ");
        GetDirectResults.ToString(tmp512);
      }
      if(__isset.runAsync)
      {
        tmp512.Append(", RunAsync: ");
        RunAsync.ToString(tmp512);
      }
      tmp512.Append(')');
      return tmp512.ToString();
    }
  }

}

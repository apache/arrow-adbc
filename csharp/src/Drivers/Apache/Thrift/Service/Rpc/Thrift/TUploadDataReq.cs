/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Apache.Hive.Service.Rpc.Thrift
{

  public partial class TUploadDataReq : TBase
  {
    private string _tableName;
    private string _path;

    public global::Apache.Hive.Service.Rpc.Thrift.TSessionHandle SessionHandle { get; set; }

    public string TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }

    public string Path
    {
      get
      {
        return _path;
      }
      set
      {
        __isset.path = true;
        this._path = value;
      }
    }

    public byte[] Values { get; set; }


    public Isset __isset;
    public struct Isset
    {
      public bool tableName;
      public bool path;
    }

    public TUploadDataReq()
    {
    }

    public TUploadDataReq(global::Apache.Hive.Service.Rpc.Thrift.TSessionHandle sessionHandle, byte[] values) : this()
    {
      this.SessionHandle = sessionHandle;
      this.Values = values;
    }

    public TUploadDataReq DeepCopy()
    {
      var tmp430 = new TUploadDataReq();
      if ((SessionHandle != null))
      {
        tmp430.SessionHandle = (global::Apache.Hive.Service.Rpc.Thrift.TSessionHandle)this.SessionHandle.DeepCopy();
      }
      if ((TableName != null) && __isset.tableName)
      {
        tmp430.TableName = this.TableName;
      }
      tmp430.__isset.tableName = this.__isset.tableName;
      if ((Path != null) && __isset.path)
      {
        tmp430.Path = this.Path;
      }
      tmp430.__isset.path = this.__isset.path;
      if ((Values != null))
      {
        tmp430.Values = this.Values.ToArray();
      }
      return tmp430;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_sessionHandle = false;
        bool isset_values = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                SessionHandle = new global::Apache.Hive.Service.Rpc.Thrift.TSessionHandle();
                await SessionHandle.ReadAsync(iprot, cancellationToken);
                isset_sessionHandle = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                TableName = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                Path = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.String)
              {
                Values = await iprot.ReadBinaryAsync(cancellationToken);
                isset_values = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default:
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_sessionHandle)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_values)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp431 = new TStruct("TUploadDataReq");
        await oprot.WriteStructBeginAsync(tmp431, cancellationToken);
        var tmp432 = new TField();
        if ((SessionHandle != null))
        {
          tmp432.Name = "sessionHandle";
          tmp432.Type = TType.Struct;
          tmp432.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp432, cancellationToken);
          await SessionHandle.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if ((TableName != null) && __isset.tableName)
        {
          tmp432.Name = "tableName";
          tmp432.Type = TType.String;
          tmp432.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp432, cancellationToken);
          await oprot.WriteStringAsync(TableName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if ((Path != null) && __isset.path)
        {
          tmp432.Name = "path";
          tmp432.Type = TType.String;
          tmp432.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp432, cancellationToken);
          await oprot.WriteStringAsync(Path, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if ((Values != null))
        {
          tmp432.Name = "values";
          tmp432.Type = TType.String;
          tmp432.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp432, cancellationToken);
          await oprot.WriteBinaryAsync(Values, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is TUploadDataReq other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return global::System.Object.Equals(SessionHandle, other.SessionHandle)
        && ((__isset.tableName == other.__isset.tableName) && ((!__isset.tableName) || (global::System.Object.Equals(TableName, other.TableName))))
        && ((__isset.path == other.__isset.path) && ((!__isset.path) || (global::System.Object.Equals(Path, other.Path))))
        && TCollections.Equals(Values, other.Values);
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if ((SessionHandle != null))
        {
          hashcode = (hashcode * 397) + SessionHandle.GetHashCode();
        }
        if ((TableName != null) && __isset.tableName)
        {
          hashcode = (hashcode * 397) + TableName.GetHashCode();
        }
        if ((Path != null) && __isset.path)
        {
          hashcode = (hashcode * 397) + Path.GetHashCode();
        }
        if ((Values != null))
        {
          hashcode = (hashcode * 397) + Values.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp433 = new StringBuilder("TUploadDataReq(");
      if ((SessionHandle != null))
      {
        tmp433.Append(", SessionHandle: ");
        SessionHandle.ToString(tmp433);
      }
      if ((TableName != null) && __isset.tableName)
      {
        tmp433.Append(", TableName: ");
        TableName.ToString(tmp433);
      }
      if ((Path != null) && __isset.path)
      {
        tmp433.Append(", Path: ");
        Path.ToString(tmp433);
      }
      if ((Values != null))
      {
        tmp433.Append(", Values: ");
        Values.ToString(tmp433);
      }
      tmp433.Append(')');
      return tmp433.ToString();
    }
  }

}

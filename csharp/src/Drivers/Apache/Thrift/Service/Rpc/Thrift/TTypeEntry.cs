/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Apache.Hive.Service.Rpc.Thrift
{

  public partial class TTypeEntry : TBase
  {
    private global::Apache.Hive.Service.Rpc.Thrift.TPrimitiveTypeEntry _primitiveEntry;
    private global::Apache.Hive.Service.Rpc.Thrift.TArrayTypeEntry _arrayEntry;
    private global::Apache.Hive.Service.Rpc.Thrift.TMapTypeEntry _mapEntry;
    private global::Apache.Hive.Service.Rpc.Thrift.TStructTypeEntry _structEntry;
    private global::Apache.Hive.Service.Rpc.Thrift.TUnionTypeEntry _unionEntry;
    private global::Apache.Hive.Service.Rpc.Thrift.TUserDefinedTypeEntry _userDefinedTypeEntry;

    public global::Apache.Hive.Service.Rpc.Thrift.TPrimitiveTypeEntry PrimitiveEntry
    {
      get
      {
        return _primitiveEntry;
      }
      set
      {
        __isset.primitiveEntry = true;
        this._primitiveEntry = value;
      }
    }

    public global::Apache.Hive.Service.Rpc.Thrift.TArrayTypeEntry ArrayEntry
    {
      get
      {
        return _arrayEntry;
      }
      set
      {
        __isset.arrayEntry = true;
        this._arrayEntry = value;
      }
    }

    public global::Apache.Hive.Service.Rpc.Thrift.TMapTypeEntry MapEntry
    {
      get
      {
        return _mapEntry;
      }
      set
      {
        __isset.mapEntry = true;
        this._mapEntry = value;
      }
    }

    public global::Apache.Hive.Service.Rpc.Thrift.TStructTypeEntry StructEntry
    {
      get
      {
        return _structEntry;
      }
      set
      {
        __isset.structEntry = true;
        this._structEntry = value;
      }
    }

    public global::Apache.Hive.Service.Rpc.Thrift.TUnionTypeEntry UnionEntry
    {
      get
      {
        return _unionEntry;
      }
      set
      {
        __isset.unionEntry = true;
        this._unionEntry = value;
      }
    }

    public global::Apache.Hive.Service.Rpc.Thrift.TUserDefinedTypeEntry UserDefinedTypeEntry
    {
      get
      {
        return _userDefinedTypeEntry;
      }
      set
      {
        __isset.userDefinedTypeEntry = true;
        this._userDefinedTypeEntry = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool primitiveEntry;
      public bool arrayEntry;
      public bool mapEntry;
      public bool structEntry;
      public bool unionEntry;
      public bool userDefinedTypeEntry;
    }

    public TTypeEntry()
    {
    }

    public TTypeEntry DeepCopy()
    {
      var tmp55 = new TTypeEntry();
      if ((PrimitiveEntry != null) && __isset.primitiveEntry)
      {
        tmp55.PrimitiveEntry = (global::Apache.Hive.Service.Rpc.Thrift.TPrimitiveTypeEntry)this.PrimitiveEntry.DeepCopy();
      }
      tmp55.__isset.primitiveEntry = this.__isset.primitiveEntry;
      if ((ArrayEntry != null) && __isset.arrayEntry)
      {
        tmp55.ArrayEntry = (global::Apache.Hive.Service.Rpc.Thrift.TArrayTypeEntry)this.ArrayEntry.DeepCopy();
      }
      tmp55.__isset.arrayEntry = this.__isset.arrayEntry;
      if ((MapEntry != null) && __isset.mapEntry)
      {
        tmp55.MapEntry = (global::Apache.Hive.Service.Rpc.Thrift.TMapTypeEntry)this.MapEntry.DeepCopy();
      }
      tmp55.__isset.mapEntry = this.__isset.mapEntry;
      if ((StructEntry != null) && __isset.structEntry)
      {
        tmp55.StructEntry = (global::Apache.Hive.Service.Rpc.Thrift.TStructTypeEntry)this.StructEntry.DeepCopy();
      }
      tmp55.__isset.structEntry = this.__isset.structEntry;
      if ((UnionEntry != null) && __isset.unionEntry)
      {
        tmp55.UnionEntry = (global::Apache.Hive.Service.Rpc.Thrift.TUnionTypeEntry)this.UnionEntry.DeepCopy();
      }
      tmp55.__isset.unionEntry = this.__isset.unionEntry;
      if ((UserDefinedTypeEntry != null) && __isset.userDefinedTypeEntry)
      {
        tmp55.UserDefinedTypeEntry = (global::Apache.Hive.Service.Rpc.Thrift.TUserDefinedTypeEntry)this.UserDefinedTypeEntry.DeepCopy();
      }
      tmp55.__isset.userDefinedTypeEntry = this.__isset.userDefinedTypeEntry;
      return tmp55;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                PrimitiveEntry = new global::Apache.Hive.Service.Rpc.Thrift.TPrimitiveTypeEntry();
                await PrimitiveEntry.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                ArrayEntry = new global::Apache.Hive.Service.Rpc.Thrift.TArrayTypeEntry();
                await ArrayEntry.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Struct)
              {
                MapEntry = new global::Apache.Hive.Service.Rpc.Thrift.TMapTypeEntry();
                await MapEntry.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Struct)
              {
                StructEntry = new global::Apache.Hive.Service.Rpc.Thrift.TStructTypeEntry();
                await StructEntry.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.Struct)
              {
                UnionEntry = new global::Apache.Hive.Service.Rpc.Thrift.TUnionTypeEntry();
                await UnionEntry.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.Struct)
              {
                UserDefinedTypeEntry = new global::Apache.Hive.Service.Rpc.Thrift.TUserDefinedTypeEntry();
                await UserDefinedTypeEntry.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default:
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp56 = new TStruct("TTypeEntry");
        await oprot.WriteStructBeginAsync(tmp56, cancellationToken);
        var tmp57 = new TField();
        if ((PrimitiveEntry != null) && __isset.primitiveEntry)
        {
          tmp57.Name = "primitiveEntry";
          tmp57.Type = TType.Struct;
          tmp57.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp57, cancellationToken);
          await PrimitiveEntry.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if ((ArrayEntry != null) && __isset.arrayEntry)
        {
          tmp57.Name = "arrayEntry";
          tmp57.Type = TType.Struct;
          tmp57.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp57, cancellationToken);
          await ArrayEntry.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if ((MapEntry != null) && __isset.mapEntry)
        {
          tmp57.Name = "mapEntry";
          tmp57.Type = TType.Struct;
          tmp57.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp57, cancellationToken);
          await MapEntry.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if ((StructEntry != null) && __isset.structEntry)
        {
          tmp57.Name = "structEntry";
          tmp57.Type = TType.Struct;
          tmp57.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp57, cancellationToken);
          await StructEntry.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if ((UnionEntry != null) && __isset.unionEntry)
        {
          tmp57.Name = "unionEntry";
          tmp57.Type = TType.Struct;
          tmp57.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp57, cancellationToken);
          await UnionEntry.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if ((UserDefinedTypeEntry != null) && __isset.userDefinedTypeEntry)
        {
          tmp57.Name = "userDefinedTypeEntry";
          tmp57.Type = TType.Struct;
          tmp57.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp57, cancellationToken);
          await UserDefinedTypeEntry.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is TTypeEntry other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.primitiveEntry == other.__isset.primitiveEntry) && ((!__isset.primitiveEntry) || (global::System.Object.Equals(PrimitiveEntry, other.PrimitiveEntry))))
        && ((__isset.arrayEntry == other.__isset.arrayEntry) && ((!__isset.arrayEntry) || (global::System.Object.Equals(ArrayEntry, other.ArrayEntry))))
        && ((__isset.mapEntry == other.__isset.mapEntry) && ((!__isset.mapEntry) || (global::System.Object.Equals(MapEntry, other.MapEntry))))
        && ((__isset.structEntry == other.__isset.structEntry) && ((!__isset.structEntry) || (global::System.Object.Equals(StructEntry, other.StructEntry))))
        && ((__isset.unionEntry == other.__isset.unionEntry) && ((!__isset.unionEntry) || (global::System.Object.Equals(UnionEntry, other.UnionEntry))))
        && ((__isset.userDefinedTypeEntry == other.__isset.userDefinedTypeEntry) && ((!__isset.userDefinedTypeEntry) || (global::System.Object.Equals(UserDefinedTypeEntry, other.UserDefinedTypeEntry))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if ((PrimitiveEntry != null) && __isset.primitiveEntry)
        {
          hashcode = (hashcode * 397) + PrimitiveEntry.GetHashCode();
        }
        if ((ArrayEntry != null) && __isset.arrayEntry)
        {
          hashcode = (hashcode * 397) + ArrayEntry.GetHashCode();
        }
        if ((MapEntry != null) && __isset.mapEntry)
        {
          hashcode = (hashcode * 397) + MapEntry.GetHashCode();
        }
        if ((StructEntry != null) && __isset.structEntry)
        {
          hashcode = (hashcode * 397) + StructEntry.GetHashCode();
        }
        if ((UnionEntry != null) && __isset.unionEntry)
        {
          hashcode = (hashcode * 397) + UnionEntry.GetHashCode();
        }
        if ((UserDefinedTypeEntry != null) && __isset.userDefinedTypeEntry)
        {
          hashcode = (hashcode * 397) + UserDefinedTypeEntry.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp58 = new StringBuilder("TTypeEntry(");
      int tmp59 = 0;
      if ((PrimitiveEntry != null) && __isset.primitiveEntry)
      {
        if (0 < tmp59++) { tmp58.Append(", "); }
        tmp58.Append("PrimitiveEntry: ");
        PrimitiveEntry.ToString(tmp58);
      }
      if ((ArrayEntry != null) && __isset.arrayEntry)
      {
        if (0 < tmp59++) { tmp58.Append(", "); }
        tmp58.Append("ArrayEntry: ");
        ArrayEntry.ToString(tmp58);
      }
      if ((MapEntry != null) && __isset.mapEntry)
      {
        if (0 < tmp59++) { tmp58.Append(", "); }
        tmp58.Append("MapEntry: ");
        MapEntry.ToString(tmp58);
      }
      if ((StructEntry != null) && __isset.structEntry)
      {
        if (0 < tmp59++) { tmp58.Append(", "); }
        tmp58.Append("StructEntry: ");
        StructEntry.ToString(tmp58);
      }
      if ((UnionEntry != null) && __isset.unionEntry)
      {
        if (0 < tmp59++) { tmp58.Append(", "); }
        tmp58.Append("UnionEntry: ");
        UnionEntry.ToString(tmp58);
      }
      if ((UserDefinedTypeEntry != null) && __isset.userDefinedTypeEntry)
      {
        if (0 < tmp59++) { tmp58.Append(", "); }
        tmp58.Append("UserDefinedTypeEntry: ");
        UserDefinedTypeEntry.ToString(tmp58);
      }
      tmp58.Append(')');
      return tmp58.ToString();
    }
  }

}

/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.21.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


// targeting netstandard 2.x
#if(! NETSTANDARD2_0_OR_GREATER && ! NET6_0_OR_GREATER && ! NET472_OR_GREATER)
#error Unexpected target platform. See 'thrift --help' for details.
#endif

#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable CS0618   // silence our own deprecation warnings
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Apache.Hive.Service.Rpc.Thrift
{

  internal partial class TStatus : TBase
  {
    private List<string> _infoMessages;
    private string _sqlState;
    private int _errorCode;
    private string _errorMessage;
    private string _displayMessage;
    private string _errorDetailsJson;
    private byte[] _responseValidation;

    /// <summary>
    ///
    /// <seealso cref="global::Apache.Hive.Service.Rpc.Thrift.TStatusCode"/>
    /// </summary>
    public global::Apache.Hive.Service.Rpc.Thrift.TStatusCode StatusCode { get; set; }

    public List<string> InfoMessages
    {
      get
      {
        return _infoMessages;
      }
      set
      {
        __isset.infoMessages = true;
        this._infoMessages = value;
      }
    }

    public string SqlState
    {
      get
      {
        return _sqlState;
      }
      set
      {
        __isset.sqlState = true;
        this._sqlState = value;
      }
    }

    public int ErrorCode
    {
      get
      {
        return _errorCode;
      }
      set
      {
        __isset.errorCode = true;
        this._errorCode = value;
      }
    }

    public string ErrorMessage
    {
      get
      {
        return _errorMessage;
      }
      set
      {
        __isset.errorMessage = true;
        this._errorMessage = value;
      }
    }

    public string DisplayMessage
    {
      get
      {
        return _displayMessage;
      }
      set
      {
        __isset.displayMessage = true;
        this._displayMessage = value;
      }
    }

    public string ErrorDetailsJson
    {
      get
      {
        return _errorDetailsJson;
      }
      set
      {
        __isset.errorDetailsJson = true;
        this._errorDetailsJson = value;
      }
    }

    public byte[] ResponseValidation
    {
      get
      {
        return _responseValidation;
      }
      set
      {
        __isset.responseValidation = true;
        this._responseValidation = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool infoMessages;
      public bool sqlState;
      public bool errorCode;
      public bool errorMessage;
      public bool displayMessage;
      public bool errorDetailsJson;
      public bool responseValidation;
    }

    public TStatus()
    {
    }

    public TStatus(global::Apache.Hive.Service.Rpc.Thrift.TStatusCode statusCode) : this()
    {
      this.StatusCode = statusCode;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_statusCode = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                StatusCode = (global::Apache.Hive.Service.Rpc.Thrift.TStatusCode)await iprot.ReadI32Async(cancellationToken);
                isset_statusCode = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.List)
              {
                {
                  var _list292 = await iprot.ReadListBeginAsync(cancellationToken);
                  InfoMessages = new List<string>(_list292.Count);
                  for(int _i293 = 0; _i293 < _list292.Count; ++_i293)
                  {
                    string _elem294;
                    _elem294 = await iprot.ReadStringAsync(cancellationToken);
                    InfoMessages.Add(_elem294);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                SqlState = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I32)
              {
                ErrorCode = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.String)
              {
                ErrorMessage = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.String)
              {
                DisplayMessage = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1281:
              if (field.Type == TType.String)
              {
                ErrorDetailsJson = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3329:
              if (field.Type == TType.String)
              {
                ResponseValidation = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default:
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_statusCode)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp295 = new TStruct("TStatus");
        await oprot.WriteStructBeginAsync(tmp295, cancellationToken);
        var tmp296 = new TField();
        tmp296.Name = "statusCode";
        tmp296.Type = TType.I32;
        tmp296.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp296, cancellationToken);
        await oprot.WriteI32Async((int)StatusCode, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if((InfoMessages != null) && __isset.infoMessages)
        {
          tmp296.Name = "infoMessages";
          tmp296.Type = TType.List;
          tmp296.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp296, cancellationToken);
          await oprot.WriteListBeginAsync(new TList(TType.String, InfoMessages.Count), cancellationToken);
          foreach (string _iter297 in InfoMessages)
          {
            await oprot.WriteStringAsync(_iter297, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((SqlState != null) && __isset.sqlState)
        {
          tmp296.Name = "sqlState";
          tmp296.Type = TType.String;
          tmp296.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp296, cancellationToken);
          await oprot.WriteStringAsync(SqlState, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.errorCode)
        {
          tmp296.Name = "errorCode";
          tmp296.Type = TType.I32;
          tmp296.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp296, cancellationToken);
          await oprot.WriteI32Async(ErrorCode, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((ErrorMessage != null) && __isset.errorMessage)
        {
          tmp296.Name = "errorMessage";
          tmp296.Type = TType.String;
          tmp296.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp296, cancellationToken);
          await oprot.WriteStringAsync(ErrorMessage, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((DisplayMessage != null) && __isset.displayMessage)
        {
          tmp296.Name = "displayMessage";
          tmp296.Type = TType.String;
          tmp296.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp296, cancellationToken);
          await oprot.WriteStringAsync(DisplayMessage, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((ErrorDetailsJson != null) && __isset.errorDetailsJson)
        {
          tmp296.Name = "errorDetailsJson";
          tmp296.Type = TType.String;
          tmp296.ID = 1281;
          await oprot.WriteFieldBeginAsync(tmp296, cancellationToken);
          await oprot.WriteStringAsync(ErrorDetailsJson, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((ResponseValidation != null) && __isset.responseValidation)
        {
          tmp296.Name = "responseValidation";
          tmp296.Type = TType.String;
          tmp296.ID = 3329;
          await oprot.WriteFieldBeginAsync(tmp296, cancellationToken);
          await oprot.WriteBinaryAsync(ResponseValidation, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is TStatus other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return global::System.Object.Equals(StatusCode, other.StatusCode)
        && ((__isset.infoMessages == other.__isset.infoMessages) && ((!__isset.infoMessages) || (TCollections.Equals(InfoMessages, other.InfoMessages))))
        && ((__isset.sqlState == other.__isset.sqlState) && ((!__isset.sqlState) || (global::System.Object.Equals(SqlState, other.SqlState))))
        && ((__isset.errorCode == other.__isset.errorCode) && ((!__isset.errorCode) || (global::System.Object.Equals(ErrorCode, other.ErrorCode))))
        && ((__isset.errorMessage == other.__isset.errorMessage) && ((!__isset.errorMessage) || (global::System.Object.Equals(ErrorMessage, other.ErrorMessage))))
        && ((__isset.displayMessage == other.__isset.displayMessage) && ((!__isset.displayMessage) || (global::System.Object.Equals(DisplayMessage, other.DisplayMessage))))
        && ((__isset.errorDetailsJson == other.__isset.errorDetailsJson) && ((!__isset.errorDetailsJson) || (global::System.Object.Equals(ErrorDetailsJson, other.ErrorDetailsJson))))
        && ((__isset.responseValidation == other.__isset.responseValidation) && ((!__isset.responseValidation) || (TCollections.Equals(ResponseValidation, other.ResponseValidation))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        hashcode = (hashcode * 397) + StatusCode.GetHashCode();
        if((InfoMessages != null) && __isset.infoMessages)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(InfoMessages);
        }
        if((SqlState != null) && __isset.sqlState)
        {
          hashcode = (hashcode * 397) + SqlState.GetHashCode();
        }
        if(__isset.errorCode)
        {
          hashcode = (hashcode * 397) + ErrorCode.GetHashCode();
        }
        if((ErrorMessage != null) && __isset.errorMessage)
        {
          hashcode = (hashcode * 397) + ErrorMessage.GetHashCode();
        }
        if((DisplayMessage != null) && __isset.displayMessage)
        {
          hashcode = (hashcode * 397) + DisplayMessage.GetHashCode();
        }
        if((ErrorDetailsJson != null) && __isset.errorDetailsJson)
        {
          hashcode = (hashcode * 397) + ErrorDetailsJson.GetHashCode();
        }
        if((ResponseValidation != null) && __isset.responseValidation)
        {
          hashcode = (hashcode * 397) + ResponseValidation.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp298 = new StringBuilder("TStatus(");
      tmp298.Append(", StatusCode: ");
      StatusCode.ToString(tmp298);
      if((InfoMessages != null) && __isset.infoMessages)
      {
        tmp298.Append(", InfoMessages: ");
        InfoMessages.ToString(tmp298);
      }
      if((SqlState != null) && __isset.sqlState)
      {
        tmp298.Append(", SqlState: ");
        SqlState.ToString(tmp298);
      }
      if(__isset.errorCode)
      {
        tmp298.Append(", ErrorCode: ");
        ErrorCode.ToString(tmp298);
      }
      if((ErrorMessage != null) && __isset.errorMessage)
      {
        tmp298.Append(", ErrorMessage: ");
        ErrorMessage.ToString(tmp298);
      }
      if((DisplayMessage != null) && __isset.displayMessage)
      {
        tmp298.Append(", DisplayMessage: ");
        DisplayMessage.ToString(tmp298);
      }
      if((ErrorDetailsJson != null) && __isset.errorDetailsJson)
      {
        tmp298.Append(", ErrorDetailsJson: ");
        ErrorDetailsJson.ToString(tmp298);
      }
      if((ResponseValidation != null) && __isset.responseValidation)
      {
        tmp298.Append(", ResponseValidation: ");
        ResponseValidation.ToString(tmp298);
      }
      tmp298.Append(')');
      return tmp298.ToString();
    }
  }

}

/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Apache.Hive.Service.Rpc.Thrift
{

  public partial class TStatus : TBase
  {
    private List<string> _infoMessages;
    private string _sqlState;
    private int _errorCode;
    private string _errorMessage;

    /// <summary>
    ///
    /// <seealso cref="global::Apache.Hive.Service.Rpc.Thrift.TStatusCode"/>
    /// </summary>
    public global::Apache.Hive.Service.Rpc.Thrift.TStatusCode StatusCode { get; set; }

    public List<string> InfoMessages
    {
      get
      {
        return _infoMessages;
      }
      set
      {
        __isset.infoMessages = true;
        this._infoMessages = value;
      }
    }

    public string SqlState
    {
      get
      {
        return _sqlState;
      }
      set
      {
        __isset.sqlState = true;
        this._sqlState = value;
      }
    }

    public int ErrorCode
    {
      get
      {
        return _errorCode;
      }
      set
      {
        __isset.errorCode = true;
        this._errorCode = value;
      }
    }

    public string ErrorMessage
    {
      get
      {
        return _errorMessage;
      }
      set
      {
        __isset.errorMessage = true;
        this._errorMessage = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool infoMessages;
      public bool sqlState;
      public bool errorCode;
      public bool errorMessage;
    }

    public TStatus()
    {
    }

    public TStatus(global::Apache.Hive.Service.Rpc.Thrift.TStatusCode statusCode) : this()
    {
      this.StatusCode = statusCode;
    }

    public TStatus DeepCopy()
    {
      var tmp255 = new TStatus();
      tmp255.StatusCode = this.StatusCode;
      if ((InfoMessages != null) && __isset.infoMessages)
      {
        tmp255.InfoMessages = this.InfoMessages.DeepCopy();
      }
      tmp255.__isset.infoMessages = this.__isset.infoMessages;
      if ((SqlState != null) && __isset.sqlState)
      {
        tmp255.SqlState = this.SqlState;
      }
      tmp255.__isset.sqlState = this.__isset.sqlState;
      if (__isset.errorCode)
      {
        tmp255.ErrorCode = this.ErrorCode;
      }
      tmp255.__isset.errorCode = this.__isset.errorCode;
      if ((ErrorMessage != null) && __isset.errorMessage)
      {
        tmp255.ErrorMessage = this.ErrorMessage;
      }
      tmp255.__isset.errorMessage = this.__isset.errorMessage;
      return tmp255;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_statusCode = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                StatusCode = (global::Apache.Hive.Service.Rpc.Thrift.TStatusCode)await iprot.ReadI32Async(cancellationToken);
                isset_statusCode = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.List)
              {
                {
                  var _list256 = await iprot.ReadListBeginAsync(cancellationToken);
                  InfoMessages = new List<string>(_list256.Count);
                  for(int _i257 = 0; _i257 < _list256.Count; ++_i257)
                  {
                    string _elem258;
                    _elem258 = await iprot.ReadStringAsync(cancellationToken);
                    InfoMessages.Add(_elem258);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                SqlState = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I32)
              {
                ErrorCode = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.String)
              {
                ErrorMessage = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default:
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_statusCode)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp259 = new TStruct("TStatus");
        await oprot.WriteStructBeginAsync(tmp259, cancellationToken);
        var tmp260 = new TField();
        tmp260.Name = "statusCode";
        tmp260.Type = TType.I32;
        tmp260.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp260, cancellationToken);
        await oprot.WriteI32Async((int)StatusCode, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if ((InfoMessages != null) && __isset.infoMessages)
        {
          tmp260.Name = "infoMessages";
          tmp260.Type = TType.List;
          tmp260.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp260, cancellationToken);
          await oprot.WriteListBeginAsync(new TList(TType.String, InfoMessages.Count), cancellationToken);
          foreach (string _iter261 in InfoMessages)
          {
            await oprot.WriteStringAsync(_iter261, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if ((SqlState != null) && __isset.sqlState)
        {
          tmp260.Name = "sqlState";
          tmp260.Type = TType.String;
          tmp260.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp260, cancellationToken);
          await oprot.WriteStringAsync(SqlState, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.errorCode)
        {
          tmp260.Name = "errorCode";
          tmp260.Type = TType.I32;
          tmp260.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp260, cancellationToken);
          await oprot.WriteI32Async(ErrorCode, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if ((ErrorMessage != null) && __isset.errorMessage)
        {
          tmp260.Name = "errorMessage";
          tmp260.Type = TType.String;
          tmp260.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp260, cancellationToken);
          await oprot.WriteStringAsync(ErrorMessage, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is TStatus other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return global::System.Object.Equals(StatusCode, other.StatusCode)
        && ((__isset.infoMessages == other.__isset.infoMessages) && ((!__isset.infoMessages) || (TCollections.Equals(InfoMessages, other.InfoMessages))))
        && ((__isset.sqlState == other.__isset.sqlState) && ((!__isset.sqlState) || (global::System.Object.Equals(SqlState, other.SqlState))))
        && ((__isset.errorCode == other.__isset.errorCode) && ((!__isset.errorCode) || (global::System.Object.Equals(ErrorCode, other.ErrorCode))))
        && ((__isset.errorMessage == other.__isset.errorMessage) && ((!__isset.errorMessage) || (global::System.Object.Equals(ErrorMessage, other.ErrorMessage))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        hashcode = (hashcode * 397) + StatusCode.GetHashCode();
        if ((InfoMessages != null) && __isset.infoMessages)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(InfoMessages);
        }
        if ((SqlState != null) && __isset.sqlState)
        {
          hashcode = (hashcode * 397) + SqlState.GetHashCode();
        }
        if (__isset.errorCode)
        {
          hashcode = (hashcode * 397) + ErrorCode.GetHashCode();
        }
        if ((ErrorMessage != null) && __isset.errorMessage)
        {
          hashcode = (hashcode * 397) + ErrorMessage.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp262 = new StringBuilder("TStatus(");
      tmp262.Append(", StatusCode: ");
      StatusCode.ToString(tmp262);
      if ((InfoMessages != null) && __isset.infoMessages)
      {
        tmp262.Append(", InfoMessages: ");
        InfoMessages.ToString(tmp262);
      }
      if ((SqlState != null) && __isset.sqlState)
      {
        tmp262.Append(", SqlState: ");
        SqlState.ToString(tmp262);
      }
      if (__isset.errorCode)
      {
        tmp262.Append(", ErrorCode: ");
        ErrorCode.ToString(tmp262);
      }
      if ((ErrorMessage != null) && __isset.errorMessage)
      {
        tmp262.Append(", ErrorMessage: ");
        ErrorMessage.ToString(tmp262);
      }
      tmp262.Append(')');
      return tmp262.ToString();
    }
  }

}

/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Apache.Hive.Service.Rpc.Thrift
{

  public partial class TDownloadDataReq : TBase
  {
    private string _tableName;
    private string _query;
    private string _format;
    private Dictionary<string, string> _downloadOptions;

    public global::Apache.Hive.Service.Rpc.Thrift.TSessionHandle SessionHandle { get; set; }

    public string TableName
    {
      get
      {
        return _tableName;
      }
      set
      {
        __isset.tableName = true;
        this._tableName = value;
      }
    }

    public string Query
    {
      get
      {
        return _query;
      }
      set
      {
        __isset.query = true;
        this._query = value;
      }
    }

    public string Format
    {
      get
      {
        return _format;
      }
      set
      {
        __isset.format = true;
        this._format = value;
      }
    }

    public Dictionary<string, string> DownloadOptions
    {
      get
      {
        return _downloadOptions;
      }
      set
      {
        __isset.downloadOptions = true;
        this._downloadOptions = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool tableName;
      public bool query;
      public bool format;
      public bool downloadOptions;
    }

    public TDownloadDataReq()
    {
    }

    public TDownloadDataReq(global::Apache.Hive.Service.Rpc.Thrift.TSessionHandle sessionHandle) : this()
    {
      this.SessionHandle = sessionHandle;
    }

    public TDownloadDataReq DeepCopy()
    {
      var tmp440 = new TDownloadDataReq();
      if ((SessionHandle != null))
      {
        tmp440.SessionHandle = (global::Apache.Hive.Service.Rpc.Thrift.TSessionHandle)this.SessionHandle.DeepCopy();
      }
      if ((TableName != null) && __isset.tableName)
      {
        tmp440.TableName = this.TableName;
      }
      tmp440.__isset.tableName = this.__isset.tableName;
      if ((Query != null) && __isset.query)
      {
        tmp440.Query = this.Query;
      }
      tmp440.__isset.query = this.__isset.query;
      if ((Format != null) && __isset.format)
      {
        tmp440.Format = this.Format;
      }
      tmp440.__isset.format = this.__isset.format;
      if ((DownloadOptions != null) && __isset.downloadOptions)
      {
        tmp440.DownloadOptions = this.DownloadOptions.DeepCopy();
      }
      tmp440.__isset.downloadOptions = this.__isset.downloadOptions;
      return tmp440;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_sessionHandle = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                SessionHandle = new global::Apache.Hive.Service.Rpc.Thrift.TSessionHandle();
                await SessionHandle.ReadAsync(iprot, cancellationToken);
                isset_sessionHandle = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                TableName = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                Query = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.String)
              {
                Format = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.Map)
              {
                {
                  var _map441 = await iprot.ReadMapBeginAsync(cancellationToken);
                  DownloadOptions = new Dictionary<string, string>(_map441.Count);
                  for(int _i442 = 0; _i442 < _map441.Count; ++_i442)
                  {
                    string _key443;
                    string _val444;
                    _key443 = await iprot.ReadStringAsync(cancellationToken);
                    _val444 = await iprot.ReadStringAsync(cancellationToken);
                    DownloadOptions[_key443] = _val444;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default:
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_sessionHandle)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp445 = new TStruct("TDownloadDataReq");
        await oprot.WriteStructBeginAsync(tmp445, cancellationToken);
        var tmp446 = new TField();
        if ((SessionHandle != null))
        {
          tmp446.Name = "sessionHandle";
          tmp446.Type = TType.Struct;
          tmp446.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp446, cancellationToken);
          await SessionHandle.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if ((TableName != null) && __isset.tableName)
        {
          tmp446.Name = "tableName";
          tmp446.Type = TType.String;
          tmp446.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp446, cancellationToken);
          await oprot.WriteStringAsync(TableName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if ((Query != null) && __isset.query)
        {
          tmp446.Name = "query";
          tmp446.Type = TType.String;
          tmp446.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp446, cancellationToken);
          await oprot.WriteStringAsync(Query, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if ((Format != null) && __isset.format)
        {
          tmp446.Name = "format";
          tmp446.Type = TType.String;
          tmp446.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp446, cancellationToken);
          await oprot.WriteStringAsync(Format, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if ((DownloadOptions != null) && __isset.downloadOptions)
        {
          tmp446.Name = "downloadOptions";
          tmp446.Type = TType.Map;
          tmp446.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp446, cancellationToken);
          await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, DownloadOptions.Count), cancellationToken);
          foreach (string _iter447 in DownloadOptions.Keys)
          {
            await oprot.WriteStringAsync(_iter447, cancellationToken);
            await oprot.WriteStringAsync(DownloadOptions[_iter447], cancellationToken);
          }
          await oprot.WriteMapEndAsync(cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is TDownloadDataReq other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return global::System.Object.Equals(SessionHandle, other.SessionHandle)
        && ((__isset.tableName == other.__isset.tableName) && ((!__isset.tableName) || (global::System.Object.Equals(TableName, other.TableName))))
        && ((__isset.query == other.__isset.query) && ((!__isset.query) || (global::System.Object.Equals(Query, other.Query))))
        && ((__isset.format == other.__isset.format) && ((!__isset.format) || (global::System.Object.Equals(Format, other.Format))))
        && ((__isset.downloadOptions == other.__isset.downloadOptions) && ((!__isset.downloadOptions) || (TCollections.Equals(DownloadOptions, other.DownloadOptions))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if ((SessionHandle != null))
        {
          hashcode = (hashcode * 397) + SessionHandle.GetHashCode();
        }
        if ((TableName != null) && __isset.tableName)
        {
          hashcode = (hashcode * 397) + TableName.GetHashCode();
        }
        if ((Query != null) && __isset.query)
        {
          hashcode = (hashcode * 397) + Query.GetHashCode();
        }
        if ((Format != null) && __isset.format)
        {
          hashcode = (hashcode * 397) + Format.GetHashCode();
        }
        if ((DownloadOptions != null) && __isset.downloadOptions)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(DownloadOptions);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp448 = new StringBuilder("TDownloadDataReq(");
      if ((SessionHandle != null))
      {
        tmp448.Append(", SessionHandle: ");
        SessionHandle.ToString(tmp448);
      }
      if ((TableName != null) && __isset.tableName)
      {
        tmp448.Append(", TableName: ");
        TableName.ToString(tmp448);
      }
      if ((Query != null) && __isset.query)
      {
        tmp448.Append(", Query: ");
        Query.ToString(tmp448);
      }
      if ((Format != null) && __isset.format)
      {
        tmp448.Append(", Format: ");
        Format.ToString(tmp448);
      }
      if ((DownloadOptions != null) && __isset.downloadOptions)
      {
        tmp448.Append(", DownloadOptions: ");
        DownloadOptions.ToString(tmp448);
      }
      tmp448.Append(')');
      return tmp448.ToString();
    }
  }

}

/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.21.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


// targeting netstandard 2.x
#if(! NETSTANDARD2_0_OR_GREATER && ! NET6_0_OR_GREATER && ! NET472_OR_GREATER)
#error Unexpected target platform. See 'thrift --help' for details.
#endif

#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable CS0618   // silence our own deprecation warnings
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Apache.Hive.Service.Rpc.Thrift
{

  public partial class TSparkParameter : TBase
  {
    private int _ordinal;
    private string _name;
    private string _type;
    private global::Apache.Hive.Service.Rpc.Thrift.TSparkParameterValue _value;
    private List<global::Apache.Hive.Service.Rpc.Thrift.TSparkParameterValueArg> _arguments;

    public int Ordinal
    {
      get
      {
        return _ordinal;
      }
      set
      {
        __isset.@ordinal = true;
        this._ordinal = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.@name = true;
        this._name = value;
      }
    }

    public string Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.@type = true;
        this._type = value;
      }
    }

    public global::Apache.Hive.Service.Rpc.Thrift.TSparkParameterValue Value
    {
      get
      {
        return _value;
      }
      set
      {
        __isset.@value = true;
        this._value = value;
      }
    }

    public List<global::Apache.Hive.Service.Rpc.Thrift.TSparkParameterValueArg> Arguments
    {
      get
      {
        return _arguments;
      }
      set
      {
        __isset.@arguments = true;
        this._arguments = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool @ordinal;
      public bool @name;
      public bool @type;
      public bool @value;
      public bool @arguments;
    }

    public TSparkParameter()
    {
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Ordinal = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Name = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                Type = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Struct)
              {
                Value = new global::Apache.Hive.Service.Rpc.Thrift.TSparkParameterValue();
                await Value.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.List)
              {
                {
                  var _list417 = await iprot.ReadListBeginAsync(cancellationToken);
                  Arguments = new List<global::Apache.Hive.Service.Rpc.Thrift.TSparkParameterValueArg>(_list417.Count);
                  for(int _i418 = 0; _i418 < _list417.Count; ++_i418)
                  {
                    global::Apache.Hive.Service.Rpc.Thrift.TSparkParameterValueArg _elem419;
                    _elem419 = new global::Apache.Hive.Service.Rpc.Thrift.TSparkParameterValueArg();
                    await _elem419.ReadAsync(iprot, cancellationToken);
                    Arguments.Add(_elem419);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default:
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp420 = new TStruct("TSparkParameter");
        await oprot.WriteStructBeginAsync(tmp420, cancellationToken);
        var tmp421 = new TField();
        if(__isset.@ordinal)
        {
          tmp421.Name = "ordinal";
          tmp421.Type = TType.I32;
          tmp421.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp421, cancellationToken);
          await oprot.WriteI32Async(Ordinal, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Name != null) && __isset.@name)
        {
          tmp421.Name = "name";
          tmp421.Type = TType.String;
          tmp421.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp421, cancellationToken);
          await oprot.WriteStringAsync(Name, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Type != null) && __isset.@type)
        {
          tmp421.Name = "type";
          tmp421.Type = TType.String;
          tmp421.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp421, cancellationToken);
          await oprot.WriteStringAsync(Type, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Value != null) && __isset.@value)
        {
          tmp421.Name = "value";
          tmp421.Type = TType.Struct;
          tmp421.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp421, cancellationToken);
          await Value.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Arguments != null) && __isset.@arguments)
        {
          tmp421.Name = "arguments";
          tmp421.Type = TType.List;
          tmp421.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp421, cancellationToken);
          await oprot.WriteListBeginAsync(new TList(TType.Struct, Arguments.Count), cancellationToken);
          foreach (global::Apache.Hive.Service.Rpc.Thrift.TSparkParameterValueArg _iter422 in Arguments)
          {
            await _iter422.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is TSparkParameter other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.@ordinal == other.__isset.@ordinal) && ((!__isset.@ordinal) || (global::System.Object.Equals(Ordinal, other.Ordinal))))
        && ((__isset.@name == other.__isset.@name) && ((!__isset.@name) || (global::System.Object.Equals(Name, other.Name))))
        && ((__isset.@type == other.__isset.@type) && ((!__isset.@type) || (global::System.Object.Equals(Type, other.Type))))
        && ((__isset.@value == other.__isset.@value) && ((!__isset.@value) || (global::System.Object.Equals(Value, other.Value))))
        && ((__isset.@arguments == other.__isset.@arguments) && ((!__isset.@arguments) || (TCollections.Equals(Arguments, other.Arguments))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.@ordinal)
        {
          hashcode = (hashcode * 397) + Ordinal.GetHashCode();
        }
        if((Name != null) && __isset.@name)
        {
          hashcode = (hashcode * 397) + Name.GetHashCode();
        }
        if((Type != null) && __isset.@type)
        {
          hashcode = (hashcode * 397) + Type.GetHashCode();
        }
        if((Value != null) && __isset.@value)
        {
          hashcode = (hashcode * 397) + Value.GetHashCode();
        }
        if((Arguments != null) && __isset.@arguments)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Arguments);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp423 = new StringBuilder("TSparkParameter(");
      int tmp424 = 0;
      if(__isset.@ordinal)
      {
        if(0 < tmp424++) { tmp423.Append(", "); }
        tmp423.Append("Ordinal: ");
        Ordinal.ToString(tmp423);
      }
      if((Name != null) && __isset.@name)
      {
        if(0 < tmp424++) { tmp423.Append(", "); }
        tmp423.Append("Name: ");
        Name.ToString(tmp423);
      }
      if((Type != null) && __isset.@type)
      {
        if(0 < tmp424++) { tmp423.Append(", "); }
        tmp423.Append("Type: ");
        Type.ToString(tmp423);
      }
      if((Value != null) && __isset.@value)
      {
        if(0 < tmp424++) { tmp423.Append(", "); }
        tmp423.Append("Value: ");
        Value.ToString(tmp423);
      }
      if((Arguments != null) && __isset.@arguments)
      {
        if(0 < tmp424++) { tmp423.Append(", "); }
        tmp423.Append("Arguments: ");
        Arguments.ToString(tmp423);
      }
      tmp423.Append(')');
      return tmp423.ToString();
    }
  }

}

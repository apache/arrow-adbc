/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Apache.Hive.Service.Rpc.Thrift
{

  public partial class TSparkGetDirectResults : TBase
  {
    private long _maxBytes;

    public long MaxRows { get; set; }

    public long MaxBytes
    {
      get
      {
        return _maxBytes;
      }
      set
      {
        __isset.maxBytes = true;
        this._maxBytes = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool maxBytes;
    }

    public TSparkGetDirectResults()
    {
    }

    public TSparkGetDirectResults(long maxRows) : this()
    {
      this.MaxRows = maxRows;
    }

    public TSparkGetDirectResults DeepCopy()
    {
      var tmp240 = new TSparkGetDirectResults();
      tmp240.MaxRows = this.MaxRows;
      if (__isset.maxBytes)
      {
        tmp240.MaxBytes = this.MaxBytes;
      }
      tmp240.__isset.maxBytes = this.__isset.maxBytes;
      return tmp240;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_maxRows = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64)
              {
                MaxRows = await iprot.ReadI64Async(cancellationToken);
                isset_maxRows = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I64)
              {
                MaxBytes = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default:
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_maxRows)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp241 = new TStruct("TSparkGetDirectResults");
        await oprot.WriteStructBeginAsync(tmp241, cancellationToken);
        var tmp242 = new TField();
        tmp242.Name = "maxRows";
        tmp242.Type = TType.I64;
        tmp242.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp242, cancellationToken);
        await oprot.WriteI64Async(MaxRows, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if (__isset.maxBytes)
        {
          tmp242.Name = "maxBytes";
          tmp242.Type = TType.I64;
          tmp242.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp242, cancellationToken);
          await oprot.WriteI64Async(MaxBytes, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is TSparkGetDirectResults other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return global::System.Object.Equals(MaxRows, other.MaxRows)
        && ((__isset.maxBytes == other.__isset.maxBytes) && ((!__isset.maxBytes) || (global::System.Object.Equals(MaxBytes, other.MaxBytes))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        hashcode = (hashcode * 397) + MaxRows.GetHashCode();
        if (__isset.maxBytes)
        {
          hashcode = (hashcode * 397) + MaxBytes.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp243 = new StringBuilder("TSparkGetDirectResults(");
      tmp243.Append(", MaxRows: ");
      MaxRows.ToString(tmp243);
      if (__isset.maxBytes)
      {
        tmp243.Append(", MaxBytes: ");
        MaxBytes.ToString(tmp243);
      }
      tmp243.Append(')');
      return tmp243.ToString();
    }
  }

}

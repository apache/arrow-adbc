/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Apache.Hive.Service.Rpc.Thrift
{

  public partial class TExecuteStatementResp : TBase
  {
    private global::Apache.Hive.Service.Rpc.Thrift.TOperationHandle _operationHandle;
    private global::Apache.Hive.Service.Rpc.Thrift.TSparkDirectResults _directResults;
    private bool _executionRejected;
    private double _maxClusterCapacity;
    private double _queryCost;
    private global::Apache.Hive.Service.Rpc.Thrift.TDBSqlSessionConf _sessionConf;
    private double _currentClusterLoad;
    private int _idempotencyType;

    public global::Apache.Hive.Service.Rpc.Thrift.TStatus Status { get; set; }

    public global::Apache.Hive.Service.Rpc.Thrift.TOperationHandle OperationHandle
    {
      get
      {
        return _operationHandle;
      }
      set
      {
        __isset.operationHandle = true;
        this._operationHandle = value;
      }
    }

    public global::Apache.Hive.Service.Rpc.Thrift.TSparkDirectResults DirectResults
    {
      get
      {
        return _directResults;
      }
      set
      {
        __isset.directResults = true;
        this._directResults = value;
      }
    }

    public bool ExecutionRejected
    {
      get
      {
        return _executionRejected;
      }
      set
      {
        __isset.executionRejected = true;
        this._executionRejected = value;
      }
    }

    public double MaxClusterCapacity
    {
      get
      {
        return _maxClusterCapacity;
      }
      set
      {
        __isset.maxClusterCapacity = true;
        this._maxClusterCapacity = value;
      }
    }

    public double QueryCost
    {
      get
      {
        return _queryCost;
      }
      set
      {
        __isset.queryCost = true;
        this._queryCost = value;
      }
    }

    public global::Apache.Hive.Service.Rpc.Thrift.TDBSqlSessionConf SessionConf
    {
      get
      {
        return _sessionConf;
      }
      set
      {
        __isset.sessionConf = true;
        this._sessionConf = value;
      }
    }

    public double CurrentClusterLoad
    {
      get
      {
        return _currentClusterLoad;
      }
      set
      {
        __isset.currentClusterLoad = true;
        this._currentClusterLoad = value;
      }
    }

    public int IdempotencyType
    {
      get
      {
        return _idempotencyType;
      }
      set
      {
        __isset.idempotencyType = true;
        this._idempotencyType = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool operationHandle;
      public bool directResults;
      public bool executionRejected;
      public bool maxClusterCapacity;
      public bool queryCost;
      public bool sessionConf;
      public bool currentClusterLoad;
      public bool idempotencyType;
    }

    public TExecuteStatementResp()
    {
    }

    public TExecuteStatementResp(global::Apache.Hive.Service.Rpc.Thrift.TStatus status) : this()
    {
      this.Status = status;
    }

    public TExecuteStatementResp DeepCopy()
    {
      var tmp415 = new TExecuteStatementResp();
      if ((Status != null))
      {
        tmp415.Status = (global::Apache.Hive.Service.Rpc.Thrift.TStatus)this.Status.DeepCopy();
      }
      if ((OperationHandle != null) && __isset.operationHandle)
      {
        tmp415.OperationHandle = (global::Apache.Hive.Service.Rpc.Thrift.TOperationHandle)this.OperationHandle.DeepCopy();
      }
      tmp415.__isset.operationHandle = this.__isset.operationHandle;
      if ((DirectResults != null) && __isset.directResults)
      {
        tmp415.DirectResults = (global::Apache.Hive.Service.Rpc.Thrift.TSparkDirectResults)this.DirectResults.DeepCopy();
      }
      tmp415.__isset.directResults = this.__isset.directResults;
      if (__isset.executionRejected)
      {
        tmp415.ExecutionRejected = this.ExecutionRejected;
      }
      tmp415.__isset.executionRejected = this.__isset.executionRejected;
      if (__isset.maxClusterCapacity)
      {
        tmp415.MaxClusterCapacity = this.MaxClusterCapacity;
      }
      tmp415.__isset.maxClusterCapacity = this.__isset.maxClusterCapacity;
      if (__isset.queryCost)
      {
        tmp415.QueryCost = this.QueryCost;
      }
      tmp415.__isset.queryCost = this.__isset.queryCost;
      if ((SessionConf != null) && __isset.sessionConf)
      {
        tmp415.SessionConf = (global::Apache.Hive.Service.Rpc.Thrift.TDBSqlSessionConf)this.SessionConf.DeepCopy();
      }
      tmp415.__isset.sessionConf = this.__isset.sessionConf;
      if (__isset.currentClusterLoad)
      {
        tmp415.CurrentClusterLoad = this.CurrentClusterLoad;
      }
      tmp415.__isset.currentClusterLoad = this.__isset.currentClusterLoad;
      if (__isset.idempotencyType)
      {
        tmp415.IdempotencyType = this.IdempotencyType;
      }
      tmp415.__isset.idempotencyType = this.__isset.idempotencyType;
      return tmp415;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_status = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                Status = new global::Apache.Hive.Service.Rpc.Thrift.TStatus();
                await Status.ReadAsync(iprot, cancellationToken);
                isset_status = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                OperationHandle = new global::Apache.Hive.Service.Rpc.Thrift.TOperationHandle();
                await OperationHandle.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1281:
              if (field.Type == TType.Struct)
              {
                DirectResults = new global::Apache.Hive.Service.Rpc.Thrift.TSparkDirectResults();
                await DirectResults.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3329:
              if (field.Type == TType.Bool)
              {
                ExecutionRejected = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3330:
              if (field.Type == TType.Double)
              {
                MaxClusterCapacity = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3331:
              if (field.Type == TType.Double)
              {
                QueryCost = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3332:
              if (field.Type == TType.Struct)
              {
                SessionConf = new global::Apache.Hive.Service.Rpc.Thrift.TDBSqlSessionConf();
                await SessionConf.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3333:
              if (field.Type == TType.Double)
              {
                CurrentClusterLoad = await iprot.ReadDoubleAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3334:
              if (field.Type == TType.I32)
              {
                IdempotencyType = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default:
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_status)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp416 = new TStruct("TExecuteStatementResp");
        await oprot.WriteStructBeginAsync(tmp416, cancellationToken);
        var tmp417 = new TField();
        if ((Status != null))
        {
          tmp417.Name = "status";
          tmp417.Type = TType.Struct;
          tmp417.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp417, cancellationToken);
          await Status.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if ((OperationHandle != null) && __isset.operationHandle)
        {
          tmp417.Name = "operationHandle";
          tmp417.Type = TType.Struct;
          tmp417.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp417, cancellationToken);
          await OperationHandle.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if ((DirectResults != null) && __isset.directResults)
        {
          tmp417.Name = "directResults";
          tmp417.Type = TType.Struct;
          tmp417.ID = 1281;
          await oprot.WriteFieldBeginAsync(tmp417, cancellationToken);
          await DirectResults.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.executionRejected)
        {
          tmp417.Name = "executionRejected";
          tmp417.Type = TType.Bool;
          tmp417.ID = 3329;
          await oprot.WriteFieldBeginAsync(tmp417, cancellationToken);
          await oprot.WriteBoolAsync(ExecutionRejected, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.maxClusterCapacity)
        {
          tmp417.Name = "maxClusterCapacity";
          tmp417.Type = TType.Double;
          tmp417.ID = 3330;
          await oprot.WriteFieldBeginAsync(tmp417, cancellationToken);
          await oprot.WriteDoubleAsync(MaxClusterCapacity, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.queryCost)
        {
          tmp417.Name = "queryCost";
          tmp417.Type = TType.Double;
          tmp417.ID = 3331;
          await oprot.WriteFieldBeginAsync(tmp417, cancellationToken);
          await oprot.WriteDoubleAsync(QueryCost, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if ((SessionConf != null) && __isset.sessionConf)
        {
          tmp417.Name = "sessionConf";
          tmp417.Type = TType.Struct;
          tmp417.ID = 3332;
          await oprot.WriteFieldBeginAsync(tmp417, cancellationToken);
          await SessionConf.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.currentClusterLoad)
        {
          tmp417.Name = "currentClusterLoad";
          tmp417.Type = TType.Double;
          tmp417.ID = 3333;
          await oprot.WriteFieldBeginAsync(tmp417, cancellationToken);
          await oprot.WriteDoubleAsync(CurrentClusterLoad, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.idempotencyType)
        {
          tmp417.Name = "idempotencyType";
          tmp417.Type = TType.I32;
          tmp417.ID = 3334;
          await oprot.WriteFieldBeginAsync(tmp417, cancellationToken);
          await oprot.WriteI32Async(IdempotencyType, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is TExecuteStatementResp other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return global::System.Object.Equals(Status, other.Status)
        && ((__isset.operationHandle == other.__isset.operationHandle) && ((!__isset.operationHandle) || (global::System.Object.Equals(OperationHandle, other.OperationHandle))))
        && ((__isset.directResults == other.__isset.directResults) && ((!__isset.directResults) || (global::System.Object.Equals(DirectResults, other.DirectResults))))
        && ((__isset.executionRejected == other.__isset.executionRejected) && ((!__isset.executionRejected) || (global::System.Object.Equals(ExecutionRejected, other.ExecutionRejected))))
        && ((__isset.maxClusterCapacity == other.__isset.maxClusterCapacity) && ((!__isset.maxClusterCapacity) || (global::System.Object.Equals(MaxClusterCapacity, other.MaxClusterCapacity))))
        && ((__isset.queryCost == other.__isset.queryCost) && ((!__isset.queryCost) || (global::System.Object.Equals(QueryCost, other.QueryCost))))
        && ((__isset.sessionConf == other.__isset.sessionConf) && ((!__isset.sessionConf) || (global::System.Object.Equals(SessionConf, other.SessionConf))))
        && ((__isset.currentClusterLoad == other.__isset.currentClusterLoad) && ((!__isset.currentClusterLoad) || (global::System.Object.Equals(CurrentClusterLoad, other.CurrentClusterLoad))))
        && ((__isset.idempotencyType == other.__isset.idempotencyType) && ((!__isset.idempotencyType) || (global::System.Object.Equals(IdempotencyType, other.IdempotencyType))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if ((Status != null))
        {
          hashcode = (hashcode * 397) + Status.GetHashCode();
        }
        if ((OperationHandle != null) && __isset.operationHandle)
        {
          hashcode = (hashcode * 397) + OperationHandle.GetHashCode();
        }
        if ((DirectResults != null) && __isset.directResults)
        {
          hashcode = (hashcode * 397) + DirectResults.GetHashCode();
        }
        if (__isset.executionRejected)
        {
          hashcode = (hashcode * 397) + ExecutionRejected.GetHashCode();
        }
        if (__isset.maxClusterCapacity)
        {
          hashcode = (hashcode * 397) + MaxClusterCapacity.GetHashCode();
        }
        if (__isset.queryCost)
        {
          hashcode = (hashcode * 397) + QueryCost.GetHashCode();
        }
        if ((SessionConf != null) && __isset.sessionConf)
        {
          hashcode = (hashcode * 397) + SessionConf.GetHashCode();
        }
        if (__isset.currentClusterLoad)
        {
          hashcode = (hashcode * 397) + CurrentClusterLoad.GetHashCode();
        }
        if (__isset.idempotencyType)
        {
          hashcode = (hashcode * 397) + IdempotencyType.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp418 = new StringBuilder("TExecuteStatementResp(");
      if ((Status != null))
      {
        tmp418.Append(", Status: ");
        Status.ToString(tmp418);
      }
      if ((OperationHandle != null) && __isset.operationHandle)
      {
        tmp418.Append(", OperationHandle: ");
        OperationHandle.ToString(tmp418);
      }
      if ((DirectResults != null) && __isset.directResults)
      {
        tmp418.Append(", DirectResults: ");
        DirectResults.ToString(tmp418);
      }
      if (__isset.executionRejected)
      {
        tmp418.Append(", ExecutionRejected: ");
        ExecutionRejected.ToString(tmp418);
      }
      if (__isset.maxClusterCapacity)
      {
        tmp418.Append(", MaxClusterCapacity: ");
        MaxClusterCapacity.ToString(tmp418);
      }
      if (__isset.queryCost)
      {
        tmp418.Append(", QueryCost: ");
        QueryCost.ToString(tmp418);
      }
      if ((SessionConf != null) && __isset.sessionConf)
      {
        tmp418.Append(", SessionConf: ");
        SessionConf.ToString(tmp418);
      }
      if (__isset.currentClusterLoad)
      {
        tmp418.Append(", CurrentClusterLoad: ");
        CurrentClusterLoad.ToString(tmp418);
      }
      if (__isset.idempotencyType)
      {
        tmp418.Append(", IdempotencyType: ");
        IdempotencyType.ToString(tmp418);
      }
      tmp418.Append(')');
      return tmp418.ToString();
    }
  }

}

/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.21.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


// targeting netstandard 2.x
#if(! NETSTANDARD2_0_OR_GREATER && ! NET6_0_OR_GREATER && ! NET472_OR_GREATER)
#error Unexpected target platform. See 'thrift --help' for details.
#endif

#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable CS0618   // silence our own deprecation warnings
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Apache.Hive.Service.Rpc.Thrift
{

  public partial class TSparkArrowBatch : TBase
  {

    public byte[] Batch { get; set; }

    public long RowCount { get; set; }

    public TSparkArrowBatch()
    {
    }

    public TSparkArrowBatch(byte[] @batch, long rowCount) : this()
    {
      this.Batch = @batch;
      this.RowCount = rowCount;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_batch = false;
        bool isset_rowCount = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Batch = await iprot.ReadBinaryAsync(cancellationToken);
                isset_batch = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I64)
              {
                RowCount = await iprot.ReadI64Async(cancellationToken);
                isset_rowCount = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default:
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_batch)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_rowCount)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp195 = new TStruct("TSparkArrowBatch");
        await oprot.WriteStructBeginAsync(tmp195, cancellationToken);
        var tmp196 = new TField();
        if((Batch != null))
        {
          tmp196.Name = "batch";
          tmp196.Type = TType.String;
          tmp196.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp196, cancellationToken);
          await oprot.WriteBinaryAsync(Batch, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        tmp196.Name = "rowCount";
        tmp196.Type = TType.I64;
        tmp196.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp196, cancellationToken);
        await oprot.WriteI64Async(RowCount, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is TSparkArrowBatch other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return TCollections.Equals(Batch, other.Batch)
        && global::System.Object.Equals(RowCount, other.RowCount);
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Batch != null))
        {
          hashcode = (hashcode * 397) + Batch.GetHashCode();
        }
        hashcode = (hashcode * 397) + RowCount.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp197 = new StringBuilder("TSparkArrowBatch(");
      if((Batch != null))
      {
        tmp197.Append(", Batch: ");
        Batch.ToString(tmp197);
      }
      tmp197.Append(", RowCount: ");
      RowCount.ToString(tmp197);
      tmp197.Append(')');
      return tmp197.ToString();
    }
  }

}

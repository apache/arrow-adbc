/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.21.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


// targeting netstandard 2.x
#if(! NETSTANDARD2_0_OR_GREATER && ! NET6_0_OR_GREATER && ! NET472_OR_GREATER)
#error Unexpected target platform. See 'thrift --help' for details.
#endif

#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable CS0618   // silence our own deprecation warnings
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Apache.Hive.Service.Rpc.Thrift
{

  public partial class TSQLVariable : TBase
  {
    private string _catalogName;
    private string _schemaName;
    private string _variableName;
    private string _defaultExpressionSQL;
    private string _variableDataType;
    private string _currentValue;

    public string CatalogName
    {
      get
      {
        return _catalogName;
      }
      set
      {
        __isset.catalogName = true;
        this._catalogName = value;
      }
    }

    public string SchemaName
    {
      get
      {
        return _schemaName;
      }
      set
      {
        __isset.schemaName = true;
        this._schemaName = value;
      }
    }

    public string VariableName
    {
      get
      {
        return _variableName;
      }
      set
      {
        __isset.variableName = true;
        this._variableName = value;
      }
    }

    public string DefaultExpressionSQL
    {
      get
      {
        return _defaultExpressionSQL;
      }
      set
      {
        __isset.defaultExpressionSQL = true;
        this._defaultExpressionSQL = value;
      }
    }

    public string VariableDataType
    {
      get
      {
        return _variableDataType;
      }
      set
      {
        __isset.variableDataType = true;
        this._variableDataType = value;
      }
    }

    public string CurrentValue
    {
      get
      {
        return _currentValue;
      }
      set
      {
        __isset.currentValue = true;
        this._currentValue = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool catalogName;
      public bool schemaName;
      public bool variableName;
      public bool defaultExpressionSQL;
      public bool variableDataType;
      public bool currentValue;
    }

    public TSQLVariable()
    {
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                CatalogName = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                SchemaName = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                VariableName = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.String)
              {
                DefaultExpressionSQL = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.String)
              {
                VariableDataType = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.String)
              {
                CurrentValue = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default:
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp262 = new TStruct("TSQLVariable");
        await oprot.WriteStructBeginAsync(tmp262, cancellationToken);
        var tmp263 = new TField();
        if((CatalogName != null) && __isset.catalogName)
        {
          tmp263.Name = "catalogName";
          tmp263.Type = TType.String;
          tmp263.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp263, cancellationToken);
          await oprot.WriteStringAsync(CatalogName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((SchemaName != null) && __isset.schemaName)
        {
          tmp263.Name = "schemaName";
          tmp263.Type = TType.String;
          tmp263.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp263, cancellationToken);
          await oprot.WriteStringAsync(SchemaName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((VariableName != null) && __isset.variableName)
        {
          tmp263.Name = "variableName";
          tmp263.Type = TType.String;
          tmp263.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp263, cancellationToken);
          await oprot.WriteStringAsync(VariableName, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((DefaultExpressionSQL != null) && __isset.defaultExpressionSQL)
        {
          tmp263.Name = "defaultExpressionSQL";
          tmp263.Type = TType.String;
          tmp263.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp263, cancellationToken);
          await oprot.WriteStringAsync(DefaultExpressionSQL, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((VariableDataType != null) && __isset.variableDataType)
        {
          tmp263.Name = "variableDataType";
          tmp263.Type = TType.String;
          tmp263.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp263, cancellationToken);
          await oprot.WriteStringAsync(VariableDataType, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((CurrentValue != null) && __isset.currentValue)
        {
          tmp263.Name = "currentValue";
          tmp263.Type = TType.String;
          tmp263.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp263, cancellationToken);
          await oprot.WriteStringAsync(CurrentValue, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is TSQLVariable other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.catalogName == other.__isset.catalogName) && ((!__isset.catalogName) || (global::System.Object.Equals(CatalogName, other.CatalogName))))
        && ((__isset.schemaName == other.__isset.schemaName) && ((!__isset.schemaName) || (global::System.Object.Equals(SchemaName, other.SchemaName))))
        && ((__isset.variableName == other.__isset.variableName) && ((!__isset.variableName) || (global::System.Object.Equals(VariableName, other.VariableName))))
        && ((__isset.defaultExpressionSQL == other.__isset.defaultExpressionSQL) && ((!__isset.defaultExpressionSQL) || (global::System.Object.Equals(DefaultExpressionSQL, other.DefaultExpressionSQL))))
        && ((__isset.variableDataType == other.__isset.variableDataType) && ((!__isset.variableDataType) || (global::System.Object.Equals(VariableDataType, other.VariableDataType))))
        && ((__isset.currentValue == other.__isset.currentValue) && ((!__isset.currentValue) || (global::System.Object.Equals(CurrentValue, other.CurrentValue))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((CatalogName != null) && __isset.catalogName)
        {
          hashcode = (hashcode * 397) + CatalogName.GetHashCode();
        }
        if((SchemaName != null) && __isset.schemaName)
        {
          hashcode = (hashcode * 397) + SchemaName.GetHashCode();
        }
        if((VariableName != null) && __isset.variableName)
        {
          hashcode = (hashcode * 397) + VariableName.GetHashCode();
        }
        if((DefaultExpressionSQL != null) && __isset.defaultExpressionSQL)
        {
          hashcode = (hashcode * 397) + DefaultExpressionSQL.GetHashCode();
        }
        if((VariableDataType != null) && __isset.variableDataType)
        {
          hashcode = (hashcode * 397) + VariableDataType.GetHashCode();
        }
        if((CurrentValue != null) && __isset.currentValue)
        {
          hashcode = (hashcode * 397) + CurrentValue.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp264 = new StringBuilder("TSQLVariable(");
      int tmp265 = 0;
      if((CatalogName != null) && __isset.catalogName)
      {
        if(0 < tmp265++) { tmp264.Append(", "); }
        tmp264.Append("CatalogName: ");
        CatalogName.ToString(tmp264);
      }
      if((SchemaName != null) && __isset.schemaName)
      {
        if(0 < tmp265++) { tmp264.Append(", "); }
        tmp264.Append("SchemaName: ");
        SchemaName.ToString(tmp264);
      }
      if((VariableName != null) && __isset.variableName)
      {
        if(0 < tmp265++) { tmp264.Append(", "); }
        tmp264.Append("VariableName: ");
        VariableName.ToString(tmp264);
      }
      if((DefaultExpressionSQL != null) && __isset.defaultExpressionSQL)
      {
        if(0 < tmp265++) { tmp264.Append(", "); }
        tmp264.Append("DefaultExpressionSQL: ");
        DefaultExpressionSQL.ToString(tmp264);
      }
      if((VariableDataType != null) && __isset.variableDataType)
      {
        if(0 < tmp265++) { tmp264.Append(", "); }
        tmp264.Append("VariableDataType: ");
        VariableDataType.ToString(tmp264);
      }
      if((CurrentValue != null) && __isset.currentValue)
      {
        if(0 < tmp265++) { tmp264.Append(", "); }
        tmp264.Append("CurrentValue: ");
        CurrentValue.ToString(tmp264);
      }
      tmp264.Append(')');
      return tmp264.ToString();
    }
  }

}

/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.21.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


// targeting netstandard 2.x
#if(! NETSTANDARD2_0_OR_GREATER && ! NET6_0_OR_GREATER && ! NET472_OR_GREATER)
#error Unexpected target platform. See 'thrift --help' for details.
#endif

#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable CS0618   // silence our own deprecation warnings
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Apache.Hive.Service.Rpc.Thrift
{

  internal partial class TRowSet : TBase
  {
    private List<global::Apache.Hive.Service.Rpc.Thrift.TColumn> _columns;
    private byte[] _binaryColumns;
    private int _columnCount;
    private List<global::Apache.Hive.Service.Rpc.Thrift.TSparkArrowBatch> _arrowBatches;
    private List<global::Apache.Hive.Service.Rpc.Thrift.TSparkArrowResultLink> _resultLinks;
    private List<global::Apache.Hive.Service.Rpc.Thrift.TDBSqlCloudResultFile> _cloudFetchResults;
    private byte[] _smallInlineCloudResult;

    public long StartRowOffset { get; set; }

    public List<global::Apache.Hive.Service.Rpc.Thrift.TRow> Rows { get; set; }

    public List<global::Apache.Hive.Service.Rpc.Thrift.TColumn> Columns
    {
      get
      {
        return _columns;
      }
      set
      {
        __isset.@columns = true;
        this._columns = value;
      }
    }

    public byte[] BinaryColumns
    {
      get
      {
        return _binaryColumns;
      }
      set
      {
        __isset.binaryColumns = true;
        this._binaryColumns = value;
      }
    }

    public int ColumnCount
    {
      get
      {
        return _columnCount;
      }
      set
      {
        __isset.columnCount = true;
        this._columnCount = value;
      }
    }

    public List<global::Apache.Hive.Service.Rpc.Thrift.TSparkArrowBatch> ArrowBatches
    {
      get
      {
        return _arrowBatches;
      }
      set
      {
        __isset.arrowBatches = true;
        this._arrowBatches = value;
      }
    }

    public List<global::Apache.Hive.Service.Rpc.Thrift.TSparkArrowResultLink> ResultLinks
    {
      get
      {
        return _resultLinks;
      }
      set
      {
        __isset.resultLinks = true;
        this._resultLinks = value;
      }
    }

    public List<global::Apache.Hive.Service.Rpc.Thrift.TDBSqlCloudResultFile> CloudFetchResults
    {
      get
      {
        return _cloudFetchResults;
      }
      set
      {
        __isset.cloudFetchResults = true;
        this._cloudFetchResults = value;
      }
    }

    public byte[] SmallInlineCloudResult
    {
      get
      {
        return _smallInlineCloudResult;
      }
      set
      {
        __isset.smallInlineCloudResult = true;
        this._smallInlineCloudResult = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool @columns;
      public bool binaryColumns;
      public bool columnCount;
      public bool arrowBatches;
      public bool resultLinks;
      public bool cloudFetchResults;
      public bool smallInlineCloudResult;
    }

    public TRowSet()
    {
    }

    public TRowSet(long startRowOffset, List<global::Apache.Hive.Service.Rpc.Thrift.TRow> @rows) : this()
    {
      this.StartRowOffset = startRowOffset;
      this.Rows = @rows;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_startRowOffset = false;
        bool isset_rows = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64)
              {
                StartRowOffset = await iprot.ReadI64Async(cancellationToken);
                isset_startRowOffset = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.List)
              {
                {
                  var _list217 = await iprot.ReadListBeginAsync(cancellationToken);
                  Rows = new List<global::Apache.Hive.Service.Rpc.Thrift.TRow>(_list217.Count);
                  for(int _i218 = 0; _i218 < _list217.Count; ++_i218)
                  {
                    global::Apache.Hive.Service.Rpc.Thrift.TRow _elem219;
                    _elem219 = new global::Apache.Hive.Service.Rpc.Thrift.TRow();
                    await _elem219.ReadAsync(iprot, cancellationToken);
                    Rows.Add(_elem219);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
                isset_rows = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.List)
              {
                {
                  var _list220 = await iprot.ReadListBeginAsync(cancellationToken);
                  Columns = new List<global::Apache.Hive.Service.Rpc.Thrift.TColumn>(_list220.Count);
                  for(int _i221 = 0; _i221 < _list220.Count; ++_i221)
                  {
                    global::Apache.Hive.Service.Rpc.Thrift.TColumn _elem222;
                    _elem222 = new global::Apache.Hive.Service.Rpc.Thrift.TColumn();
                    await _elem222.ReadAsync(iprot, cancellationToken);
                    Columns.Add(_elem222);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.String)
              {
                BinaryColumns = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.I32)
              {
                ColumnCount = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1281:
              if (field.Type == TType.List)
              {
                {
                  var _list223 = await iprot.ReadListBeginAsync(cancellationToken);
                  ArrowBatches = new List<global::Apache.Hive.Service.Rpc.Thrift.TSparkArrowBatch>(_list223.Count);
                  for(int _i224 = 0; _i224 < _list223.Count; ++_i224)
                  {
                    global::Apache.Hive.Service.Rpc.Thrift.TSparkArrowBatch _elem225;
                    _elem225 = new global::Apache.Hive.Service.Rpc.Thrift.TSparkArrowBatch();
                    await _elem225.ReadAsync(iprot, cancellationToken);
                    ArrowBatches.Add(_elem225);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1282:
              if (field.Type == TType.List)
              {
                {
                  var _list226 = await iprot.ReadListBeginAsync(cancellationToken);
                  ResultLinks = new List<global::Apache.Hive.Service.Rpc.Thrift.TSparkArrowResultLink>(_list226.Count);
                  for(int _i227 = 0; _i227 < _list226.Count; ++_i227)
                  {
                    global::Apache.Hive.Service.Rpc.Thrift.TSparkArrowResultLink _elem228;
                    _elem228 = new global::Apache.Hive.Service.Rpc.Thrift.TSparkArrowResultLink();
                    await _elem228.ReadAsync(iprot, cancellationToken);
                    ResultLinks.Add(_elem228);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3329:
              if (field.Type == TType.List)
              {
                {
                  var _list229 = await iprot.ReadListBeginAsync(cancellationToken);
                  CloudFetchResults = new List<global::Apache.Hive.Service.Rpc.Thrift.TDBSqlCloudResultFile>(_list229.Count);
                  for(int _i230 = 0; _i230 < _list229.Count; ++_i230)
                  {
                    global::Apache.Hive.Service.Rpc.Thrift.TDBSqlCloudResultFile _elem231;
                    _elem231 = new global::Apache.Hive.Service.Rpc.Thrift.TDBSqlCloudResultFile();
                    await _elem231.ReadAsync(iprot, cancellationToken);
                    CloudFetchResults.Add(_elem231);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3330:
              if (field.Type == TType.String)
              {
                SmallInlineCloudResult = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default:
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_startRowOffset)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_rows)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp232 = new TStruct("TRowSet");
        await oprot.WriteStructBeginAsync(tmp232, cancellationToken);
        var tmp233 = new TField();
        tmp233.Name = "startRowOffset";
        tmp233.Type = TType.I64;
        tmp233.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp233, cancellationToken);
        await oprot.WriteI64Async(StartRowOffset, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if((Rows != null))
        {
          tmp233.Name = "rows";
          tmp233.Type = TType.List;
          tmp233.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp233, cancellationToken);
          await oprot.WriteListBeginAsync(new TList(TType.Struct, Rows.Count), cancellationToken);
          foreach (global::Apache.Hive.Service.Rpc.Thrift.TRow _iter234 in Rows)
          {
            await _iter234.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Columns != null) && __isset.@columns)
        {
          tmp233.Name = "columns";
          tmp233.Type = TType.List;
          tmp233.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp233, cancellationToken);
          await oprot.WriteListBeginAsync(new TList(TType.Struct, Columns.Count), cancellationToken);
          foreach (global::Apache.Hive.Service.Rpc.Thrift.TColumn _iter235 in Columns)
          {
            await _iter235.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((BinaryColumns != null) && __isset.binaryColumns)
        {
          tmp233.Name = "binaryColumns";
          tmp233.Type = TType.String;
          tmp233.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp233, cancellationToken);
          await oprot.WriteBinaryAsync(BinaryColumns, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.columnCount)
        {
          tmp233.Name = "columnCount";
          tmp233.Type = TType.I32;
          tmp233.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp233, cancellationToken);
          await oprot.WriteI32Async(ColumnCount, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((ArrowBatches != null) && __isset.arrowBatches)
        {
          tmp233.Name = "arrowBatches";
          tmp233.Type = TType.List;
          tmp233.ID = 1281;
          await oprot.WriteFieldBeginAsync(tmp233, cancellationToken);
          await oprot.WriteListBeginAsync(new TList(TType.Struct, ArrowBatches.Count), cancellationToken);
          foreach (global::Apache.Hive.Service.Rpc.Thrift.TSparkArrowBatch _iter236 in ArrowBatches)
          {
            await _iter236.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((ResultLinks != null) && __isset.resultLinks)
        {
          tmp233.Name = "resultLinks";
          tmp233.Type = TType.List;
          tmp233.ID = 1282;
          await oprot.WriteFieldBeginAsync(tmp233, cancellationToken);
          await oprot.WriteListBeginAsync(new TList(TType.Struct, ResultLinks.Count), cancellationToken);
          foreach (global::Apache.Hive.Service.Rpc.Thrift.TSparkArrowResultLink _iter237 in ResultLinks)
          {
            await _iter237.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((CloudFetchResults != null) && __isset.cloudFetchResults)
        {
          tmp233.Name = "cloudFetchResults";
          tmp233.Type = TType.List;
          tmp233.ID = 3329;
          await oprot.WriteFieldBeginAsync(tmp233, cancellationToken);
          await oprot.WriteListBeginAsync(new TList(TType.Struct, CloudFetchResults.Count), cancellationToken);
          foreach (global::Apache.Hive.Service.Rpc.Thrift.TDBSqlCloudResultFile _iter238 in CloudFetchResults)
          {
            await _iter238.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((SmallInlineCloudResult != null) && __isset.smallInlineCloudResult)
        {
          tmp233.Name = "smallInlineCloudResult";
          tmp233.Type = TType.String;
          tmp233.ID = 3330;
          await oprot.WriteFieldBeginAsync(tmp233, cancellationToken);
          await oprot.WriteBinaryAsync(SmallInlineCloudResult, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is TRowSet other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return global::System.Object.Equals(StartRowOffset, other.StartRowOffset)
        && TCollections.Equals(Rows, other.Rows)
        && ((__isset.@columns == other.__isset.@columns) && ((!__isset.@columns) || (TCollections.Equals(Columns, other.Columns))))
        && ((__isset.binaryColumns == other.__isset.binaryColumns) && ((!__isset.binaryColumns) || (TCollections.Equals(BinaryColumns, other.BinaryColumns))))
        && ((__isset.columnCount == other.__isset.columnCount) && ((!__isset.columnCount) || (global::System.Object.Equals(ColumnCount, other.ColumnCount))))
        && ((__isset.arrowBatches == other.__isset.arrowBatches) && ((!__isset.arrowBatches) || (TCollections.Equals(ArrowBatches, other.ArrowBatches))))
        && ((__isset.resultLinks == other.__isset.resultLinks) && ((!__isset.resultLinks) || (TCollections.Equals(ResultLinks, other.ResultLinks))))
        && ((__isset.cloudFetchResults == other.__isset.cloudFetchResults) && ((!__isset.cloudFetchResults) || (TCollections.Equals(CloudFetchResults, other.CloudFetchResults))))
        && ((__isset.smallInlineCloudResult == other.__isset.smallInlineCloudResult) && ((!__isset.smallInlineCloudResult) || (TCollections.Equals(SmallInlineCloudResult, other.SmallInlineCloudResult))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        hashcode = (hashcode * 397) + StartRowOffset.GetHashCode();
        if((Rows != null))
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Rows);
        }
        if((Columns != null) && __isset.@columns)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Columns);
        }
        if((BinaryColumns != null) && __isset.binaryColumns)
        {
          hashcode = (hashcode * 397) + BinaryColumns.GetHashCode();
        }
        if(__isset.columnCount)
        {
          hashcode = (hashcode * 397) + ColumnCount.GetHashCode();
        }
        if((ArrowBatches != null) && __isset.arrowBatches)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(ArrowBatches);
        }
        if((ResultLinks != null) && __isset.resultLinks)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(ResultLinks);
        }
        if((CloudFetchResults != null) && __isset.cloudFetchResults)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(CloudFetchResults);
        }
        if((SmallInlineCloudResult != null) && __isset.smallInlineCloudResult)
        {
          hashcode = (hashcode * 397) + SmallInlineCloudResult.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp239 = new StringBuilder("TRowSet(");
      tmp239.Append(", StartRowOffset: ");
      StartRowOffset.ToString(tmp239);
      if((Rows != null))
      {
        tmp239.Append(", Rows: ");
        Rows.ToString(tmp239);
      }
      if((Columns != null) && __isset.@columns)
      {
        tmp239.Append(", Columns: ");
        Columns.ToString(tmp239);
      }
      if((BinaryColumns != null) && __isset.binaryColumns)
      {
        tmp239.Append(", BinaryColumns: ");
        BinaryColumns.ToString(tmp239);
      }
      if(__isset.columnCount)
      {
        tmp239.Append(", ColumnCount: ");
        ColumnCount.ToString(tmp239);
      }
      if((ArrowBatches != null) && __isset.arrowBatches)
      {
        tmp239.Append(", ArrowBatches: ");
        ArrowBatches.ToString(tmp239);
      }
      if((ResultLinks != null) && __isset.resultLinks)
      {
        tmp239.Append(", ResultLinks: ");
        ResultLinks.ToString(tmp239);
      }
      if((CloudFetchResults != null) && __isset.cloudFetchResults)
      {
        tmp239.Append(", CloudFetchResults: ");
        CloudFetchResults.ToString(tmp239);
      }
      if((SmallInlineCloudResult != null) && __isset.smallInlineCloudResult)
      {
        tmp239.Append(", SmallInlineCloudResult: ");
        SmallInlineCloudResult.ToString(tmp239);
      }
      tmp239.Append(')');
      return tmp239.ToString();
    }
  }

}

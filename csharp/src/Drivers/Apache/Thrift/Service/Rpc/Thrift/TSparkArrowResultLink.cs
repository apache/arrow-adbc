/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Apache.Hive.Service.Rpc.Thrift
{

  public partial class TSparkArrowResultLink : TBase
  {

    public string FileLink { get; set; }

    public long ExpiryTime { get; set; }

    public long StartRowOffset { get; set; }

    public long RowCount { get; set; }

    public long BytesNum { get; set; }

    public TSparkArrowResultLink()
    {
    }

    public TSparkArrowResultLink(string fileLink, long expiryTime, long startRowOffset, long rowCount, long bytesNum) : this()
    {
      this.FileLink = fileLink;
      this.ExpiryTime = expiryTime;
      this.StartRowOffset = startRowOffset;
      this.RowCount = rowCount;
      this.BytesNum = bytesNum;
    }

    public TSparkArrowResultLink DeepCopy()
    {
      var tmp235 = new TSparkArrowResultLink();
      if ((FileLink != null))
      {
        tmp235.FileLink = this.FileLink;
      }
      tmp235.ExpiryTime = this.ExpiryTime;
      tmp235.StartRowOffset = this.StartRowOffset;
      tmp235.RowCount = this.RowCount;
      tmp235.BytesNum = this.BytesNum;
      return tmp235;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_fileLink = false;
        bool isset_expiryTime = false;
        bool isset_startRowOffset = false;
        bool isset_rowCount = false;
        bool isset_bytesNum = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                FileLink = await iprot.ReadStringAsync(cancellationToken);
                isset_fileLink = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I64)
              {
                ExpiryTime = await iprot.ReadI64Async(cancellationToken);
                isset_expiryTime = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I64)
              {
                StartRowOffset = await iprot.ReadI64Async(cancellationToken);
                isset_startRowOffset = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I64)
              {
                RowCount = await iprot.ReadI64Async(cancellationToken);
                isset_rowCount = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.I64)
              {
                BytesNum = await iprot.ReadI64Async(cancellationToken);
                isset_bytesNum = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default:
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_fileLink)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_expiryTime)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_startRowOffset)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_rowCount)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_bytesNum)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp236 = new TStruct("TSparkArrowResultLink");
        await oprot.WriteStructBeginAsync(tmp236, cancellationToken);
        var tmp237 = new TField();
        if ((FileLink != null))
        {
          tmp237.Name = "fileLink";
          tmp237.Type = TType.String;
          tmp237.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp237, cancellationToken);
          await oprot.WriteStringAsync(FileLink, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        tmp237.Name = "expiryTime";
        tmp237.Type = TType.I64;
        tmp237.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp237, cancellationToken);
        await oprot.WriteI64Async(ExpiryTime, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        tmp237.Name = "startRowOffset";
        tmp237.Type = TType.I64;
        tmp237.ID = 3;
        await oprot.WriteFieldBeginAsync(tmp237, cancellationToken);
        await oprot.WriteI64Async(StartRowOffset, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        tmp237.Name = "rowCount";
        tmp237.Type = TType.I64;
        tmp237.ID = 4;
        await oprot.WriteFieldBeginAsync(tmp237, cancellationToken);
        await oprot.WriteI64Async(RowCount, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        tmp237.Name = "bytesNum";
        tmp237.Type = TType.I64;
        tmp237.ID = 5;
        await oprot.WriteFieldBeginAsync(tmp237, cancellationToken);
        await oprot.WriteI64Async(BytesNum, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is TSparkArrowResultLink other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return global::System.Object.Equals(FileLink, other.FileLink)
        && global::System.Object.Equals(ExpiryTime, other.ExpiryTime)
        && global::System.Object.Equals(StartRowOffset, other.StartRowOffset)
        && global::System.Object.Equals(RowCount, other.RowCount)
        && global::System.Object.Equals(BytesNum, other.BytesNum);
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if ((FileLink != null))
        {
          hashcode = (hashcode * 397) + FileLink.GetHashCode();
        }
        hashcode = (hashcode * 397) + ExpiryTime.GetHashCode();
        hashcode = (hashcode * 397) + StartRowOffset.GetHashCode();
        hashcode = (hashcode * 397) + RowCount.GetHashCode();
        hashcode = (hashcode * 397) + BytesNum.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp238 = new StringBuilder("TSparkArrowResultLink(");
      if ((FileLink != null))
      {
        tmp238.Append(", FileLink: ");
        FileLink.ToString(tmp238);
      }
      tmp238.Append(", ExpiryTime: ");
      ExpiryTime.ToString(tmp238);
      tmp238.Append(", StartRowOffset: ");
      StartRowOffset.ToString(tmp238);
      tmp238.Append(", RowCount: ");
      RowCount.ToString(tmp238);
      tmp238.Append(", BytesNum: ");
      BytesNum.ToString(tmp238);
      tmp238.Append(')');
      return tmp238.ToString();
    }
  }

}

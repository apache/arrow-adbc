/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Apache.Hive.Service.Rpc.Thrift
{

  public partial class TPrimitiveTypeEntry : TBase
  {
    private global::Apache.Hive.Service.Rpc.Thrift.TTypeQualifiers _typeQualifiers;

    /// <summary>
    ///
    /// <seealso cref="global::Apache.Hive.Service.Rpc.Thrift.TTypeId"/>
    /// </summary>
    public global::Apache.Hive.Service.Rpc.Thrift.TTypeId Type { get; set; }

    public global::Apache.Hive.Service.Rpc.Thrift.TTypeQualifiers TypeQualifiers
    {
      get
      {
        return _typeQualifiers;
      }
      set
      {
        __isset.typeQualifiers = true;
        this._typeQualifiers = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool typeQualifiers;
    }

    public TPrimitiveTypeEntry()
    {
    }

    public TPrimitiveTypeEntry(global::Apache.Hive.Service.Rpc.Thrift.TTypeId type) : this()
    {
      this.Type = type;
    }

    public TPrimitiveTypeEntry DeepCopy()
    {
      var tmp15 = new TPrimitiveTypeEntry();
      tmp15.Type = this.Type;
      if ((TypeQualifiers != null) && __isset.typeQualifiers)
      {
        tmp15.TypeQualifiers = (global::Apache.Hive.Service.Rpc.Thrift.TTypeQualifiers)this.TypeQualifiers.DeepCopy();
      }
      tmp15.__isset.typeQualifiers = this.__isset.typeQualifiers;
      return tmp15;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_type = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Type = (global::Apache.Hive.Service.Rpc.Thrift.TTypeId)await iprot.ReadI32Async(cancellationToken);
                isset_type = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                TypeQualifiers = new global::Apache.Hive.Service.Rpc.Thrift.TTypeQualifiers();
                await TypeQualifiers.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default:
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_type)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp16 = new TStruct("TPrimitiveTypeEntry");
        await oprot.WriteStructBeginAsync(tmp16, cancellationToken);
        var tmp17 = new TField();
        tmp17.Name = "type";
        tmp17.Type = TType.I32;
        tmp17.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp17, cancellationToken);
        await oprot.WriteI32Async((int)Type, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if ((TypeQualifiers != null) && __isset.typeQualifiers)
        {
          tmp17.Name = "typeQualifiers";
          tmp17.Type = TType.Struct;
          tmp17.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp17, cancellationToken);
          await TypeQualifiers.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is TPrimitiveTypeEntry other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return global::System.Object.Equals(Type, other.Type)
        && ((__isset.typeQualifiers == other.__isset.typeQualifiers) && ((!__isset.typeQualifiers) || (global::System.Object.Equals(TypeQualifiers, other.TypeQualifiers))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        hashcode = (hashcode * 397) + Type.GetHashCode();
        if ((TypeQualifiers != null) && __isset.typeQualifiers)
        {
          hashcode = (hashcode * 397) + TypeQualifiers.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp18 = new StringBuilder("TPrimitiveTypeEntry(");
      tmp18.Append(", Type: ");
      Type.ToString(tmp18);
      if ((TypeQualifiers != null) && __isset.typeQualifiers)
      {
        tmp18.Append(", TypeQualifiers: ");
        TypeQualifiers.ToString(tmp18);
      }
      tmp18.Append(')');
      return tmp18.ToString();
    }
  }

}

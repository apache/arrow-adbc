/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Apache.Hive.Service.Rpc.Thrift
{

  public partial class THandleIdentifier : TBase
  {

    public byte[] Guid { get; set; }

    public byte[] Secret { get; set; }

    public THandleIdentifier()
    {
    }

    public THandleIdentifier(byte[] guid, byte[] secret) : this()
    {
      this.Guid = guid;
      this.Secret = secret;
    }

    public THandleIdentifier DeepCopy()
    {
      var tmp264 = new THandleIdentifier();
      if ((Guid != null))
      {
        tmp264.Guid = this.Guid.ToArray();
      }
      if ((Secret != null))
      {
        tmp264.Secret = this.Secret.ToArray();
      }
      return tmp264;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_guid = false;
        bool isset_secret = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Guid = await iprot.ReadBinaryAsync(cancellationToken);
                isset_guid = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Secret = await iprot.ReadBinaryAsync(cancellationToken);
                isset_secret = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default:
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_guid)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_secret)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp265 = new TStruct("THandleIdentifier");
        await oprot.WriteStructBeginAsync(tmp265, cancellationToken);
        var tmp266 = new TField();
        if ((Guid != null))
        {
          tmp266.Name = "guid";
          tmp266.Type = TType.String;
          tmp266.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp266, cancellationToken);
          await oprot.WriteBinaryAsync(Guid, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if ((Secret != null))
        {
          tmp266.Name = "secret";
          tmp266.Type = TType.String;
          tmp266.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp266, cancellationToken);
          await oprot.WriteBinaryAsync(Secret, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is THandleIdentifier other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return TCollections.Equals(Guid, other.Guid)
        && TCollections.Equals(Secret, other.Secret);
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if ((Guid != null))
        {
          hashcode = (hashcode * 397) + Guid.GetHashCode();
        }
        if ((Secret != null))
        {
          hashcode = (hashcode * 397) + Secret.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp267 = new StringBuilder("THandleIdentifier(");
      if ((Guid != null))
      {
        tmp267.Append(", Guid: ");
        Guid.ToString(tmp267);
      }
      if ((Secret != null))
      {
        tmp267.Append(", Secret: ");
        Secret.ToString(tmp267);
      }
      tmp267.Append(')');
      return tmp267.ToString();
    }
  }

}

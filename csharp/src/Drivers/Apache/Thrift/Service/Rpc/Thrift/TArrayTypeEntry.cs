/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.21.0)
 * BUT THIS FILE HAS BEEN HAND EDITED TO FIX A NULLABLE WARNING SO REGENERATE AT YOUR OWN RISK
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;

#nullable disable

// targeting netstandard 2.x
#if(! NETSTANDARD2_0_OR_GREATER && ! NET6_0_OR_GREATER && ! NET472_OR_GREATER)
#error Unexpected target platform. See 'thrift --help' for details.
#endif

#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable CS0618   // silence our own deprecation warnings
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Apache.Hive.Service.Rpc.Thrift
{

  public partial class TArrayTypeEntry : TBase
  {

    public int ObjectTypePtr { get; set; }

    public TArrayTypeEntry()
    {
    }

    public TArrayTypeEntry(int objectTypePtr) : this()
    {
      this.ObjectTypePtr = objectTypePtr;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_objectTypePtr = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                ObjectTypePtr = await iprot.ReadI32Async(cancellationToken);
                isset_objectTypePtr = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default:
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_objectTypePtr)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp17 = new TStruct("TArrayTypeEntry");
        await oprot.WriteStructBeginAsync(tmp17, cancellationToken);
        var tmp18 = new TField();
        tmp18.Name = "objectTypePtr";
        tmp18.Type = TType.I32;
        tmp18.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp18, cancellationToken);
        await oprot.WriteI32Async(ObjectTypePtr, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is TArrayTypeEntry other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return global::System.Object.Equals(ObjectTypePtr, other.ObjectTypePtr);
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        hashcode = (hashcode * 397) + ObjectTypePtr.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp19 = new StringBuilder("TArrayTypeEntry(");
      tmp19.Append(", ObjectTypePtr: ");
      ObjectTypePtr.ToString(tmp19);
      tmp19.Append(')');
      return tmp19.ToString();
    }
  }

}

/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * BUT THIS FILE HAS BEEN HAND EDITED TO DISABLE NULLABLE SO REGENERATE AT YOUR OWN RISK
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;

#nullable disable

#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Apache.Hive.Service.Rpc.Thrift
{
  public partial class TCLIService
  {
    public interface IAsync
    {
      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TOpenSessionResp> OpenSession(global::Apache.Hive.Service.Rpc.Thrift.TOpenSessionReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TCloseSessionResp> CloseSession(global::Apache.Hive.Service.Rpc.Thrift.TCloseSessionReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetInfoResp> GetInfo(global::Apache.Hive.Service.Rpc.Thrift.TGetInfoReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TExecuteStatementResp> ExecuteStatement(global::Apache.Hive.Service.Rpc.Thrift.TExecuteStatementReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetTypeInfoResp> GetTypeInfo(global::Apache.Hive.Service.Rpc.Thrift.TGetTypeInfoReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetCatalogsResp> GetCatalogs(global::Apache.Hive.Service.Rpc.Thrift.TGetCatalogsReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetSchemasResp> GetSchemas(global::Apache.Hive.Service.Rpc.Thrift.TGetSchemasReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetTablesResp> GetTables(global::Apache.Hive.Service.Rpc.Thrift.TGetTablesReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetTableTypesResp> GetTableTypes(global::Apache.Hive.Service.Rpc.Thrift.TGetTableTypesReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetColumnsResp> GetColumns(global::Apache.Hive.Service.Rpc.Thrift.TGetColumnsReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetFunctionsResp> GetFunctions(global::Apache.Hive.Service.Rpc.Thrift.TGetFunctionsReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetPrimaryKeysResp> GetPrimaryKeys(global::Apache.Hive.Service.Rpc.Thrift.TGetPrimaryKeysReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetCrossReferenceResp> GetCrossReference(global::Apache.Hive.Service.Rpc.Thrift.TGetCrossReferenceReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetOperationStatusResp> GetOperationStatus(global::Apache.Hive.Service.Rpc.Thrift.TGetOperationStatusReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TCancelOperationResp> CancelOperation(global::Apache.Hive.Service.Rpc.Thrift.TCancelOperationReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TCloseOperationResp> CloseOperation(global::Apache.Hive.Service.Rpc.Thrift.TCloseOperationReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetResultSetMetadataResp> GetResultSetMetadata(global::Apache.Hive.Service.Rpc.Thrift.TGetResultSetMetadataReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TFetchResultsResp> FetchResults(global::Apache.Hive.Service.Rpc.Thrift.TFetchResultsReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetDelegationTokenResp> GetDelegationToken(global::Apache.Hive.Service.Rpc.Thrift.TGetDelegationTokenReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TCancelDelegationTokenResp> CancelDelegationToken(global::Apache.Hive.Service.Rpc.Thrift.TCancelDelegationTokenReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TRenewDelegationTokenResp> RenewDelegationToken(global::Apache.Hive.Service.Rpc.Thrift.TRenewDelegationTokenReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetQueryIdResp> GetQueryId(global::Apache.Hive.Service.Rpc.Thrift.TGetQueryIdReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TSetClientInfoResp> SetClientInfo(global::Apache.Hive.Service.Rpc.Thrift.TSetClientInfoReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TUploadDataResp> UploadData(global::Apache.Hive.Service.Rpc.Thrift.TUploadDataReq req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TDownloadDataResp> DownloadData(global::Apache.Hive.Service.Rpc.Thrift.TDownloadDataReq req, CancellationToken cancellationToken = default);

    }


    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
      {
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TOpenSessionResp> OpenSession(global::Apache.Hive.Service.Rpc.Thrift.TOpenSessionReq req, CancellationToken cancellationToken = default)
      {
        await send_OpenSession(req, cancellationToken);
        return await recv_OpenSession(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_OpenSession(global::Apache.Hive.Service.Rpc.Thrift.TOpenSessionReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("OpenSession", TMessageType.Call, SeqId), cancellationToken);

        var tmp655 = new InternalStructs.OpenSession_args() {
          Req = req,
        };

        await tmp655.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TOpenSessionResp> recv_OpenSession(CancellationToken cancellationToken = default)
      {

        var tmp656 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp656.Type == TMessageType.Exception)
        {
          var tmp657 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp657;
        }

        var tmp658 = new InternalStructs.OpenSession_result();
        await tmp658.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp658.__isset.success)
        {
          return tmp658.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "OpenSession failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TCloseSessionResp> CloseSession(global::Apache.Hive.Service.Rpc.Thrift.TCloseSessionReq req, CancellationToken cancellationToken = default)
      {
        await send_CloseSession(req, cancellationToken);
        return await recv_CloseSession(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_CloseSession(global::Apache.Hive.Service.Rpc.Thrift.TCloseSessionReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("CloseSession", TMessageType.Call, SeqId), cancellationToken);

        var tmp659 = new InternalStructs.CloseSession_args() {
          Req = req,
        };

        await tmp659.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TCloseSessionResp> recv_CloseSession(CancellationToken cancellationToken = default)
      {

        var tmp660 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp660.Type == TMessageType.Exception)
        {
          var tmp661 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp661;
        }

        var tmp662 = new InternalStructs.CloseSession_result();
        await tmp662.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp662.__isset.success)
        {
          return tmp662.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CloseSession failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetInfoResp> GetInfo(global::Apache.Hive.Service.Rpc.Thrift.TGetInfoReq req, CancellationToken cancellationToken = default)
      {
        await send_GetInfo(req, cancellationToken);
        return await recv_GetInfo(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetInfo(global::Apache.Hive.Service.Rpc.Thrift.TGetInfoReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetInfo", TMessageType.Call, SeqId), cancellationToken);

        var tmp663 = new InternalStructs.GetInfo_args() {
          Req = req,
        };

        await tmp663.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetInfoResp> recv_GetInfo(CancellationToken cancellationToken = default)
      {

        var tmp664 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp664.Type == TMessageType.Exception)
        {
          var tmp665 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp665;
        }

        var tmp666 = new InternalStructs.GetInfo_result();
        await tmp666.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp666.__isset.success)
        {
          return tmp666.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetInfo failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TExecuteStatementResp> ExecuteStatement(global::Apache.Hive.Service.Rpc.Thrift.TExecuteStatementReq req, CancellationToken cancellationToken = default)
      {
        await send_ExecuteStatement(req, cancellationToken);
        return await recv_ExecuteStatement(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_ExecuteStatement(global::Apache.Hive.Service.Rpc.Thrift.TExecuteStatementReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("ExecuteStatement", TMessageType.Call, SeqId), cancellationToken);

        var tmp667 = new InternalStructs.ExecuteStatement_args() {
          Req = req,
        };

        await tmp667.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TExecuteStatementResp> recv_ExecuteStatement(CancellationToken cancellationToken = default)
      {

        var tmp668 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp668.Type == TMessageType.Exception)
        {
          var tmp669 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp669;
        }

        var tmp670 = new InternalStructs.ExecuteStatement_result();
        await tmp670.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp670.__isset.success)
        {
          return tmp670.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ExecuteStatement failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetTypeInfoResp> GetTypeInfo(global::Apache.Hive.Service.Rpc.Thrift.TGetTypeInfoReq req, CancellationToken cancellationToken = default)
      {
        await send_GetTypeInfo(req, cancellationToken);
        return await recv_GetTypeInfo(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetTypeInfo(global::Apache.Hive.Service.Rpc.Thrift.TGetTypeInfoReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetTypeInfo", TMessageType.Call, SeqId), cancellationToken);

        var tmp671 = new InternalStructs.GetTypeInfo_args() {
          Req = req,
        };

        await tmp671.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetTypeInfoResp> recv_GetTypeInfo(CancellationToken cancellationToken = default)
      {

        var tmp672 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp672.Type == TMessageType.Exception)
        {
          var tmp673 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp673;
        }

        var tmp674 = new InternalStructs.GetTypeInfo_result();
        await tmp674.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp674.__isset.success)
        {
          return tmp674.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetTypeInfo failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetCatalogsResp> GetCatalogs(global::Apache.Hive.Service.Rpc.Thrift.TGetCatalogsReq req, CancellationToken cancellationToken = default)
      {
        await send_GetCatalogs(req, cancellationToken);
        return await recv_GetCatalogs(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetCatalogs(global::Apache.Hive.Service.Rpc.Thrift.TGetCatalogsReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetCatalogs", TMessageType.Call, SeqId), cancellationToken);

        var tmp675 = new InternalStructs.GetCatalogs_args() {
          Req = req,
        };

        await tmp675.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetCatalogsResp> recv_GetCatalogs(CancellationToken cancellationToken = default)
      {

        var tmp676 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp676.Type == TMessageType.Exception)
        {
          var tmp677 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp677;
        }

        var tmp678 = new InternalStructs.GetCatalogs_result();
        await tmp678.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp678.__isset.success)
        {
          return tmp678.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetCatalogs failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetSchemasResp> GetSchemas(global::Apache.Hive.Service.Rpc.Thrift.TGetSchemasReq req, CancellationToken cancellationToken = default)
      {
        await send_GetSchemas(req, cancellationToken);
        return await recv_GetSchemas(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetSchemas(global::Apache.Hive.Service.Rpc.Thrift.TGetSchemasReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetSchemas", TMessageType.Call, SeqId), cancellationToken);

        var tmp679 = new InternalStructs.GetSchemas_args() {
          Req = req,
        };

        await tmp679.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetSchemasResp> recv_GetSchemas(CancellationToken cancellationToken = default)
      {

        var tmp680 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp680.Type == TMessageType.Exception)
        {
          var tmp681 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp681;
        }

        var tmp682 = new InternalStructs.GetSchemas_result();
        await tmp682.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp682.__isset.success)
        {
          return tmp682.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetSchemas failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetTablesResp> GetTables(global::Apache.Hive.Service.Rpc.Thrift.TGetTablesReq req, CancellationToken cancellationToken = default)
      {
        await send_GetTables(req, cancellationToken);
        return await recv_GetTables(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetTables(global::Apache.Hive.Service.Rpc.Thrift.TGetTablesReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetTables", TMessageType.Call, SeqId), cancellationToken);

        var tmp683 = new InternalStructs.GetTables_args() {
          Req = req,
        };

        await tmp683.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetTablesResp> recv_GetTables(CancellationToken cancellationToken = default)
      {

        var tmp684 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp684.Type == TMessageType.Exception)
        {
          var tmp685 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp685;
        }

        var tmp686 = new InternalStructs.GetTables_result();
        await tmp686.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp686.__isset.success)
        {
          return tmp686.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetTables failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetTableTypesResp> GetTableTypes(global::Apache.Hive.Service.Rpc.Thrift.TGetTableTypesReq req, CancellationToken cancellationToken = default)
      {
        await send_GetTableTypes(req, cancellationToken);
        return await recv_GetTableTypes(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetTableTypes(global::Apache.Hive.Service.Rpc.Thrift.TGetTableTypesReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetTableTypes", TMessageType.Call, SeqId), cancellationToken);

        var tmp687 = new InternalStructs.GetTableTypes_args() {
          Req = req,
        };

        await tmp687.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetTableTypesResp> recv_GetTableTypes(CancellationToken cancellationToken = default)
      {

        var tmp688 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp688.Type == TMessageType.Exception)
        {
          var tmp689 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp689;
        }

        var tmp690 = new InternalStructs.GetTableTypes_result();
        await tmp690.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp690.__isset.success)
        {
          return tmp690.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetTableTypes failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetColumnsResp> GetColumns(global::Apache.Hive.Service.Rpc.Thrift.TGetColumnsReq req, CancellationToken cancellationToken = default)
      {
        await send_GetColumns(req, cancellationToken);
        return await recv_GetColumns(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetColumns(global::Apache.Hive.Service.Rpc.Thrift.TGetColumnsReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetColumns", TMessageType.Call, SeqId), cancellationToken);

        var tmp691 = new InternalStructs.GetColumns_args() {
          Req = req,
        };

        await tmp691.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetColumnsResp> recv_GetColumns(CancellationToken cancellationToken = default)
      {

        var tmp692 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp692.Type == TMessageType.Exception)
        {
          var tmp693 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp693;
        }

        var tmp694 = new InternalStructs.GetColumns_result();
        await tmp694.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp694.__isset.success)
        {
          return tmp694.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetColumns failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetFunctionsResp> GetFunctions(global::Apache.Hive.Service.Rpc.Thrift.TGetFunctionsReq req, CancellationToken cancellationToken = default)
      {
        await send_GetFunctions(req, cancellationToken);
        return await recv_GetFunctions(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetFunctions(global::Apache.Hive.Service.Rpc.Thrift.TGetFunctionsReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetFunctions", TMessageType.Call, SeqId), cancellationToken);

        var tmp695 = new InternalStructs.GetFunctions_args() {
          Req = req,
        };

        await tmp695.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetFunctionsResp> recv_GetFunctions(CancellationToken cancellationToken = default)
      {

        var tmp696 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp696.Type == TMessageType.Exception)
        {
          var tmp697 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp697;
        }

        var tmp698 = new InternalStructs.GetFunctions_result();
        await tmp698.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp698.__isset.success)
        {
          return tmp698.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetFunctions failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetPrimaryKeysResp> GetPrimaryKeys(global::Apache.Hive.Service.Rpc.Thrift.TGetPrimaryKeysReq req, CancellationToken cancellationToken = default)
      {
        await send_GetPrimaryKeys(req, cancellationToken);
        return await recv_GetPrimaryKeys(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetPrimaryKeys(global::Apache.Hive.Service.Rpc.Thrift.TGetPrimaryKeysReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetPrimaryKeys", TMessageType.Call, SeqId), cancellationToken);

        var tmp699 = new InternalStructs.GetPrimaryKeys_args() {
          Req = req,
        };

        await tmp699.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetPrimaryKeysResp> recv_GetPrimaryKeys(CancellationToken cancellationToken = default)
      {

        var tmp700 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp700.Type == TMessageType.Exception)
        {
          var tmp701 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp701;
        }

        var tmp702 = new InternalStructs.GetPrimaryKeys_result();
        await tmp702.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp702.__isset.success)
        {
          return tmp702.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetPrimaryKeys failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetCrossReferenceResp> GetCrossReference(global::Apache.Hive.Service.Rpc.Thrift.TGetCrossReferenceReq req, CancellationToken cancellationToken = default)
      {
        await send_GetCrossReference(req, cancellationToken);
        return await recv_GetCrossReference(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetCrossReference(global::Apache.Hive.Service.Rpc.Thrift.TGetCrossReferenceReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetCrossReference", TMessageType.Call, SeqId), cancellationToken);

        var tmp703 = new InternalStructs.GetCrossReference_args() {
          Req = req,
        };

        await tmp703.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetCrossReferenceResp> recv_GetCrossReference(CancellationToken cancellationToken = default)
      {

        var tmp704 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp704.Type == TMessageType.Exception)
        {
          var tmp705 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp705;
        }

        var tmp706 = new InternalStructs.GetCrossReference_result();
        await tmp706.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp706.__isset.success)
        {
          return tmp706.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetCrossReference failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetOperationStatusResp> GetOperationStatus(global::Apache.Hive.Service.Rpc.Thrift.TGetOperationStatusReq req, CancellationToken cancellationToken = default)
      {
        await send_GetOperationStatus(req, cancellationToken);
        return await recv_GetOperationStatus(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetOperationStatus(global::Apache.Hive.Service.Rpc.Thrift.TGetOperationStatusReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetOperationStatus", TMessageType.Call, SeqId), cancellationToken);

        var tmp707 = new InternalStructs.GetOperationStatus_args() {
          Req = req,
        };

        await tmp707.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetOperationStatusResp> recv_GetOperationStatus(CancellationToken cancellationToken = default)
      {

        var tmp708 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp708.Type == TMessageType.Exception)
        {
          var tmp709 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp709;
        }

        var tmp710 = new InternalStructs.GetOperationStatus_result();
        await tmp710.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp710.__isset.success)
        {
          return tmp710.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetOperationStatus failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TCancelOperationResp> CancelOperation(global::Apache.Hive.Service.Rpc.Thrift.TCancelOperationReq req, CancellationToken cancellationToken = default)
      {
        await send_CancelOperation(req, cancellationToken);
        return await recv_CancelOperation(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_CancelOperation(global::Apache.Hive.Service.Rpc.Thrift.TCancelOperationReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("CancelOperation", TMessageType.Call, SeqId), cancellationToken);

        var tmp711 = new InternalStructs.CancelOperation_args() {
          Req = req,
        };

        await tmp711.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TCancelOperationResp> recv_CancelOperation(CancellationToken cancellationToken = default)
      {

        var tmp712 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp712.Type == TMessageType.Exception)
        {
          var tmp713 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp713;
        }

        var tmp714 = new InternalStructs.CancelOperation_result();
        await tmp714.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp714.__isset.success)
        {
          return tmp714.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CancelOperation failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TCloseOperationResp> CloseOperation(global::Apache.Hive.Service.Rpc.Thrift.TCloseOperationReq req, CancellationToken cancellationToken = default)
      {
        await send_CloseOperation(req, cancellationToken);
        return await recv_CloseOperation(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_CloseOperation(global::Apache.Hive.Service.Rpc.Thrift.TCloseOperationReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("CloseOperation", TMessageType.Call, SeqId), cancellationToken);

        var tmp715 = new InternalStructs.CloseOperation_args() {
          Req = req,
        };

        await tmp715.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TCloseOperationResp> recv_CloseOperation(CancellationToken cancellationToken = default)
      {

        var tmp716 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp716.Type == TMessageType.Exception)
        {
          var tmp717 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp717;
        }

        var tmp718 = new InternalStructs.CloseOperation_result();
        await tmp718.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp718.__isset.success)
        {
          return tmp718.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CloseOperation failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetResultSetMetadataResp> GetResultSetMetadata(global::Apache.Hive.Service.Rpc.Thrift.TGetResultSetMetadataReq req, CancellationToken cancellationToken = default)
      {
        await send_GetResultSetMetadata(req, cancellationToken);
        return await recv_GetResultSetMetadata(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetResultSetMetadata(global::Apache.Hive.Service.Rpc.Thrift.TGetResultSetMetadataReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetResultSetMetadata", TMessageType.Call, SeqId), cancellationToken);

        var tmp719 = new InternalStructs.GetResultSetMetadata_args() {
          Req = req,
        };

        await tmp719.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetResultSetMetadataResp> recv_GetResultSetMetadata(CancellationToken cancellationToken = default)
      {

        var tmp720 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp720.Type == TMessageType.Exception)
        {
          var tmp721 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp721;
        }

        var tmp722 = new InternalStructs.GetResultSetMetadata_result();
        await tmp722.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp722.__isset.success)
        {
          return tmp722.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetResultSetMetadata failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TFetchResultsResp> FetchResults(global::Apache.Hive.Service.Rpc.Thrift.TFetchResultsReq req, CancellationToken cancellationToken = default)
      {
        await send_FetchResults(req, cancellationToken);
        return await recv_FetchResults(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_FetchResults(global::Apache.Hive.Service.Rpc.Thrift.TFetchResultsReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("FetchResults", TMessageType.Call, SeqId), cancellationToken);

        var tmp723 = new InternalStructs.FetchResults_args() {
          Req = req,
        };

        await tmp723.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TFetchResultsResp> recv_FetchResults(CancellationToken cancellationToken = default)
      {

        var tmp724 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp724.Type == TMessageType.Exception)
        {
          var tmp725 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp725;
        }

        var tmp726 = new InternalStructs.FetchResults_result();
        await tmp726.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp726.__isset.success)
        {
          return tmp726.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "FetchResults failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetDelegationTokenResp> GetDelegationToken(global::Apache.Hive.Service.Rpc.Thrift.TGetDelegationTokenReq req, CancellationToken cancellationToken = default)
      {
        await send_GetDelegationToken(req, cancellationToken);
        return await recv_GetDelegationToken(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetDelegationToken(global::Apache.Hive.Service.Rpc.Thrift.TGetDelegationTokenReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetDelegationToken", TMessageType.Call, SeqId), cancellationToken);

        var tmp727 = new InternalStructs.GetDelegationToken_args() {
          Req = req,
        };

        await tmp727.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetDelegationTokenResp> recv_GetDelegationToken(CancellationToken cancellationToken = default)
      {

        var tmp728 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp728.Type == TMessageType.Exception)
        {
          var tmp729 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp729;
        }

        var tmp730 = new InternalStructs.GetDelegationToken_result();
        await tmp730.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp730.__isset.success)
        {
          return tmp730.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetDelegationToken failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TCancelDelegationTokenResp> CancelDelegationToken(global::Apache.Hive.Service.Rpc.Thrift.TCancelDelegationTokenReq req, CancellationToken cancellationToken = default)
      {
        await send_CancelDelegationToken(req, cancellationToken);
        return await recv_CancelDelegationToken(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_CancelDelegationToken(global::Apache.Hive.Service.Rpc.Thrift.TCancelDelegationTokenReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("CancelDelegationToken", TMessageType.Call, SeqId), cancellationToken);

        var tmp731 = new InternalStructs.CancelDelegationToken_args() {
          Req = req,
        };

        await tmp731.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TCancelDelegationTokenResp> recv_CancelDelegationToken(CancellationToken cancellationToken = default)
      {

        var tmp732 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp732.Type == TMessageType.Exception)
        {
          var tmp733 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp733;
        }

        var tmp734 = new InternalStructs.CancelDelegationToken_result();
        await tmp734.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp734.__isset.success)
        {
          return tmp734.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CancelDelegationToken failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TRenewDelegationTokenResp> RenewDelegationToken(global::Apache.Hive.Service.Rpc.Thrift.TRenewDelegationTokenReq req, CancellationToken cancellationToken = default)
      {
        await send_RenewDelegationToken(req, cancellationToken);
        return await recv_RenewDelegationToken(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RenewDelegationToken(global::Apache.Hive.Service.Rpc.Thrift.TRenewDelegationTokenReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RenewDelegationToken", TMessageType.Call, SeqId), cancellationToken);

        var tmp735 = new InternalStructs.RenewDelegationToken_args() {
          Req = req,
        };

        await tmp735.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TRenewDelegationTokenResp> recv_RenewDelegationToken(CancellationToken cancellationToken = default)
      {

        var tmp736 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp736.Type == TMessageType.Exception)
        {
          var tmp737 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp737;
        }

        var tmp738 = new InternalStructs.RenewDelegationToken_result();
        await tmp738.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp738.__isset.success)
        {
          return tmp738.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RenewDelegationToken failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetQueryIdResp> GetQueryId(global::Apache.Hive.Service.Rpc.Thrift.TGetQueryIdReq req, CancellationToken cancellationToken = default)
      {
        await send_GetQueryId(req, cancellationToken);
        return await recv_GetQueryId(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetQueryId(global::Apache.Hive.Service.Rpc.Thrift.TGetQueryIdReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetQueryId", TMessageType.Call, SeqId), cancellationToken);

        var tmp739 = new InternalStructs.GetQueryId_args() {
          Req = req,
        };

        await tmp739.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetQueryIdResp> recv_GetQueryId(CancellationToken cancellationToken = default)
      {

        var tmp740 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp740.Type == TMessageType.Exception)
        {
          var tmp741 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp741;
        }

        var tmp742 = new InternalStructs.GetQueryId_result();
        await tmp742.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp742.__isset.success)
        {
          return tmp742.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetQueryId failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TSetClientInfoResp> SetClientInfo(global::Apache.Hive.Service.Rpc.Thrift.TSetClientInfoReq req, CancellationToken cancellationToken = default)
      {
        await send_SetClientInfo(req, cancellationToken);
        return await recv_SetClientInfo(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_SetClientInfo(global::Apache.Hive.Service.Rpc.Thrift.TSetClientInfoReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SetClientInfo", TMessageType.Call, SeqId), cancellationToken);

        var tmp743 = new InternalStructs.SetClientInfo_args() {
          Req = req,
        };

        await tmp743.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TSetClientInfoResp> recv_SetClientInfo(CancellationToken cancellationToken = default)
      {

        var tmp744 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp744.Type == TMessageType.Exception)
        {
          var tmp745 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp745;
        }

        var tmp746 = new InternalStructs.SetClientInfo_result();
        await tmp746.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp746.__isset.success)
        {
          return tmp746.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SetClientInfo failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TUploadDataResp> UploadData(global::Apache.Hive.Service.Rpc.Thrift.TUploadDataReq req, CancellationToken cancellationToken = default)
      {
        await send_UploadData(req, cancellationToken);
        return await recv_UploadData(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_UploadData(global::Apache.Hive.Service.Rpc.Thrift.TUploadDataReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("UploadData", TMessageType.Call, SeqId), cancellationToken);

        var tmp747 = new InternalStructs.UploadData_args() {
          Req = req,
        };

        await tmp747.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TUploadDataResp> recv_UploadData(CancellationToken cancellationToken = default)
      {

        var tmp748 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp748.Type == TMessageType.Exception)
        {
          var tmp749 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp749;
        }

        var tmp750 = new InternalStructs.UploadData_result();
        await tmp750.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp750.__isset.success)
        {
          return tmp750.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "UploadData failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TDownloadDataResp> DownloadData(global::Apache.Hive.Service.Rpc.Thrift.TDownloadDataReq req, CancellationToken cancellationToken = default)
      {
        await send_DownloadData(req, cancellationToken);
        return await recv_DownloadData(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_DownloadData(global::Apache.Hive.Service.Rpc.Thrift.TDownloadDataReq req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("DownloadData", TMessageType.Call, SeqId), cancellationToken);

        var tmp751 = new InternalStructs.DownloadData_args() {
          Req = req,
        };

        await tmp751.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TDownloadDataResp> recv_DownloadData(CancellationToken cancellationToken = default)
      {

        var tmp752 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp752.Type == TMessageType.Exception)
        {
          var tmp753 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp753;
        }

        var tmp754 = new InternalStructs.DownloadData_result();
        await tmp754.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp754.__isset.success)
        {
          return tmp754.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DownloadData failed: unknown result");
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private readonly IAsync _iAsync;
      private readonly ILogger<AsyncProcessor> _logger;

      public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
      {
        _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
        _logger = logger;
        processMap_["OpenSession"] = OpenSession_ProcessAsync;
        processMap_["CloseSession"] = CloseSession_ProcessAsync;
        processMap_["GetInfo"] = GetInfo_ProcessAsync;
        processMap_["ExecuteStatement"] = ExecuteStatement_ProcessAsync;
        processMap_["GetTypeInfo"] = GetTypeInfo_ProcessAsync;
        processMap_["GetCatalogs"] = GetCatalogs_ProcessAsync;
        processMap_["GetSchemas"] = GetSchemas_ProcessAsync;
        processMap_["GetTables"] = GetTables_ProcessAsync;
        processMap_["GetTableTypes"] = GetTableTypes_ProcessAsync;
        processMap_["GetColumns"] = GetColumns_ProcessAsync;
        processMap_["GetFunctions"] = GetFunctions_ProcessAsync;
        processMap_["GetPrimaryKeys"] = GetPrimaryKeys_ProcessAsync;
        processMap_["GetCrossReference"] = GetCrossReference_ProcessAsync;
        processMap_["GetOperationStatus"] = GetOperationStatus_ProcessAsync;
        processMap_["CancelOperation"] = CancelOperation_ProcessAsync;
        processMap_["CloseOperation"] = CloseOperation_ProcessAsync;
        processMap_["GetResultSetMetadata"] = GetResultSetMetadata_ProcessAsync;
        processMap_["FetchResults"] = FetchResults_ProcessAsync;
        processMap_["GetDelegationToken"] = GetDelegationToken_ProcessAsync;
        processMap_["CancelDelegationToken"] = CancelDelegationToken_ProcessAsync;
        processMap_["RenewDelegationToken"] = RenewDelegationToken_ProcessAsync;
        processMap_["GetQueryId"] = GetQueryId_ProcessAsync;
        processMap_["SetClientInfo"] = SetClientInfo_ProcessAsync;
        processMap_["UploadData"] = UploadData_ProcessAsync;
        processMap_["DownloadData"] = DownloadData_ProcessAsync;
      }

      protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          processMap_.TryGetValue(msg.Name, out var fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async global::System.Threading.Tasks.Task OpenSession_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp755 = new InternalStructs.OpenSession_args();
        await tmp755.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp756 = new InternalStructs.OpenSession_result();
        try
        {
          tmp756.Success = await _iAsync.OpenSession(tmp755.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("OpenSession", TMessageType.Reply, seqid), cancellationToken);
          await tmp756.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp757)
        {
          var tmp758 = $"Error occurred in {GetType().FullName}: {tmp757.Message}";
          if (_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp757, tmp758);
          else
            Console.Error.WriteLine(tmp758);
          var tmp759 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("OpenSession", TMessageType.Exception, seqid), cancellationToken);
          await tmp759.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task CloseSession_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp760 = new InternalStructs.CloseSession_args();
        await tmp760.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp761 = new InternalStructs.CloseSession_result();
        try
        {
          tmp761.Success = await _iAsync.CloseSession(tmp760.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("CloseSession", TMessageType.Reply, seqid), cancellationToken);
          await tmp761.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp762)
        {
          var tmp763 = $"Error occurred in {GetType().FullName}: {tmp762.Message}";
          if (_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp762, tmp763);
          else
            Console.Error.WriteLine(tmp763);
          var tmp764 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("CloseSession", TMessageType.Exception, seqid), cancellationToken);
          await tmp764.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetInfo_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp765 = new InternalStructs.GetInfo_args();
        await tmp765.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp766 = new InternalStructs.GetInfo_result();
        try
        {
          tmp766.Success = await _iAsync.GetInfo(tmp765.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetInfo", TMessageType.Reply, seqid), cancellationToken);
          await tmp766.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp767)
        {
          var tmp768 = $"Error occurred in {GetType().FullName}: {tmp767.Message}";
          if (_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp767, tmp768);
          else
            Console.Error.WriteLine(tmp768);
          var tmp769 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetInfo", TMessageType.Exception, seqid), cancellationToken);
          await tmp769.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task ExecuteStatement_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp770 = new InternalStructs.ExecuteStatement_args();
        await tmp770.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp771 = new InternalStructs.ExecuteStatement_result();
        try
        {
          tmp771.Success = await _iAsync.ExecuteStatement(tmp770.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("ExecuteStatement", TMessageType.Reply, seqid), cancellationToken);
          await tmp771.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp772)
        {
          var tmp773 = $"Error occurred in {GetType().FullName}: {tmp772.Message}";
          if (_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp772, tmp773);
          else
            Console.Error.WriteLine(tmp773);
          var tmp774 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("ExecuteStatement", TMessageType.Exception, seqid), cancellationToken);
          await tmp774.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetTypeInfo_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp775 = new InternalStructs.GetTypeInfo_args();
        await tmp775.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp776 = new InternalStructs.GetTypeInfo_result();
        try
        {
          tmp776.Success = await _iAsync.GetTypeInfo(tmp775.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetTypeInfo", TMessageType.Reply, seqid), cancellationToken);
          await tmp776.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp777)
        {
          var tmp778 = $"Error occurred in {GetType().FullName}: {tmp777.Message}";
          if (_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp777, tmp778);
          else
            Console.Error.WriteLine(tmp778);
          var tmp779 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetTypeInfo", TMessageType.Exception, seqid), cancellationToken);
          await tmp779.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetCatalogs_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp780 = new InternalStructs.GetCatalogs_args();
        await tmp780.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp781 = new InternalStructs.GetCatalogs_result();
        try
        {
          tmp781.Success = await _iAsync.GetCatalogs(tmp780.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetCatalogs", TMessageType.Reply, seqid), cancellationToken);
          await tmp781.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp782)
        {
          var tmp783 = $"Error occurred in {GetType().FullName}: {tmp782.Message}";
          if (_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp782, tmp783);
          else
            Console.Error.WriteLine(tmp783);
          var tmp784 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetCatalogs", TMessageType.Exception, seqid), cancellationToken);
          await tmp784.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetSchemas_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp785 = new InternalStructs.GetSchemas_args();
        await tmp785.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp786 = new InternalStructs.GetSchemas_result();
        try
        {
          tmp786.Success = await _iAsync.GetSchemas(tmp785.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetSchemas", TMessageType.Reply, seqid), cancellationToken);
          await tmp786.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp787)
        {
          var tmp788 = $"Error occurred in {GetType().FullName}: {tmp787.Message}";
          if (_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp787, tmp788);
          else
            Console.Error.WriteLine(tmp788);
          var tmp789 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetSchemas", TMessageType.Exception, seqid), cancellationToken);
          await tmp789.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetTables_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp790 = new InternalStructs.GetTables_args();
        await tmp790.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp791 = new InternalStructs.GetTables_result();
        try
        {
          tmp791.Success = await _iAsync.GetTables(tmp790.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetTables", TMessageType.Reply, seqid), cancellationToken);
          await tmp791.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp792)
        {
          var tmp793 = $"Error occurred in {GetType().FullName}: {tmp792.Message}";
          if (_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp792, tmp793);
          else
            Console.Error.WriteLine(tmp793);
          var tmp794 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetTables", TMessageType.Exception, seqid), cancellationToken);
          await tmp794.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetTableTypes_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp795 = new InternalStructs.GetTableTypes_args();
        await tmp795.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp796 = new InternalStructs.GetTableTypes_result();
        try
        {
          tmp796.Success = await _iAsync.GetTableTypes(tmp795.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetTableTypes", TMessageType.Reply, seqid), cancellationToken);
          await tmp796.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp797)
        {
          var tmp798 = $"Error occurred in {GetType().FullName}: {tmp797.Message}";
          if (_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp797, tmp798);
          else
            Console.Error.WriteLine(tmp798);
          var tmp799 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetTableTypes", TMessageType.Exception, seqid), cancellationToken);
          await tmp799.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetColumns_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp800 = new InternalStructs.GetColumns_args();
        await tmp800.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp801 = new InternalStructs.GetColumns_result();
        try
        {
          tmp801.Success = await _iAsync.GetColumns(tmp800.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetColumns", TMessageType.Reply, seqid), cancellationToken);
          await tmp801.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp802)
        {
          var tmp803 = $"Error occurred in {GetType().FullName}: {tmp802.Message}";
          if (_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp802, tmp803);
          else
            Console.Error.WriteLine(tmp803);
          var tmp804 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetColumns", TMessageType.Exception, seqid), cancellationToken);
          await tmp804.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetFunctions_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp805 = new InternalStructs.GetFunctions_args();
        await tmp805.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp806 = new InternalStructs.GetFunctions_result();
        try
        {
          tmp806.Success = await _iAsync.GetFunctions(tmp805.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetFunctions", TMessageType.Reply, seqid), cancellationToken);
          await tmp806.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp807)
        {
          var tmp808 = $"Error occurred in {GetType().FullName}: {tmp807.Message}";
          if (_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp807, tmp808);
          else
            Console.Error.WriteLine(tmp808);
          var tmp809 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetFunctions", TMessageType.Exception, seqid), cancellationToken);
          await tmp809.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetPrimaryKeys_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp810 = new InternalStructs.GetPrimaryKeys_args();
        await tmp810.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp811 = new InternalStructs.GetPrimaryKeys_result();
        try
        {
          tmp811.Success = await _iAsync.GetPrimaryKeys(tmp810.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetPrimaryKeys", TMessageType.Reply, seqid), cancellationToken);
          await tmp811.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp812)
        {
          var tmp813 = $"Error occurred in {GetType().FullName}: {tmp812.Message}";
          if (_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp812, tmp813);
          else
            Console.Error.WriteLine(tmp813);
          var tmp814 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetPrimaryKeys", TMessageType.Exception, seqid), cancellationToken);
          await tmp814.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetCrossReference_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp815 = new InternalStructs.GetCrossReference_args();
        await tmp815.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp816 = new InternalStructs.GetCrossReference_result();
        try
        {
          tmp816.Success = await _iAsync.GetCrossReference(tmp815.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetCrossReference", TMessageType.Reply, seqid), cancellationToken);
          await tmp816.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp817)
        {
          var tmp818 = $"Error occurred in {GetType().FullName}: {tmp817.Message}";
          if (_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp817, tmp818);
          else
            Console.Error.WriteLine(tmp818);
          var tmp819 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetCrossReference", TMessageType.Exception, seqid), cancellationToken);
          await tmp819.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetOperationStatus_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp820 = new InternalStructs.GetOperationStatus_args();
        await tmp820.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp821 = new InternalStructs.GetOperationStatus_result();
        try
        {
          tmp821.Success = await _iAsync.GetOperationStatus(tmp820.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetOperationStatus", TMessageType.Reply, seqid), cancellationToken);
          await tmp821.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp822)
        {
          var tmp823 = $"Error occurred in {GetType().FullName}: {tmp822.Message}";
          if (_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp822, tmp823);
          else
            Console.Error.WriteLine(tmp823);
          var tmp824 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetOperationStatus", TMessageType.Exception, seqid), cancellationToken);
          await tmp824.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task CancelOperation_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp825 = new InternalStructs.CancelOperation_args();
        await tmp825.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp826 = new InternalStructs.CancelOperation_result();
        try
        {
          tmp826.Success = await _iAsync.CancelOperation(tmp825.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("CancelOperation", TMessageType.Reply, seqid), cancellationToken);
          await tmp826.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp827)
        {
          var tmp828 = $"Error occurred in {GetType().FullName}: {tmp827.Message}";
          if (_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp827, tmp828);
          else
            Console.Error.WriteLine(tmp828);
          var tmp829 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("CancelOperation", TMessageType.Exception, seqid), cancellationToken);
          await tmp829.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task CloseOperation_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp830 = new InternalStructs.CloseOperation_args();
        await tmp830.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp831 = new InternalStructs.CloseOperation_result();
        try
        {
          tmp831.Success = await _iAsync.CloseOperation(tmp830.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("CloseOperation", TMessageType.Reply, seqid), cancellationToken);
          await tmp831.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp832)
        {
          var tmp833 = $"Error occurred in {GetType().FullName}: {tmp832.Message}";
          if (_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp832, tmp833);
          else
            Console.Error.WriteLine(tmp833);
          var tmp834 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("CloseOperation", TMessageType.Exception, seqid), cancellationToken);
          await tmp834.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetResultSetMetadata_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp835 = new InternalStructs.GetResultSetMetadata_args();
        await tmp835.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp836 = new InternalStructs.GetResultSetMetadata_result();
        try
        {
          tmp836.Success = await _iAsync.GetResultSetMetadata(tmp835.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetResultSetMetadata", TMessageType.Reply, seqid), cancellationToken);
          await tmp836.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp837)
        {
          var tmp838 = $"Error occurred in {GetType().FullName}: {tmp837.Message}";
          if (_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp837, tmp838);
          else
            Console.Error.WriteLine(tmp838);
          var tmp839 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetResultSetMetadata", TMessageType.Exception, seqid), cancellationToken);
          await tmp839.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task FetchResults_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp840 = new InternalStructs.FetchResults_args();
        await tmp840.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp841 = new InternalStructs.FetchResults_result();
        try
        {
          tmp841.Success = await _iAsync.FetchResults(tmp840.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("FetchResults", TMessageType.Reply, seqid), cancellationToken);
          await tmp841.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp842)
        {
          var tmp843 = $"Error occurred in {GetType().FullName}: {tmp842.Message}";
          if (_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp842, tmp843);
          else
            Console.Error.WriteLine(tmp843);
          var tmp844 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("FetchResults", TMessageType.Exception, seqid), cancellationToken);
          await tmp844.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetDelegationToken_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp845 = new InternalStructs.GetDelegationToken_args();
        await tmp845.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp846 = new InternalStructs.GetDelegationToken_result();
        try
        {
          tmp846.Success = await _iAsync.GetDelegationToken(tmp845.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetDelegationToken", TMessageType.Reply, seqid), cancellationToken);
          await tmp846.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp847)
        {
          var tmp848 = $"Error occurred in {GetType().FullName}: {tmp847.Message}";
          if (_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp847, tmp848);
          else
            Console.Error.WriteLine(tmp848);
          var tmp849 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetDelegationToken", TMessageType.Exception, seqid), cancellationToken);
          await tmp849.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task CancelDelegationToken_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp850 = new InternalStructs.CancelDelegationToken_args();
        await tmp850.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp851 = new InternalStructs.CancelDelegationToken_result();
        try
        {
          tmp851.Success = await _iAsync.CancelDelegationToken(tmp850.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("CancelDelegationToken", TMessageType.Reply, seqid), cancellationToken);
          await tmp851.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp852)
        {
          var tmp853 = $"Error occurred in {GetType().FullName}: {tmp852.Message}";
          if (_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp852, tmp853);
          else
            Console.Error.WriteLine(tmp853);
          var tmp854 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("CancelDelegationToken", TMessageType.Exception, seqid), cancellationToken);
          await tmp854.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RenewDelegationToken_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp855 = new InternalStructs.RenewDelegationToken_args();
        await tmp855.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp856 = new InternalStructs.RenewDelegationToken_result();
        try
        {
          tmp856.Success = await _iAsync.RenewDelegationToken(tmp855.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("RenewDelegationToken", TMessageType.Reply, seqid), cancellationToken);
          await tmp856.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp857)
        {
          var tmp858 = $"Error occurred in {GetType().FullName}: {tmp857.Message}";
          if (_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp857, tmp858);
          else
            Console.Error.WriteLine(tmp858);
          var tmp859 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RenewDelegationToken", TMessageType.Exception, seqid), cancellationToken);
          await tmp859.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetQueryId_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp860 = new InternalStructs.GetQueryId_args();
        await tmp860.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp861 = new InternalStructs.GetQueryId_result();
        try
        {
          tmp861.Success = await _iAsync.GetQueryId(tmp860.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetQueryId", TMessageType.Reply, seqid), cancellationToken);
          await tmp861.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp862)
        {
          var tmp863 = $"Error occurred in {GetType().FullName}: {tmp862.Message}";
          if (_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp862, tmp863);
          else
            Console.Error.WriteLine(tmp863);
          var tmp864 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetQueryId", TMessageType.Exception, seqid), cancellationToken);
          await tmp864.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task SetClientInfo_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp865 = new InternalStructs.SetClientInfo_args();
        await tmp865.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp866 = new InternalStructs.SetClientInfo_result();
        try
        {
          tmp866.Success = await _iAsync.SetClientInfo(tmp865.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("SetClientInfo", TMessageType.Reply, seqid), cancellationToken);
          await tmp866.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp867)
        {
          var tmp868 = $"Error occurred in {GetType().FullName}: {tmp867.Message}";
          if (_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp867, tmp868);
          else
            Console.Error.WriteLine(tmp868);
          var tmp869 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SetClientInfo", TMessageType.Exception, seqid), cancellationToken);
          await tmp869.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task UploadData_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp870 = new InternalStructs.UploadData_args();
        await tmp870.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp871 = new InternalStructs.UploadData_result();
        try
        {
          tmp871.Success = await _iAsync.UploadData(tmp870.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("UploadData", TMessageType.Reply, seqid), cancellationToken);
          await tmp871.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp872)
        {
          var tmp873 = $"Error occurred in {GetType().FullName}: {tmp872.Message}";
          if (_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp872, tmp873);
          else
            Console.Error.WriteLine(tmp873);
          var tmp874 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("UploadData", TMessageType.Exception, seqid), cancellationToken);
          await tmp874.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task DownloadData_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp875 = new InternalStructs.DownloadData_args();
        await tmp875.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp876 = new InternalStructs.DownloadData_result();
        try
        {
          tmp876.Success = await _iAsync.DownloadData(tmp875.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("DownloadData", TMessageType.Reply, seqid), cancellationToken);
          await tmp876.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp877)
        {
          var tmp878 = $"Error occurred in {GetType().FullName}: {tmp877.Message}";
          if (_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp877, tmp878);
          else
            Console.Error.WriteLine(tmp878);
          var tmp879 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("DownloadData", TMessageType.Exception, seqid), cancellationToken);
          await tmp879.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }

    public class InternalStructs
    {

      public partial class OpenSession_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TOpenSessionReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TOpenSessionReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public OpenSession_args()
        {
        }

        public OpenSession_args DeepCopy()
        {
          var tmp880 = new OpenSession_args();
          if ((Req != null) && __isset.req)
          {
            tmp880.Req = (global::Apache.Hive.Service.Rpc.Thrift.TOpenSessionReq)this.Req.DeepCopy();
          }
          tmp880.__isset.req = this.__isset.req;
          return tmp880;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TOpenSessionReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp881 = new TStruct("OpenSession_args");
            await oprot.WriteStructBeginAsync(tmp881, cancellationToken);
            var tmp882 = new TField();
            if ((Req != null) && __isset.req)
            {
              tmp882.Name = "req";
              tmp882.Type = TType.Struct;
              tmp882.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp882, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is OpenSession_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if ((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp883 = new StringBuilder("OpenSession_args(");
          int tmp884 = 0;
          if ((Req != null) && __isset.req)
          {
            if (0 < tmp884++) { tmp883.Append(", "); }
            tmp883.Append("Req: ");
            Req.ToString(tmp883);
          }
          tmp883.Append(')');
          return tmp883.ToString();
        }
      }


      public partial class OpenSession_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TOpenSessionResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TOpenSessionResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public OpenSession_result()
        {
        }

        public OpenSession_result DeepCopy()
        {
          var tmp885 = new OpenSession_result();
          if ((Success != null) && __isset.success)
          {
            tmp885.Success = (global::Apache.Hive.Service.Rpc.Thrift.TOpenSessionResp)this.Success.DeepCopy();
          }
          tmp885.__isset.success = this.__isset.success;
          return tmp885;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TOpenSessionResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp886 = new TStruct("OpenSession_result");
            await oprot.WriteStructBeginAsync(tmp886, cancellationToken);
            var tmp887 = new TField();

            if (this.__isset.success)
            {
              if (Success != null)
              {
                tmp887.Name = "Success";
                tmp887.Type = TType.Struct;
                tmp887.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp887, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is OpenSession_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if ((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp888 = new StringBuilder("OpenSession_result(");
          int tmp889 = 0;
          if ((Success != null) && __isset.success)
          {
            if (0 < tmp889++) { tmp888.Append(", "); }
            tmp888.Append("Success: ");
            Success.ToString(tmp888);
          }
          tmp888.Append(')');
          return tmp888.ToString();
        }
      }


      public partial class CloseSession_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TCloseSessionReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TCloseSessionReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public CloseSession_args()
        {
        }

        public CloseSession_args DeepCopy()
        {
          var tmp890 = new CloseSession_args();
          if ((Req != null) && __isset.req)
          {
            tmp890.Req = (global::Apache.Hive.Service.Rpc.Thrift.TCloseSessionReq)this.Req.DeepCopy();
          }
          tmp890.__isset.req = this.__isset.req;
          return tmp890;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TCloseSessionReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp891 = new TStruct("CloseSession_args");
            await oprot.WriteStructBeginAsync(tmp891, cancellationToken);
            var tmp892 = new TField();
            if ((Req != null) && __isset.req)
            {
              tmp892.Name = "req";
              tmp892.Type = TType.Struct;
              tmp892.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp892, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is CloseSession_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if ((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp893 = new StringBuilder("CloseSession_args(");
          int tmp894 = 0;
          if ((Req != null) && __isset.req)
          {
            if (0 < tmp894++) { tmp893.Append(", "); }
            tmp893.Append("Req: ");
            Req.ToString(tmp893);
          }
          tmp893.Append(')');
          return tmp893.ToString();
        }
      }


      public partial class CloseSession_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TCloseSessionResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TCloseSessionResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public CloseSession_result()
        {
        }

        public CloseSession_result DeepCopy()
        {
          var tmp895 = new CloseSession_result();
          if ((Success != null) && __isset.success)
          {
            tmp895.Success = (global::Apache.Hive.Service.Rpc.Thrift.TCloseSessionResp)this.Success.DeepCopy();
          }
          tmp895.__isset.success = this.__isset.success;
          return tmp895;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TCloseSessionResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp896 = new TStruct("CloseSession_result");
            await oprot.WriteStructBeginAsync(tmp896, cancellationToken);
            var tmp897 = new TField();

            if (this.__isset.success)
            {
              if (Success != null)
              {
                tmp897.Name = "Success";
                tmp897.Type = TType.Struct;
                tmp897.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp897, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is CloseSession_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if ((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp898 = new StringBuilder("CloseSession_result(");
          int tmp899 = 0;
          if ((Success != null) && __isset.success)
          {
            if (0 < tmp899++) { tmp898.Append(", "); }
            tmp898.Append("Success: ");
            Success.ToString(tmp898);
          }
          tmp898.Append(')');
          return tmp898.ToString();
        }
      }


      public partial class GetInfo_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetInfoReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetInfoReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public GetInfo_args()
        {
        }

        public GetInfo_args DeepCopy()
        {
          var tmp900 = new GetInfo_args();
          if ((Req != null) && __isset.req)
          {
            tmp900.Req = (global::Apache.Hive.Service.Rpc.Thrift.TGetInfoReq)this.Req.DeepCopy();
          }
          tmp900.__isset.req = this.__isset.req;
          return tmp900;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TGetInfoReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp901 = new TStruct("GetInfo_args");
            await oprot.WriteStructBeginAsync(tmp901, cancellationToken);
            var tmp902 = new TField();
            if ((Req != null) && __isset.req)
            {
              tmp902.Name = "req";
              tmp902.Type = TType.Struct;
              tmp902.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp902, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetInfo_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if ((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp903 = new StringBuilder("GetInfo_args(");
          int tmp904 = 0;
          if ((Req != null) && __isset.req)
          {
            if (0 < tmp904++) { tmp903.Append(", "); }
            tmp903.Append("Req: ");
            Req.ToString(tmp903);
          }
          tmp903.Append(')');
          return tmp903.ToString();
        }
      }


      public partial class GetInfo_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetInfoResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetInfoResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public GetInfo_result()
        {
        }

        public GetInfo_result DeepCopy()
        {
          var tmp905 = new GetInfo_result();
          if ((Success != null) && __isset.success)
          {
            tmp905.Success = (global::Apache.Hive.Service.Rpc.Thrift.TGetInfoResp)this.Success.DeepCopy();
          }
          tmp905.__isset.success = this.__isset.success;
          return tmp905;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TGetInfoResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp906 = new TStruct("GetInfo_result");
            await oprot.WriteStructBeginAsync(tmp906, cancellationToken);
            var tmp907 = new TField();

            if (this.__isset.success)
            {
              if (Success != null)
              {
                tmp907.Name = "Success";
                tmp907.Type = TType.Struct;
                tmp907.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp907, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetInfo_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if ((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp908 = new StringBuilder("GetInfo_result(");
          int tmp909 = 0;
          if ((Success != null) && __isset.success)
          {
            if (0 < tmp909++) { tmp908.Append(", "); }
            tmp908.Append("Success: ");
            Success.ToString(tmp908);
          }
          tmp908.Append(')');
          return tmp908.ToString();
        }
      }


      public partial class ExecuteStatement_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TExecuteStatementReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TExecuteStatementReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public ExecuteStatement_args()
        {
        }

        public ExecuteStatement_args DeepCopy()
        {
          var tmp910 = new ExecuteStatement_args();
          if ((Req != null) && __isset.req)
          {
            tmp910.Req = (global::Apache.Hive.Service.Rpc.Thrift.TExecuteStatementReq)this.Req.DeepCopy();
          }
          tmp910.__isset.req = this.__isset.req;
          return tmp910;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TExecuteStatementReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp911 = new TStruct("ExecuteStatement_args");
            await oprot.WriteStructBeginAsync(tmp911, cancellationToken);
            var tmp912 = new TField();
            if ((Req != null) && __isset.req)
            {
              tmp912.Name = "req";
              tmp912.Type = TType.Struct;
              tmp912.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp912, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is ExecuteStatement_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if ((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp913 = new StringBuilder("ExecuteStatement_args(");
          int tmp914 = 0;
          if ((Req != null) && __isset.req)
          {
            if (0 < tmp914++) { tmp913.Append(", "); }
            tmp913.Append("Req: ");
            Req.ToString(tmp913);
          }
          tmp913.Append(')');
          return tmp913.ToString();
        }
      }


      public partial class ExecuteStatement_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TExecuteStatementResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TExecuteStatementResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public ExecuteStatement_result()
        {
        }

        public ExecuteStatement_result DeepCopy()
        {
          var tmp915 = new ExecuteStatement_result();
          if ((Success != null) && __isset.success)
          {
            tmp915.Success = (global::Apache.Hive.Service.Rpc.Thrift.TExecuteStatementResp)this.Success.DeepCopy();
          }
          tmp915.__isset.success = this.__isset.success;
          return tmp915;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TExecuteStatementResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp916 = new TStruct("ExecuteStatement_result");
            await oprot.WriteStructBeginAsync(tmp916, cancellationToken);
            var tmp917 = new TField();

            if (this.__isset.success)
            {
              if (Success != null)
              {
                tmp917.Name = "Success";
                tmp917.Type = TType.Struct;
                tmp917.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp917, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is ExecuteStatement_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if ((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp918 = new StringBuilder("ExecuteStatement_result(");
          int tmp919 = 0;
          if ((Success != null) && __isset.success)
          {
            if (0 < tmp919++) { tmp918.Append(", "); }
            tmp918.Append("Success: ");
            Success.ToString(tmp918);
          }
          tmp918.Append(')');
          return tmp918.ToString();
        }
      }


      public partial class GetTypeInfo_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetTypeInfoReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetTypeInfoReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public GetTypeInfo_args()
        {
        }

        public GetTypeInfo_args DeepCopy()
        {
          var tmp920 = new GetTypeInfo_args();
          if ((Req != null) && __isset.req)
          {
            tmp920.Req = (global::Apache.Hive.Service.Rpc.Thrift.TGetTypeInfoReq)this.Req.DeepCopy();
          }
          tmp920.__isset.req = this.__isset.req;
          return tmp920;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TGetTypeInfoReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp921 = new TStruct("GetTypeInfo_args");
            await oprot.WriteStructBeginAsync(tmp921, cancellationToken);
            var tmp922 = new TField();
            if ((Req != null) && __isset.req)
            {
              tmp922.Name = "req";
              tmp922.Type = TType.Struct;
              tmp922.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp922, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetTypeInfo_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if ((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp923 = new StringBuilder("GetTypeInfo_args(");
          int tmp924 = 0;
          if ((Req != null) && __isset.req)
          {
            if (0 < tmp924++) { tmp923.Append(", "); }
            tmp923.Append("Req: ");
            Req.ToString(tmp923);
          }
          tmp923.Append(')');
          return tmp923.ToString();
        }
      }


      public partial class GetTypeInfo_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetTypeInfoResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetTypeInfoResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public GetTypeInfo_result()
        {
        }

        public GetTypeInfo_result DeepCopy()
        {
          var tmp925 = new GetTypeInfo_result();
          if ((Success != null) && __isset.success)
          {
            tmp925.Success = (global::Apache.Hive.Service.Rpc.Thrift.TGetTypeInfoResp)this.Success.DeepCopy();
          }
          tmp925.__isset.success = this.__isset.success;
          return tmp925;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TGetTypeInfoResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp926 = new TStruct("GetTypeInfo_result");
            await oprot.WriteStructBeginAsync(tmp926, cancellationToken);
            var tmp927 = new TField();

            if (this.__isset.success)
            {
              if (Success != null)
              {
                tmp927.Name = "Success";
                tmp927.Type = TType.Struct;
                tmp927.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp927, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetTypeInfo_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if ((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp928 = new StringBuilder("GetTypeInfo_result(");
          int tmp929 = 0;
          if ((Success != null) && __isset.success)
          {
            if (0 < tmp929++) { tmp928.Append(", "); }
            tmp928.Append("Success: ");
            Success.ToString(tmp928);
          }
          tmp928.Append(')');
          return tmp928.ToString();
        }
      }


      public partial class GetCatalogs_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetCatalogsReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetCatalogsReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public GetCatalogs_args()
        {
        }

        public GetCatalogs_args DeepCopy()
        {
          var tmp930 = new GetCatalogs_args();
          if ((Req != null) && __isset.req)
          {
            tmp930.Req = (global::Apache.Hive.Service.Rpc.Thrift.TGetCatalogsReq)this.Req.DeepCopy();
          }
          tmp930.__isset.req = this.__isset.req;
          return tmp930;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TGetCatalogsReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp931 = new TStruct("GetCatalogs_args");
            await oprot.WriteStructBeginAsync(tmp931, cancellationToken);
            var tmp932 = new TField();
            if ((Req != null) && __isset.req)
            {
              tmp932.Name = "req";
              tmp932.Type = TType.Struct;
              tmp932.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp932, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetCatalogs_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if ((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp933 = new StringBuilder("GetCatalogs_args(");
          int tmp934 = 0;
          if ((Req != null) && __isset.req)
          {
            if (0 < tmp934++) { tmp933.Append(", "); }
            tmp933.Append("Req: ");
            Req.ToString(tmp933);
          }
          tmp933.Append(')');
          return tmp933.ToString();
        }
      }


      public partial class GetCatalogs_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetCatalogsResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetCatalogsResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public GetCatalogs_result()
        {
        }

        public GetCatalogs_result DeepCopy()
        {
          var tmp935 = new GetCatalogs_result();
          if ((Success != null) && __isset.success)
          {
            tmp935.Success = (global::Apache.Hive.Service.Rpc.Thrift.TGetCatalogsResp)this.Success.DeepCopy();
          }
          tmp935.__isset.success = this.__isset.success;
          return tmp935;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TGetCatalogsResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp936 = new TStruct("GetCatalogs_result");
            await oprot.WriteStructBeginAsync(tmp936, cancellationToken);
            var tmp937 = new TField();

            if (this.__isset.success)
            {
              if (Success != null)
              {
                tmp937.Name = "Success";
                tmp937.Type = TType.Struct;
                tmp937.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp937, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetCatalogs_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if ((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp938 = new StringBuilder("GetCatalogs_result(");
          int tmp939 = 0;
          if ((Success != null) && __isset.success)
          {
            if (0 < tmp939++) { tmp938.Append(", "); }
            tmp938.Append("Success: ");
            Success.ToString(tmp938);
          }
          tmp938.Append(')');
          return tmp938.ToString();
        }
      }


      public partial class GetSchemas_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetSchemasReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetSchemasReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public GetSchemas_args()
        {
        }

        public GetSchemas_args DeepCopy()
        {
          var tmp940 = new GetSchemas_args();
          if ((Req != null) && __isset.req)
          {
            tmp940.Req = (global::Apache.Hive.Service.Rpc.Thrift.TGetSchemasReq)this.Req.DeepCopy();
          }
          tmp940.__isset.req = this.__isset.req;
          return tmp940;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TGetSchemasReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp941 = new TStruct("GetSchemas_args");
            await oprot.WriteStructBeginAsync(tmp941, cancellationToken);
            var tmp942 = new TField();
            if ((Req != null) && __isset.req)
            {
              tmp942.Name = "req";
              tmp942.Type = TType.Struct;
              tmp942.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp942, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetSchemas_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if ((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp943 = new StringBuilder("GetSchemas_args(");
          int tmp944 = 0;
          if ((Req != null) && __isset.req)
          {
            if (0 < tmp944++) { tmp943.Append(", "); }
            tmp943.Append("Req: ");
            Req.ToString(tmp943);
          }
          tmp943.Append(')');
          return tmp943.ToString();
        }
      }


      public partial class GetSchemas_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetSchemasResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetSchemasResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public GetSchemas_result()
        {
        }

        public GetSchemas_result DeepCopy()
        {
          var tmp945 = new GetSchemas_result();
          if ((Success != null) && __isset.success)
          {
            tmp945.Success = (global::Apache.Hive.Service.Rpc.Thrift.TGetSchemasResp)this.Success.DeepCopy();
          }
          tmp945.__isset.success = this.__isset.success;
          return tmp945;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TGetSchemasResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp946 = new TStruct("GetSchemas_result");
            await oprot.WriteStructBeginAsync(tmp946, cancellationToken);
            var tmp947 = new TField();

            if (this.__isset.success)
            {
              if (Success != null)
              {
                tmp947.Name = "Success";
                tmp947.Type = TType.Struct;
                tmp947.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp947, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetSchemas_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if ((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp948 = new StringBuilder("GetSchemas_result(");
          int tmp949 = 0;
          if ((Success != null) && __isset.success)
          {
            if (0 < tmp949++) { tmp948.Append(", "); }
            tmp948.Append("Success: ");
            Success.ToString(tmp948);
          }
          tmp948.Append(')');
          return tmp948.ToString();
        }
      }


      public partial class GetTables_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetTablesReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetTablesReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public GetTables_args()
        {
        }

        public GetTables_args DeepCopy()
        {
          var tmp950 = new GetTables_args();
          if ((Req != null) && __isset.req)
          {
            tmp950.Req = (global::Apache.Hive.Service.Rpc.Thrift.TGetTablesReq)this.Req.DeepCopy();
          }
          tmp950.__isset.req = this.__isset.req;
          return tmp950;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TGetTablesReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp951 = new TStruct("GetTables_args");
            await oprot.WriteStructBeginAsync(tmp951, cancellationToken);
            var tmp952 = new TField();
            if ((Req != null) && __isset.req)
            {
              tmp952.Name = "req";
              tmp952.Type = TType.Struct;
              tmp952.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp952, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetTables_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if ((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp953 = new StringBuilder("GetTables_args(");
          int tmp954 = 0;
          if ((Req != null) && __isset.req)
          {
            if (0 < tmp954++) { tmp953.Append(", "); }
            tmp953.Append("Req: ");
            Req.ToString(tmp953);
          }
          tmp953.Append(')');
          return tmp953.ToString();
        }
      }


      public partial class GetTables_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetTablesResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetTablesResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public GetTables_result()
        {
        }

        public GetTables_result DeepCopy()
        {
          var tmp955 = new GetTables_result();
          if ((Success != null) && __isset.success)
          {
            tmp955.Success = (global::Apache.Hive.Service.Rpc.Thrift.TGetTablesResp)this.Success.DeepCopy();
          }
          tmp955.__isset.success = this.__isset.success;
          return tmp955;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TGetTablesResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp956 = new TStruct("GetTables_result");
            await oprot.WriteStructBeginAsync(tmp956, cancellationToken);
            var tmp957 = new TField();

            if (this.__isset.success)
            {
              if (Success != null)
              {
                tmp957.Name = "Success";
                tmp957.Type = TType.Struct;
                tmp957.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp957, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetTables_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if ((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp958 = new StringBuilder("GetTables_result(");
          int tmp959 = 0;
          if ((Success != null) && __isset.success)
          {
            if (0 < tmp959++) { tmp958.Append(", "); }
            tmp958.Append("Success: ");
            Success.ToString(tmp958);
          }
          tmp958.Append(')');
          return tmp958.ToString();
        }
      }


      public partial class GetTableTypes_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetTableTypesReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetTableTypesReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public GetTableTypes_args()
        {
        }

        public GetTableTypes_args DeepCopy()
        {
          var tmp960 = new GetTableTypes_args();
          if ((Req != null) && __isset.req)
          {
            tmp960.Req = (global::Apache.Hive.Service.Rpc.Thrift.TGetTableTypesReq)this.Req.DeepCopy();
          }
          tmp960.__isset.req = this.__isset.req;
          return tmp960;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TGetTableTypesReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp961 = new TStruct("GetTableTypes_args");
            await oprot.WriteStructBeginAsync(tmp961, cancellationToken);
            var tmp962 = new TField();
            if ((Req != null) && __isset.req)
            {
              tmp962.Name = "req";
              tmp962.Type = TType.Struct;
              tmp962.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp962, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetTableTypes_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if ((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp963 = new StringBuilder("GetTableTypes_args(");
          int tmp964 = 0;
          if ((Req != null) && __isset.req)
          {
            if (0 < tmp964++) { tmp963.Append(", "); }
            tmp963.Append("Req: ");
            Req.ToString(tmp963);
          }
          tmp963.Append(')');
          return tmp963.ToString();
        }
      }


      public partial class GetTableTypes_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetTableTypesResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetTableTypesResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public GetTableTypes_result()
        {
        }

        public GetTableTypes_result DeepCopy()
        {
          var tmp965 = new GetTableTypes_result();
          if ((Success != null) && __isset.success)
          {
            tmp965.Success = (global::Apache.Hive.Service.Rpc.Thrift.TGetTableTypesResp)this.Success.DeepCopy();
          }
          tmp965.__isset.success = this.__isset.success;
          return tmp965;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TGetTableTypesResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp966 = new TStruct("GetTableTypes_result");
            await oprot.WriteStructBeginAsync(tmp966, cancellationToken);
            var tmp967 = new TField();

            if (this.__isset.success)
            {
              if (Success != null)
              {
                tmp967.Name = "Success";
                tmp967.Type = TType.Struct;
                tmp967.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp967, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetTableTypes_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if ((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp968 = new StringBuilder("GetTableTypes_result(");
          int tmp969 = 0;
          if ((Success != null) && __isset.success)
          {
            if (0 < tmp969++) { tmp968.Append(", "); }
            tmp968.Append("Success: ");
            Success.ToString(tmp968);
          }
          tmp968.Append(')');
          return tmp968.ToString();
        }
      }


      public partial class GetColumns_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetColumnsReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetColumnsReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public GetColumns_args()
        {
        }

        public GetColumns_args DeepCopy()
        {
          var tmp970 = new GetColumns_args();
          if ((Req != null) && __isset.req)
          {
            tmp970.Req = (global::Apache.Hive.Service.Rpc.Thrift.TGetColumnsReq)this.Req.DeepCopy();
          }
          tmp970.__isset.req = this.__isset.req;
          return tmp970;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TGetColumnsReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp971 = new TStruct("GetColumns_args");
            await oprot.WriteStructBeginAsync(tmp971, cancellationToken);
            var tmp972 = new TField();
            if ((Req != null) && __isset.req)
            {
              tmp972.Name = "req";
              tmp972.Type = TType.Struct;
              tmp972.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp972, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetColumns_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if ((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp973 = new StringBuilder("GetColumns_args(");
          int tmp974 = 0;
          if ((Req != null) && __isset.req)
          {
            if (0 < tmp974++) { tmp973.Append(", "); }
            tmp973.Append("Req: ");
            Req.ToString(tmp973);
          }
          tmp973.Append(')');
          return tmp973.ToString();
        }
      }


      public partial class GetColumns_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetColumnsResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetColumnsResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public GetColumns_result()
        {
        }

        public GetColumns_result DeepCopy()
        {
          var tmp975 = new GetColumns_result();
          if ((Success != null) && __isset.success)
          {
            tmp975.Success = (global::Apache.Hive.Service.Rpc.Thrift.TGetColumnsResp)this.Success.DeepCopy();
          }
          tmp975.__isset.success = this.__isset.success;
          return tmp975;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TGetColumnsResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp976 = new TStruct("GetColumns_result");
            await oprot.WriteStructBeginAsync(tmp976, cancellationToken);
            var tmp977 = new TField();

            if (this.__isset.success)
            {
              if (Success != null)
              {
                tmp977.Name = "Success";
                tmp977.Type = TType.Struct;
                tmp977.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp977, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetColumns_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if ((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp978 = new StringBuilder("GetColumns_result(");
          int tmp979 = 0;
          if ((Success != null) && __isset.success)
          {
            if (0 < tmp979++) { tmp978.Append(", "); }
            tmp978.Append("Success: ");
            Success.ToString(tmp978);
          }
          tmp978.Append(')');
          return tmp978.ToString();
        }
      }


      public partial class GetFunctions_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetFunctionsReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetFunctionsReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public GetFunctions_args()
        {
        }

        public GetFunctions_args DeepCopy()
        {
          var tmp980 = new GetFunctions_args();
          if ((Req != null) && __isset.req)
          {
            tmp980.Req = (global::Apache.Hive.Service.Rpc.Thrift.TGetFunctionsReq)this.Req.DeepCopy();
          }
          tmp980.__isset.req = this.__isset.req;
          return tmp980;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TGetFunctionsReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp981 = new TStruct("GetFunctions_args");
            await oprot.WriteStructBeginAsync(tmp981, cancellationToken);
            var tmp982 = new TField();
            if ((Req != null) && __isset.req)
            {
              tmp982.Name = "req";
              tmp982.Type = TType.Struct;
              tmp982.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp982, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetFunctions_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if ((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp983 = new StringBuilder("GetFunctions_args(");
          int tmp984 = 0;
          if ((Req != null) && __isset.req)
          {
            if (0 < tmp984++) { tmp983.Append(", "); }
            tmp983.Append("Req: ");
            Req.ToString(tmp983);
          }
          tmp983.Append(')');
          return tmp983.ToString();
        }
      }


      public partial class GetFunctions_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetFunctionsResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetFunctionsResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public GetFunctions_result()
        {
        }

        public GetFunctions_result DeepCopy()
        {
          var tmp985 = new GetFunctions_result();
          if ((Success != null) && __isset.success)
          {
            tmp985.Success = (global::Apache.Hive.Service.Rpc.Thrift.TGetFunctionsResp)this.Success.DeepCopy();
          }
          tmp985.__isset.success = this.__isset.success;
          return tmp985;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TGetFunctionsResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp986 = new TStruct("GetFunctions_result");
            await oprot.WriteStructBeginAsync(tmp986, cancellationToken);
            var tmp987 = new TField();

            if (this.__isset.success)
            {
              if (Success != null)
              {
                tmp987.Name = "Success";
                tmp987.Type = TType.Struct;
                tmp987.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp987, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetFunctions_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if ((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp988 = new StringBuilder("GetFunctions_result(");
          int tmp989 = 0;
          if ((Success != null) && __isset.success)
          {
            if (0 < tmp989++) { tmp988.Append(", "); }
            tmp988.Append("Success: ");
            Success.ToString(tmp988);
          }
          tmp988.Append(')');
          return tmp988.ToString();
        }
      }


      public partial class GetPrimaryKeys_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetPrimaryKeysReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetPrimaryKeysReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public GetPrimaryKeys_args()
        {
        }

        public GetPrimaryKeys_args DeepCopy()
        {
          var tmp990 = new GetPrimaryKeys_args();
          if ((Req != null) && __isset.req)
          {
            tmp990.Req = (global::Apache.Hive.Service.Rpc.Thrift.TGetPrimaryKeysReq)this.Req.DeepCopy();
          }
          tmp990.__isset.req = this.__isset.req;
          return tmp990;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TGetPrimaryKeysReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp991 = new TStruct("GetPrimaryKeys_args");
            await oprot.WriteStructBeginAsync(tmp991, cancellationToken);
            var tmp992 = new TField();
            if ((Req != null) && __isset.req)
            {
              tmp992.Name = "req";
              tmp992.Type = TType.Struct;
              tmp992.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp992, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetPrimaryKeys_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if ((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp993 = new StringBuilder("GetPrimaryKeys_args(");
          int tmp994 = 0;
          if ((Req != null) && __isset.req)
          {
            if (0 < tmp994++) { tmp993.Append(", "); }
            tmp993.Append("Req: ");
            Req.ToString(tmp993);
          }
          tmp993.Append(')');
          return tmp993.ToString();
        }
      }


      public partial class GetPrimaryKeys_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetPrimaryKeysResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetPrimaryKeysResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public GetPrimaryKeys_result()
        {
        }

        public GetPrimaryKeys_result DeepCopy()
        {
          var tmp995 = new GetPrimaryKeys_result();
          if ((Success != null) && __isset.success)
          {
            tmp995.Success = (global::Apache.Hive.Service.Rpc.Thrift.TGetPrimaryKeysResp)this.Success.DeepCopy();
          }
          tmp995.__isset.success = this.__isset.success;
          return tmp995;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TGetPrimaryKeysResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp996 = new TStruct("GetPrimaryKeys_result");
            await oprot.WriteStructBeginAsync(tmp996, cancellationToken);
            var tmp997 = new TField();

            if (this.__isset.success)
            {
              if (Success != null)
              {
                tmp997.Name = "Success";
                tmp997.Type = TType.Struct;
                tmp997.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp997, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetPrimaryKeys_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if ((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp998 = new StringBuilder("GetPrimaryKeys_result(");
          int tmp999 = 0;
          if ((Success != null) && __isset.success)
          {
            if (0 < tmp999++) { tmp998.Append(", "); }
            tmp998.Append("Success: ");
            Success.ToString(tmp998);
          }
          tmp998.Append(')');
          return tmp998.ToString();
        }
      }


      public partial class GetCrossReference_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetCrossReferenceReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetCrossReferenceReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public GetCrossReference_args()
        {
        }

        public GetCrossReference_args DeepCopy()
        {
          var tmp1000 = new GetCrossReference_args();
          if ((Req != null) && __isset.req)
          {
            tmp1000.Req = (global::Apache.Hive.Service.Rpc.Thrift.TGetCrossReferenceReq)this.Req.DeepCopy();
          }
          tmp1000.__isset.req = this.__isset.req;
          return tmp1000;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TGetCrossReferenceReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1001 = new TStruct("GetCrossReference_args");
            await oprot.WriteStructBeginAsync(tmp1001, cancellationToken);
            var tmp1002 = new TField();
            if ((Req != null) && __isset.req)
            {
              tmp1002.Name = "req";
              tmp1002.Type = TType.Struct;
              tmp1002.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1002, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetCrossReference_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if ((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1003 = new StringBuilder("GetCrossReference_args(");
          int tmp1004 = 0;
          if ((Req != null) && __isset.req)
          {
            if (0 < tmp1004++) { tmp1003.Append(", "); }
            tmp1003.Append("Req: ");
            Req.ToString(tmp1003);
          }
          tmp1003.Append(')');
          return tmp1003.ToString();
        }
      }


      public partial class GetCrossReference_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetCrossReferenceResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetCrossReferenceResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public GetCrossReference_result()
        {
        }

        public GetCrossReference_result DeepCopy()
        {
          var tmp1005 = new GetCrossReference_result();
          if ((Success != null) && __isset.success)
          {
            tmp1005.Success = (global::Apache.Hive.Service.Rpc.Thrift.TGetCrossReferenceResp)this.Success.DeepCopy();
          }
          tmp1005.__isset.success = this.__isset.success;
          return tmp1005;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TGetCrossReferenceResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1006 = new TStruct("GetCrossReference_result");
            await oprot.WriteStructBeginAsync(tmp1006, cancellationToken);
            var tmp1007 = new TField();

            if (this.__isset.success)
            {
              if (Success != null)
              {
                tmp1007.Name = "Success";
                tmp1007.Type = TType.Struct;
                tmp1007.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1007, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetCrossReference_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if ((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1008 = new StringBuilder("GetCrossReference_result(");
          int tmp1009 = 0;
          if ((Success != null) && __isset.success)
          {
            if (0 < tmp1009++) { tmp1008.Append(", "); }
            tmp1008.Append("Success: ");
            Success.ToString(tmp1008);
          }
          tmp1008.Append(')');
          return tmp1008.ToString();
        }
      }


      public partial class GetOperationStatus_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetOperationStatusReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetOperationStatusReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public GetOperationStatus_args()
        {
        }

        public GetOperationStatus_args DeepCopy()
        {
          var tmp1010 = new GetOperationStatus_args();
          if ((Req != null) && __isset.req)
          {
            tmp1010.Req = (global::Apache.Hive.Service.Rpc.Thrift.TGetOperationStatusReq)this.Req.DeepCopy();
          }
          tmp1010.__isset.req = this.__isset.req;
          return tmp1010;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TGetOperationStatusReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1011 = new TStruct("GetOperationStatus_args");
            await oprot.WriteStructBeginAsync(tmp1011, cancellationToken);
            var tmp1012 = new TField();
            if ((Req != null) && __isset.req)
            {
              tmp1012.Name = "req";
              tmp1012.Type = TType.Struct;
              tmp1012.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1012, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetOperationStatus_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if ((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1013 = new StringBuilder("GetOperationStatus_args(");
          int tmp1014 = 0;
          if ((Req != null) && __isset.req)
          {
            if (0 < tmp1014++) { tmp1013.Append(", "); }
            tmp1013.Append("Req: ");
            Req.ToString(tmp1013);
          }
          tmp1013.Append(')');
          return tmp1013.ToString();
        }
      }


      public partial class GetOperationStatus_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetOperationStatusResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetOperationStatusResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public GetOperationStatus_result()
        {
        }

        public GetOperationStatus_result DeepCopy()
        {
          var tmp1015 = new GetOperationStatus_result();
          if ((Success != null) && __isset.success)
          {
            tmp1015.Success = (global::Apache.Hive.Service.Rpc.Thrift.TGetOperationStatusResp)this.Success.DeepCopy();
          }
          tmp1015.__isset.success = this.__isset.success;
          return tmp1015;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TGetOperationStatusResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1016 = new TStruct("GetOperationStatus_result");
            await oprot.WriteStructBeginAsync(tmp1016, cancellationToken);
            var tmp1017 = new TField();

            if (this.__isset.success)
            {
              if (Success != null)
              {
                tmp1017.Name = "Success";
                tmp1017.Type = TType.Struct;
                tmp1017.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1017, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetOperationStatus_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if ((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1018 = new StringBuilder("GetOperationStatus_result(");
          int tmp1019 = 0;
          if ((Success != null) && __isset.success)
          {
            if (0 < tmp1019++) { tmp1018.Append(", "); }
            tmp1018.Append("Success: ");
            Success.ToString(tmp1018);
          }
          tmp1018.Append(')');
          return tmp1018.ToString();
        }
      }


      public partial class CancelOperation_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TCancelOperationReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TCancelOperationReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public CancelOperation_args()
        {
        }

        public CancelOperation_args DeepCopy()
        {
          var tmp1020 = new CancelOperation_args();
          if ((Req != null) && __isset.req)
          {
            tmp1020.Req = (global::Apache.Hive.Service.Rpc.Thrift.TCancelOperationReq)this.Req.DeepCopy();
          }
          tmp1020.__isset.req = this.__isset.req;
          return tmp1020;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TCancelOperationReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1021 = new TStruct("CancelOperation_args");
            await oprot.WriteStructBeginAsync(tmp1021, cancellationToken);
            var tmp1022 = new TField();
            if ((Req != null) && __isset.req)
            {
              tmp1022.Name = "req";
              tmp1022.Type = TType.Struct;
              tmp1022.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1022, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is CancelOperation_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if ((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1023 = new StringBuilder("CancelOperation_args(");
          int tmp1024 = 0;
          if ((Req != null) && __isset.req)
          {
            if (0 < tmp1024++) { tmp1023.Append(", "); }
            tmp1023.Append("Req: ");
            Req.ToString(tmp1023);
          }
          tmp1023.Append(')');
          return tmp1023.ToString();
        }
      }


      public partial class CancelOperation_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TCancelOperationResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TCancelOperationResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public CancelOperation_result()
        {
        }

        public CancelOperation_result DeepCopy()
        {
          var tmp1025 = new CancelOperation_result();
          if ((Success != null) && __isset.success)
          {
            tmp1025.Success = (global::Apache.Hive.Service.Rpc.Thrift.TCancelOperationResp)this.Success.DeepCopy();
          }
          tmp1025.__isset.success = this.__isset.success;
          return tmp1025;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TCancelOperationResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1026 = new TStruct("CancelOperation_result");
            await oprot.WriteStructBeginAsync(tmp1026, cancellationToken);
            var tmp1027 = new TField();

            if (this.__isset.success)
            {
              if (Success != null)
              {
                tmp1027.Name = "Success";
                tmp1027.Type = TType.Struct;
                tmp1027.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1027, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is CancelOperation_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if ((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1028 = new StringBuilder("CancelOperation_result(");
          int tmp1029 = 0;
          if ((Success != null) && __isset.success)
          {
            if (0 < tmp1029++) { tmp1028.Append(", "); }
            tmp1028.Append("Success: ");
            Success.ToString(tmp1028);
          }
          tmp1028.Append(')');
          return tmp1028.ToString();
        }
      }


      public partial class CloseOperation_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TCloseOperationReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TCloseOperationReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public CloseOperation_args()
        {
        }

        public CloseOperation_args DeepCopy()
        {
          var tmp1030 = new CloseOperation_args();
          if ((Req != null) && __isset.req)
          {
            tmp1030.Req = (global::Apache.Hive.Service.Rpc.Thrift.TCloseOperationReq)this.Req.DeepCopy();
          }
          tmp1030.__isset.req = this.__isset.req;
          return tmp1030;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TCloseOperationReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1031 = new TStruct("CloseOperation_args");
            await oprot.WriteStructBeginAsync(tmp1031, cancellationToken);
            var tmp1032 = new TField();
            if ((Req != null) && __isset.req)
            {
              tmp1032.Name = "req";
              tmp1032.Type = TType.Struct;
              tmp1032.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1032, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is CloseOperation_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if ((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1033 = new StringBuilder("CloseOperation_args(");
          int tmp1034 = 0;
          if ((Req != null) && __isset.req)
          {
            if (0 < tmp1034++) { tmp1033.Append(", "); }
            tmp1033.Append("Req: ");
            Req.ToString(tmp1033);
          }
          tmp1033.Append(')');
          return tmp1033.ToString();
        }
      }


      public partial class CloseOperation_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TCloseOperationResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TCloseOperationResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public CloseOperation_result()
        {
        }

        public CloseOperation_result DeepCopy()
        {
          var tmp1035 = new CloseOperation_result();
          if ((Success != null) && __isset.success)
          {
            tmp1035.Success = (global::Apache.Hive.Service.Rpc.Thrift.TCloseOperationResp)this.Success.DeepCopy();
          }
          tmp1035.__isset.success = this.__isset.success;
          return tmp1035;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TCloseOperationResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1036 = new TStruct("CloseOperation_result");
            await oprot.WriteStructBeginAsync(tmp1036, cancellationToken);
            var tmp1037 = new TField();

            if (this.__isset.success)
            {
              if (Success != null)
              {
                tmp1037.Name = "Success";
                tmp1037.Type = TType.Struct;
                tmp1037.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1037, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is CloseOperation_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if ((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1038 = new StringBuilder("CloseOperation_result(");
          int tmp1039 = 0;
          if ((Success != null) && __isset.success)
          {
            if (0 < tmp1039++) { tmp1038.Append(", "); }
            tmp1038.Append("Success: ");
            Success.ToString(tmp1038);
          }
          tmp1038.Append(')');
          return tmp1038.ToString();
        }
      }


      public partial class GetResultSetMetadata_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetResultSetMetadataReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetResultSetMetadataReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public GetResultSetMetadata_args()
        {
        }

        public GetResultSetMetadata_args DeepCopy()
        {
          var tmp1040 = new GetResultSetMetadata_args();
          if ((Req != null) && __isset.req)
          {
            tmp1040.Req = (global::Apache.Hive.Service.Rpc.Thrift.TGetResultSetMetadataReq)this.Req.DeepCopy();
          }
          tmp1040.__isset.req = this.__isset.req;
          return tmp1040;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TGetResultSetMetadataReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1041 = new TStruct("GetResultSetMetadata_args");
            await oprot.WriteStructBeginAsync(tmp1041, cancellationToken);
            var tmp1042 = new TField();
            if ((Req != null) && __isset.req)
            {
              tmp1042.Name = "req";
              tmp1042.Type = TType.Struct;
              tmp1042.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1042, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetResultSetMetadata_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if ((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1043 = new StringBuilder("GetResultSetMetadata_args(");
          int tmp1044 = 0;
          if ((Req != null) && __isset.req)
          {
            if (0 < tmp1044++) { tmp1043.Append(", "); }
            tmp1043.Append("Req: ");
            Req.ToString(tmp1043);
          }
          tmp1043.Append(')');
          return tmp1043.ToString();
        }
      }


      public partial class GetResultSetMetadata_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetResultSetMetadataResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetResultSetMetadataResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public GetResultSetMetadata_result()
        {
        }

        public GetResultSetMetadata_result DeepCopy()
        {
          var tmp1045 = new GetResultSetMetadata_result();
          if ((Success != null) && __isset.success)
          {
            tmp1045.Success = (global::Apache.Hive.Service.Rpc.Thrift.TGetResultSetMetadataResp)this.Success.DeepCopy();
          }
          tmp1045.__isset.success = this.__isset.success;
          return tmp1045;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TGetResultSetMetadataResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1046 = new TStruct("GetResultSetMetadata_result");
            await oprot.WriteStructBeginAsync(tmp1046, cancellationToken);
            var tmp1047 = new TField();

            if (this.__isset.success)
            {
              if (Success != null)
              {
                tmp1047.Name = "Success";
                tmp1047.Type = TType.Struct;
                tmp1047.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1047, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetResultSetMetadata_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if ((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1048 = new StringBuilder("GetResultSetMetadata_result(");
          int tmp1049 = 0;
          if ((Success != null) && __isset.success)
          {
            if (0 < tmp1049++) { tmp1048.Append(", "); }
            tmp1048.Append("Success: ");
            Success.ToString(tmp1048);
          }
          tmp1048.Append(')');
          return tmp1048.ToString();
        }
      }


      public partial class FetchResults_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TFetchResultsReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TFetchResultsReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public FetchResults_args()
        {
        }

        public FetchResults_args DeepCopy()
        {
          var tmp1050 = new FetchResults_args();
          if ((Req != null) && __isset.req)
          {
            tmp1050.Req = (global::Apache.Hive.Service.Rpc.Thrift.TFetchResultsReq)this.Req.DeepCopy();
          }
          tmp1050.__isset.req = this.__isset.req;
          return tmp1050;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TFetchResultsReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1051 = new TStruct("FetchResults_args");
            await oprot.WriteStructBeginAsync(tmp1051, cancellationToken);
            var tmp1052 = new TField();
            if ((Req != null) && __isset.req)
            {
              tmp1052.Name = "req";
              tmp1052.Type = TType.Struct;
              tmp1052.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1052, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is FetchResults_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if ((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1053 = new StringBuilder("FetchResults_args(");
          int tmp1054 = 0;
          if ((Req != null) && __isset.req)
          {
            if (0 < tmp1054++) { tmp1053.Append(", "); }
            tmp1053.Append("Req: ");
            Req.ToString(tmp1053);
          }
          tmp1053.Append(')');
          return tmp1053.ToString();
        }
      }


      public partial class FetchResults_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TFetchResultsResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TFetchResultsResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public FetchResults_result()
        {
        }

        public FetchResults_result DeepCopy()
        {
          var tmp1055 = new FetchResults_result();
          if ((Success != null) && __isset.success)
          {
            tmp1055.Success = (global::Apache.Hive.Service.Rpc.Thrift.TFetchResultsResp)this.Success.DeepCopy();
          }
          tmp1055.__isset.success = this.__isset.success;
          return tmp1055;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TFetchResultsResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1056 = new TStruct("FetchResults_result");
            await oprot.WriteStructBeginAsync(tmp1056, cancellationToken);
            var tmp1057 = new TField();

            if (this.__isset.success)
            {
              if (Success != null)
              {
                tmp1057.Name = "Success";
                tmp1057.Type = TType.Struct;
                tmp1057.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1057, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is FetchResults_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if ((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1058 = new StringBuilder("FetchResults_result(");
          int tmp1059 = 0;
          if ((Success != null) && __isset.success)
          {
            if (0 < tmp1059++) { tmp1058.Append(", "); }
            tmp1058.Append("Success: ");
            Success.ToString(tmp1058);
          }
          tmp1058.Append(')');
          return tmp1058.ToString();
        }
      }


      public partial class GetDelegationToken_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetDelegationTokenReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetDelegationTokenReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public GetDelegationToken_args()
        {
        }

        public GetDelegationToken_args DeepCopy()
        {
          var tmp1060 = new GetDelegationToken_args();
          if ((Req != null) && __isset.req)
          {
            tmp1060.Req = (global::Apache.Hive.Service.Rpc.Thrift.TGetDelegationTokenReq)this.Req.DeepCopy();
          }
          tmp1060.__isset.req = this.__isset.req;
          return tmp1060;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TGetDelegationTokenReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1061 = new TStruct("GetDelegationToken_args");
            await oprot.WriteStructBeginAsync(tmp1061, cancellationToken);
            var tmp1062 = new TField();
            if ((Req != null) && __isset.req)
            {
              tmp1062.Name = "req";
              tmp1062.Type = TType.Struct;
              tmp1062.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1062, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetDelegationToken_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if ((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1063 = new StringBuilder("GetDelegationToken_args(");
          int tmp1064 = 0;
          if ((Req != null) && __isset.req)
          {
            if (0 < tmp1064++) { tmp1063.Append(", "); }
            tmp1063.Append("Req: ");
            Req.ToString(tmp1063);
          }
          tmp1063.Append(')');
          return tmp1063.ToString();
        }
      }


      public partial class GetDelegationToken_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetDelegationTokenResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetDelegationTokenResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public GetDelegationToken_result()
        {
        }

        public GetDelegationToken_result DeepCopy()
        {
          var tmp1065 = new GetDelegationToken_result();
          if ((Success != null) && __isset.success)
          {
            tmp1065.Success = (global::Apache.Hive.Service.Rpc.Thrift.TGetDelegationTokenResp)this.Success.DeepCopy();
          }
          tmp1065.__isset.success = this.__isset.success;
          return tmp1065;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TGetDelegationTokenResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1066 = new TStruct("GetDelegationToken_result");
            await oprot.WriteStructBeginAsync(tmp1066, cancellationToken);
            var tmp1067 = new TField();

            if (this.__isset.success)
            {
              if (Success != null)
              {
                tmp1067.Name = "Success";
                tmp1067.Type = TType.Struct;
                tmp1067.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1067, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetDelegationToken_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if ((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1068 = new StringBuilder("GetDelegationToken_result(");
          int tmp1069 = 0;
          if ((Success != null) && __isset.success)
          {
            if (0 < tmp1069++) { tmp1068.Append(", "); }
            tmp1068.Append("Success: ");
            Success.ToString(tmp1068);
          }
          tmp1068.Append(')');
          return tmp1068.ToString();
        }
      }


      public partial class CancelDelegationToken_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TCancelDelegationTokenReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TCancelDelegationTokenReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public CancelDelegationToken_args()
        {
        }

        public CancelDelegationToken_args DeepCopy()
        {
          var tmp1070 = new CancelDelegationToken_args();
          if ((Req != null) && __isset.req)
          {
            tmp1070.Req = (global::Apache.Hive.Service.Rpc.Thrift.TCancelDelegationTokenReq)this.Req.DeepCopy();
          }
          tmp1070.__isset.req = this.__isset.req;
          return tmp1070;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TCancelDelegationTokenReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1071 = new TStruct("CancelDelegationToken_args");
            await oprot.WriteStructBeginAsync(tmp1071, cancellationToken);
            var tmp1072 = new TField();
            if ((Req != null) && __isset.req)
            {
              tmp1072.Name = "req";
              tmp1072.Type = TType.Struct;
              tmp1072.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1072, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is CancelDelegationToken_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if ((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1073 = new StringBuilder("CancelDelegationToken_args(");
          int tmp1074 = 0;
          if ((Req != null) && __isset.req)
          {
            if (0 < tmp1074++) { tmp1073.Append(", "); }
            tmp1073.Append("Req: ");
            Req.ToString(tmp1073);
          }
          tmp1073.Append(')');
          return tmp1073.ToString();
        }
      }


      public partial class CancelDelegationToken_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TCancelDelegationTokenResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TCancelDelegationTokenResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public CancelDelegationToken_result()
        {
        }

        public CancelDelegationToken_result DeepCopy()
        {
          var tmp1075 = new CancelDelegationToken_result();
          if ((Success != null) && __isset.success)
          {
            tmp1075.Success = (global::Apache.Hive.Service.Rpc.Thrift.TCancelDelegationTokenResp)this.Success.DeepCopy();
          }
          tmp1075.__isset.success = this.__isset.success;
          return tmp1075;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TCancelDelegationTokenResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1076 = new TStruct("CancelDelegationToken_result");
            await oprot.WriteStructBeginAsync(tmp1076, cancellationToken);
            var tmp1077 = new TField();

            if (this.__isset.success)
            {
              if (Success != null)
              {
                tmp1077.Name = "Success";
                tmp1077.Type = TType.Struct;
                tmp1077.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1077, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is CancelDelegationToken_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if ((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1078 = new StringBuilder("CancelDelegationToken_result(");
          int tmp1079 = 0;
          if ((Success != null) && __isset.success)
          {
            if (0 < tmp1079++) { tmp1078.Append(", "); }
            tmp1078.Append("Success: ");
            Success.ToString(tmp1078);
          }
          tmp1078.Append(')');
          return tmp1078.ToString();
        }
      }


      public partial class RenewDelegationToken_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TRenewDelegationTokenReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TRenewDelegationTokenReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public RenewDelegationToken_args()
        {
        }

        public RenewDelegationToken_args DeepCopy()
        {
          var tmp1080 = new RenewDelegationToken_args();
          if ((Req != null) && __isset.req)
          {
            tmp1080.Req = (global::Apache.Hive.Service.Rpc.Thrift.TRenewDelegationTokenReq)this.Req.DeepCopy();
          }
          tmp1080.__isset.req = this.__isset.req;
          return tmp1080;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TRenewDelegationTokenReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1081 = new TStruct("RenewDelegationToken_args");
            await oprot.WriteStructBeginAsync(tmp1081, cancellationToken);
            var tmp1082 = new TField();
            if ((Req != null) && __isset.req)
            {
              tmp1082.Name = "req";
              tmp1082.Type = TType.Struct;
              tmp1082.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1082, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is RenewDelegationToken_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if ((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1083 = new StringBuilder("RenewDelegationToken_args(");
          int tmp1084 = 0;
          if ((Req != null) && __isset.req)
          {
            if (0 < tmp1084++) { tmp1083.Append(", "); }
            tmp1083.Append("Req: ");
            Req.ToString(tmp1083);
          }
          tmp1083.Append(')');
          return tmp1083.ToString();
        }
      }


      public partial class RenewDelegationToken_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TRenewDelegationTokenResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TRenewDelegationTokenResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public RenewDelegationToken_result()
        {
        }

        public RenewDelegationToken_result DeepCopy()
        {
          var tmp1085 = new RenewDelegationToken_result();
          if ((Success != null) && __isset.success)
          {
            tmp1085.Success = (global::Apache.Hive.Service.Rpc.Thrift.TRenewDelegationTokenResp)this.Success.DeepCopy();
          }
          tmp1085.__isset.success = this.__isset.success;
          return tmp1085;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TRenewDelegationTokenResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1086 = new TStruct("RenewDelegationToken_result");
            await oprot.WriteStructBeginAsync(tmp1086, cancellationToken);
            var tmp1087 = new TField();

            if (this.__isset.success)
            {
              if (Success != null)
              {
                tmp1087.Name = "Success";
                tmp1087.Type = TType.Struct;
                tmp1087.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1087, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is RenewDelegationToken_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if ((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1088 = new StringBuilder("RenewDelegationToken_result(");
          int tmp1089 = 0;
          if ((Success != null) && __isset.success)
          {
            if (0 < tmp1089++) { tmp1088.Append(", "); }
            tmp1088.Append("Success: ");
            Success.ToString(tmp1088);
          }
          tmp1088.Append(')');
          return tmp1088.ToString();
        }
      }


      public partial class GetQueryId_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetQueryIdReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetQueryIdReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public GetQueryId_args()
        {
        }

        public GetQueryId_args DeepCopy()
        {
          var tmp1090 = new GetQueryId_args();
          if ((Req != null) && __isset.req)
          {
            tmp1090.Req = (global::Apache.Hive.Service.Rpc.Thrift.TGetQueryIdReq)this.Req.DeepCopy();
          }
          tmp1090.__isset.req = this.__isset.req;
          return tmp1090;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TGetQueryIdReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1091 = new TStruct("GetQueryId_args");
            await oprot.WriteStructBeginAsync(tmp1091, cancellationToken);
            var tmp1092 = new TField();
            if ((Req != null) && __isset.req)
            {
              tmp1092.Name = "req";
              tmp1092.Type = TType.Struct;
              tmp1092.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1092, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetQueryId_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if ((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1093 = new StringBuilder("GetQueryId_args(");
          int tmp1094 = 0;
          if ((Req != null) && __isset.req)
          {
            if (0 < tmp1094++) { tmp1093.Append(", "); }
            tmp1093.Append("Req: ");
            Req.ToString(tmp1093);
          }
          tmp1093.Append(')');
          return tmp1093.ToString();
        }
      }


      public partial class GetQueryId_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetQueryIdResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetQueryIdResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public GetQueryId_result()
        {
        }

        public GetQueryId_result DeepCopy()
        {
          var tmp1095 = new GetQueryId_result();
          if ((Success != null) && __isset.success)
          {
            tmp1095.Success = (global::Apache.Hive.Service.Rpc.Thrift.TGetQueryIdResp)this.Success.DeepCopy();
          }
          tmp1095.__isset.success = this.__isset.success;
          return tmp1095;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TGetQueryIdResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1096 = new TStruct("GetQueryId_result");
            await oprot.WriteStructBeginAsync(tmp1096, cancellationToken);
            var tmp1097 = new TField();

            if (this.__isset.success)
            {
              if (Success != null)
              {
                tmp1097.Name = "Success";
                tmp1097.Type = TType.Struct;
                tmp1097.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1097, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetQueryId_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if ((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1098 = new StringBuilder("GetQueryId_result(");
          int tmp1099 = 0;
          if ((Success != null) && __isset.success)
          {
            if (0 < tmp1099++) { tmp1098.Append(", "); }
            tmp1098.Append("Success: ");
            Success.ToString(tmp1098);
          }
          tmp1098.Append(')');
          return tmp1098.ToString();
        }
      }


      public partial class SetClientInfo_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TSetClientInfoReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TSetClientInfoReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public SetClientInfo_args()
        {
        }

        public SetClientInfo_args DeepCopy()
        {
          var tmp1100 = new SetClientInfo_args();
          if ((Req != null) && __isset.req)
          {
            tmp1100.Req = (global::Apache.Hive.Service.Rpc.Thrift.TSetClientInfoReq)this.Req.DeepCopy();
          }
          tmp1100.__isset.req = this.__isset.req;
          return tmp1100;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TSetClientInfoReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1101 = new TStruct("SetClientInfo_args");
            await oprot.WriteStructBeginAsync(tmp1101, cancellationToken);
            var tmp1102 = new TField();
            if ((Req != null) && __isset.req)
            {
              tmp1102.Name = "req";
              tmp1102.Type = TType.Struct;
              tmp1102.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1102, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is SetClientInfo_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if ((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1103 = new StringBuilder("SetClientInfo_args(");
          int tmp1104 = 0;
          if ((Req != null) && __isset.req)
          {
            if (0 < tmp1104++) { tmp1103.Append(", "); }
            tmp1103.Append("Req: ");
            Req.ToString(tmp1103);
          }
          tmp1103.Append(')');
          return tmp1103.ToString();
        }
      }


      public partial class SetClientInfo_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TSetClientInfoResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TSetClientInfoResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public SetClientInfo_result()
        {
        }

        public SetClientInfo_result DeepCopy()
        {
          var tmp1105 = new SetClientInfo_result();
          if ((Success != null) && __isset.success)
          {
            tmp1105.Success = (global::Apache.Hive.Service.Rpc.Thrift.TSetClientInfoResp)this.Success.DeepCopy();
          }
          tmp1105.__isset.success = this.__isset.success;
          return tmp1105;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TSetClientInfoResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1106 = new TStruct("SetClientInfo_result");
            await oprot.WriteStructBeginAsync(tmp1106, cancellationToken);
            var tmp1107 = new TField();

            if (this.__isset.success)
            {
              if (Success != null)
              {
                tmp1107.Name = "Success";
                tmp1107.Type = TType.Struct;
                tmp1107.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1107, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is SetClientInfo_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if ((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1108 = new StringBuilder("SetClientInfo_result(");
          int tmp1109 = 0;
          if ((Success != null) && __isset.success)
          {
            if (0 < tmp1109++) { tmp1108.Append(", "); }
            tmp1108.Append("Success: ");
            Success.ToString(tmp1108);
          }
          tmp1108.Append(')');
          return tmp1108.ToString();
        }
      }


      public partial class UploadData_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TUploadDataReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TUploadDataReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public UploadData_args()
        {
        }

        public UploadData_args DeepCopy()
        {
          var tmp1110 = new UploadData_args();
          if ((Req != null) && __isset.req)
          {
            tmp1110.Req = (global::Apache.Hive.Service.Rpc.Thrift.TUploadDataReq)this.Req.DeepCopy();
          }
          tmp1110.__isset.req = this.__isset.req;
          return tmp1110;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TUploadDataReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1111 = new TStruct("UploadData_args");
            await oprot.WriteStructBeginAsync(tmp1111, cancellationToken);
            var tmp1112 = new TField();
            if ((Req != null) && __isset.req)
            {
              tmp1112.Name = "req";
              tmp1112.Type = TType.Struct;
              tmp1112.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1112, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is UploadData_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if ((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1113 = new StringBuilder("UploadData_args(");
          int tmp1114 = 0;
          if ((Req != null) && __isset.req)
          {
            if (0 < tmp1114++) { tmp1113.Append(", "); }
            tmp1113.Append("Req: ");
            Req.ToString(tmp1113);
          }
          tmp1113.Append(')');
          return tmp1113.ToString();
        }
      }


      public partial class UploadData_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TUploadDataResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TUploadDataResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public UploadData_result()
        {
        }

        public UploadData_result DeepCopy()
        {
          var tmp1115 = new UploadData_result();
          if ((Success != null) && __isset.success)
          {
            tmp1115.Success = (global::Apache.Hive.Service.Rpc.Thrift.TUploadDataResp)this.Success.DeepCopy();
          }
          tmp1115.__isset.success = this.__isset.success;
          return tmp1115;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TUploadDataResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1116 = new TStruct("UploadData_result");
            await oprot.WriteStructBeginAsync(tmp1116, cancellationToken);
            var tmp1117 = new TField();

            if (this.__isset.success)
            {
              if (Success != null)
              {
                tmp1117.Name = "Success";
                tmp1117.Type = TType.Struct;
                tmp1117.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1117, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is UploadData_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if ((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1118 = new StringBuilder("UploadData_result(");
          int tmp1119 = 0;
          if ((Success != null) && __isset.success)
          {
            if (0 < tmp1119++) { tmp1118.Append(", "); }
            tmp1118.Append("Success: ");
            Success.ToString(tmp1118);
          }
          tmp1118.Append(')');
          return tmp1118.ToString();
        }
      }


      public partial class DownloadData_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TDownloadDataReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TDownloadDataReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool req;
        }

        public DownloadData_args()
        {
        }

        public DownloadData_args DeepCopy()
        {
          var tmp1120 = new DownloadData_args();
          if ((Req != null) && __isset.req)
          {
            tmp1120.Req = (global::Apache.Hive.Service.Rpc.Thrift.TDownloadDataReq)this.Req.DeepCopy();
          }
          tmp1120.__isset.req = this.__isset.req;
          return tmp1120;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TDownloadDataReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1121 = new TStruct("DownloadData_args");
            await oprot.WriteStructBeginAsync(tmp1121, cancellationToken);
            var tmp1122 = new TField();
            if ((Req != null) && __isset.req)
            {
              tmp1122.Name = "req";
              tmp1122.Type = TType.Struct;
              tmp1122.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1122, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is DownloadData_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.req == other.__isset.req) && ((!__isset.req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if ((Req != null) && __isset.req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1123 = new StringBuilder("DownloadData_args(");
          int tmp1124 = 0;
          if ((Req != null) && __isset.req)
          {
            if (0 < tmp1124++) { tmp1123.Append(", "); }
            tmp1123.Append("Req: ");
            Req.ToString(tmp1123);
          }
          tmp1123.Append(')');
          return tmp1123.ToString();
        }
      }


      public partial class DownloadData_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TDownloadDataResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TDownloadDataResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool success;
        }

        public DownloadData_result()
        {
        }

        public DownloadData_result DeepCopy()
        {
          var tmp1125 = new DownloadData_result();
          if ((Success != null) && __isset.success)
          {
            tmp1125.Success = (global::Apache.Hive.Service.Rpc.Thrift.TDownloadDataResp)this.Success.DeepCopy();
          }
          tmp1125.__isset.success = this.__isset.success;
          return tmp1125;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TDownloadDataResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1126 = new TStruct("DownloadData_result");
            await oprot.WriteStructBeginAsync(tmp1126, cancellationToken);
            var tmp1127 = new TField();

            if (this.__isset.success)
            {
              if (Success != null)
              {
                tmp1127.Name = "Success";
                tmp1127.Type = TType.Struct;
                tmp1127.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1127, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is DownloadData_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if ((Success != null) && __isset.success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1128 = new StringBuilder("DownloadData_result(");
          int tmp1129 = 0;
          if ((Success != null) && __isset.success)
          {
            if (0 < tmp1129++) { tmp1128.Append(", "); }
            tmp1128.Append("Success: ");
            Success.ToString(tmp1128);
          }
          tmp1128.Append(')');
          return tmp1128.ToString();
        }
      }

    }

  }
}

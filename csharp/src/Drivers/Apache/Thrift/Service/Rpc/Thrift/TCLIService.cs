/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.21.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


// targeting netstandard 2.x
#if(! NETSTANDARD2_0_OR_GREATER && ! NET6_0_OR_GREATER && ! NET472_OR_GREATER)
#error Unexpected target platform. See 'thrift --help' for details.
#endif

#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable CS0618   // silence our own deprecation warnings
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Apache.Hive.Service.Rpc.Thrift
{
  public partial class TCLIService
  {
    public interface IAsync
    {
      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TOpenSessionResp> OpenSession(global::Apache.Hive.Service.Rpc.Thrift.TOpenSessionReq @req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TCloseSessionResp> CloseSession(global::Apache.Hive.Service.Rpc.Thrift.TCloseSessionReq @req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetInfoResp> GetInfo(global::Apache.Hive.Service.Rpc.Thrift.TGetInfoReq @req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TExecuteStatementResp> ExecuteStatement(global::Apache.Hive.Service.Rpc.Thrift.TExecuteStatementReq @req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetTypeInfoResp> GetTypeInfo(global::Apache.Hive.Service.Rpc.Thrift.TGetTypeInfoReq @req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetCatalogsResp> GetCatalogs(global::Apache.Hive.Service.Rpc.Thrift.TGetCatalogsReq @req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetSchemasResp> GetSchemas(global::Apache.Hive.Service.Rpc.Thrift.TGetSchemasReq @req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetTablesResp> GetTables(global::Apache.Hive.Service.Rpc.Thrift.TGetTablesReq @req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetTableTypesResp> GetTableTypes(global::Apache.Hive.Service.Rpc.Thrift.TGetTableTypesReq @req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetColumnsResp> GetColumns(global::Apache.Hive.Service.Rpc.Thrift.TGetColumnsReq @req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetFunctionsResp> GetFunctions(global::Apache.Hive.Service.Rpc.Thrift.TGetFunctionsReq @req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetPrimaryKeysResp> GetPrimaryKeys(global::Apache.Hive.Service.Rpc.Thrift.TGetPrimaryKeysReq @req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetCrossReferenceResp> GetCrossReference(global::Apache.Hive.Service.Rpc.Thrift.TGetCrossReferenceReq @req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetOperationStatusResp> GetOperationStatus(global::Apache.Hive.Service.Rpc.Thrift.TGetOperationStatusReq @req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TCancelOperationResp> CancelOperation(global::Apache.Hive.Service.Rpc.Thrift.TCancelOperationReq @req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TCloseOperationResp> CloseOperation(global::Apache.Hive.Service.Rpc.Thrift.TCloseOperationReq @req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetResultSetMetadataResp> GetResultSetMetadata(global::Apache.Hive.Service.Rpc.Thrift.TGetResultSetMetadataReq @req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TFetchResultsResp> FetchResults(global::Apache.Hive.Service.Rpc.Thrift.TFetchResultsReq @req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetDelegationTokenResp> GetDelegationToken(global::Apache.Hive.Service.Rpc.Thrift.TGetDelegationTokenReq @req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TCancelDelegationTokenResp> CancelDelegationToken(global::Apache.Hive.Service.Rpc.Thrift.TCancelDelegationTokenReq @req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TRenewDelegationTokenResp> RenewDelegationToken(global::Apache.Hive.Service.Rpc.Thrift.TRenewDelegationTokenReq @req, CancellationToken cancellationToken = default);

    }


    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
      {
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TOpenSessionResp> OpenSession(global::Apache.Hive.Service.Rpc.Thrift.TOpenSessionReq @req, CancellationToken cancellationToken = default)
      {
        await send_OpenSession(@req, cancellationToken);
        return await recv_OpenSession(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_OpenSession(global::Apache.Hive.Service.Rpc.Thrift.TOpenSessionReq @req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("OpenSession", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp607 = new InternalStructs.OpenSession_args() {
          Req = @req,
        };
        
        await tmp607.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TOpenSessionResp> recv_OpenSession(CancellationToken cancellationToken = default)
      {
        
        var tmp608 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp608.Type == TMessageType.Exception)
        {
          var tmp609 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp609;
        }

        var tmp610 = new InternalStructs.OpenSession_result();
        await tmp610.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp610.__isset.success)
        {
          return tmp610.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "OpenSession failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TCloseSessionResp> CloseSession(global::Apache.Hive.Service.Rpc.Thrift.TCloseSessionReq @req, CancellationToken cancellationToken = default)
      {
        await send_CloseSession(@req, cancellationToken);
        return await recv_CloseSession(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_CloseSession(global::Apache.Hive.Service.Rpc.Thrift.TCloseSessionReq @req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("CloseSession", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp611 = new InternalStructs.CloseSession_args() {
          Req = @req,
        };
        
        await tmp611.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TCloseSessionResp> recv_CloseSession(CancellationToken cancellationToken = default)
      {
        
        var tmp612 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp612.Type == TMessageType.Exception)
        {
          var tmp613 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp613;
        }

        var tmp614 = new InternalStructs.CloseSession_result();
        await tmp614.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp614.__isset.success)
        {
          return tmp614.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CloseSession failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetInfoResp> GetInfo(global::Apache.Hive.Service.Rpc.Thrift.TGetInfoReq @req, CancellationToken cancellationToken = default)
      {
        await send_GetInfo(@req, cancellationToken);
        return await recv_GetInfo(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetInfo(global::Apache.Hive.Service.Rpc.Thrift.TGetInfoReq @req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetInfo", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp615 = new InternalStructs.GetInfo_args() {
          Req = @req,
        };
        
        await tmp615.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetInfoResp> recv_GetInfo(CancellationToken cancellationToken = default)
      {
        
        var tmp616 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp616.Type == TMessageType.Exception)
        {
          var tmp617 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp617;
        }

        var tmp618 = new InternalStructs.GetInfo_result();
        await tmp618.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp618.__isset.success)
        {
          return tmp618.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetInfo failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TExecuteStatementResp> ExecuteStatement(global::Apache.Hive.Service.Rpc.Thrift.TExecuteStatementReq @req, CancellationToken cancellationToken = default)
      {
        await send_ExecuteStatement(@req, cancellationToken);
        return await recv_ExecuteStatement(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_ExecuteStatement(global::Apache.Hive.Service.Rpc.Thrift.TExecuteStatementReq @req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("ExecuteStatement", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp619 = new InternalStructs.ExecuteStatement_args() {
          Req = @req,
        };
        
        await tmp619.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TExecuteStatementResp> recv_ExecuteStatement(CancellationToken cancellationToken = default)
      {
        
        var tmp620 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp620.Type == TMessageType.Exception)
        {
          var tmp621 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp621;
        }

        var tmp622 = new InternalStructs.ExecuteStatement_result();
        await tmp622.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp622.__isset.success)
        {
          return tmp622.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ExecuteStatement failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetTypeInfoResp> GetTypeInfo(global::Apache.Hive.Service.Rpc.Thrift.TGetTypeInfoReq @req, CancellationToken cancellationToken = default)
      {
        await send_GetTypeInfo(@req, cancellationToken);
        return await recv_GetTypeInfo(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetTypeInfo(global::Apache.Hive.Service.Rpc.Thrift.TGetTypeInfoReq @req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetTypeInfo", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp623 = new InternalStructs.GetTypeInfo_args() {
          Req = @req,
        };
        
        await tmp623.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetTypeInfoResp> recv_GetTypeInfo(CancellationToken cancellationToken = default)
      {
        
        var tmp624 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp624.Type == TMessageType.Exception)
        {
          var tmp625 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp625;
        }

        var tmp626 = new InternalStructs.GetTypeInfo_result();
        await tmp626.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp626.__isset.success)
        {
          return tmp626.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetTypeInfo failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetCatalogsResp> GetCatalogs(global::Apache.Hive.Service.Rpc.Thrift.TGetCatalogsReq @req, CancellationToken cancellationToken = default)
      {
        await send_GetCatalogs(@req, cancellationToken);
        return await recv_GetCatalogs(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetCatalogs(global::Apache.Hive.Service.Rpc.Thrift.TGetCatalogsReq @req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetCatalogs", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp627 = new InternalStructs.GetCatalogs_args() {
          Req = @req,
        };
        
        await tmp627.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetCatalogsResp> recv_GetCatalogs(CancellationToken cancellationToken = default)
      {
        
        var tmp628 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp628.Type == TMessageType.Exception)
        {
          var tmp629 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp629;
        }

        var tmp630 = new InternalStructs.GetCatalogs_result();
        await tmp630.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp630.__isset.success)
        {
          return tmp630.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetCatalogs failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetSchemasResp> GetSchemas(global::Apache.Hive.Service.Rpc.Thrift.TGetSchemasReq @req, CancellationToken cancellationToken = default)
      {
        await send_GetSchemas(@req, cancellationToken);
        return await recv_GetSchemas(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetSchemas(global::Apache.Hive.Service.Rpc.Thrift.TGetSchemasReq @req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetSchemas", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp631 = new InternalStructs.GetSchemas_args() {
          Req = @req,
        };
        
        await tmp631.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetSchemasResp> recv_GetSchemas(CancellationToken cancellationToken = default)
      {
        
        var tmp632 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp632.Type == TMessageType.Exception)
        {
          var tmp633 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp633;
        }

        var tmp634 = new InternalStructs.GetSchemas_result();
        await tmp634.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp634.__isset.success)
        {
          return tmp634.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetSchemas failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetTablesResp> GetTables(global::Apache.Hive.Service.Rpc.Thrift.TGetTablesReq @req, CancellationToken cancellationToken = default)
      {
        await send_GetTables(@req, cancellationToken);
        return await recv_GetTables(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetTables(global::Apache.Hive.Service.Rpc.Thrift.TGetTablesReq @req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetTables", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp635 = new InternalStructs.GetTables_args() {
          Req = @req,
        };
        
        await tmp635.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetTablesResp> recv_GetTables(CancellationToken cancellationToken = default)
      {
        
        var tmp636 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp636.Type == TMessageType.Exception)
        {
          var tmp637 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp637;
        }

        var tmp638 = new InternalStructs.GetTables_result();
        await tmp638.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp638.__isset.success)
        {
          return tmp638.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetTables failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetTableTypesResp> GetTableTypes(global::Apache.Hive.Service.Rpc.Thrift.TGetTableTypesReq @req, CancellationToken cancellationToken = default)
      {
        await send_GetTableTypes(@req, cancellationToken);
        return await recv_GetTableTypes(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetTableTypes(global::Apache.Hive.Service.Rpc.Thrift.TGetTableTypesReq @req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetTableTypes", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp639 = new InternalStructs.GetTableTypes_args() {
          Req = @req,
        };
        
        await tmp639.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetTableTypesResp> recv_GetTableTypes(CancellationToken cancellationToken = default)
      {
        
        var tmp640 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp640.Type == TMessageType.Exception)
        {
          var tmp641 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp641;
        }

        var tmp642 = new InternalStructs.GetTableTypes_result();
        await tmp642.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp642.__isset.success)
        {
          return tmp642.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetTableTypes failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetColumnsResp> GetColumns(global::Apache.Hive.Service.Rpc.Thrift.TGetColumnsReq @req, CancellationToken cancellationToken = default)
      {
        await send_GetColumns(@req, cancellationToken);
        return await recv_GetColumns(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetColumns(global::Apache.Hive.Service.Rpc.Thrift.TGetColumnsReq @req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetColumns", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp643 = new InternalStructs.GetColumns_args() {
          Req = @req,
        };
        
        await tmp643.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetColumnsResp> recv_GetColumns(CancellationToken cancellationToken = default)
      {
        
        var tmp644 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp644.Type == TMessageType.Exception)
        {
          var tmp645 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp645;
        }

        var tmp646 = new InternalStructs.GetColumns_result();
        await tmp646.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp646.__isset.success)
        {
          return tmp646.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetColumns failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetFunctionsResp> GetFunctions(global::Apache.Hive.Service.Rpc.Thrift.TGetFunctionsReq @req, CancellationToken cancellationToken = default)
      {
        await send_GetFunctions(@req, cancellationToken);
        return await recv_GetFunctions(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetFunctions(global::Apache.Hive.Service.Rpc.Thrift.TGetFunctionsReq @req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetFunctions", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp647 = new InternalStructs.GetFunctions_args() {
          Req = @req,
        };
        
        await tmp647.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetFunctionsResp> recv_GetFunctions(CancellationToken cancellationToken = default)
      {
        
        var tmp648 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp648.Type == TMessageType.Exception)
        {
          var tmp649 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp649;
        }

        var tmp650 = new InternalStructs.GetFunctions_result();
        await tmp650.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp650.__isset.success)
        {
          return tmp650.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetFunctions failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetPrimaryKeysResp> GetPrimaryKeys(global::Apache.Hive.Service.Rpc.Thrift.TGetPrimaryKeysReq @req, CancellationToken cancellationToken = default)
      {
        await send_GetPrimaryKeys(@req, cancellationToken);
        return await recv_GetPrimaryKeys(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetPrimaryKeys(global::Apache.Hive.Service.Rpc.Thrift.TGetPrimaryKeysReq @req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetPrimaryKeys", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp651 = new InternalStructs.GetPrimaryKeys_args() {
          Req = @req,
        };
        
        await tmp651.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetPrimaryKeysResp> recv_GetPrimaryKeys(CancellationToken cancellationToken = default)
      {
        
        var tmp652 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp652.Type == TMessageType.Exception)
        {
          var tmp653 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp653;
        }

        var tmp654 = new InternalStructs.GetPrimaryKeys_result();
        await tmp654.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp654.__isset.success)
        {
          return tmp654.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetPrimaryKeys failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetCrossReferenceResp> GetCrossReference(global::Apache.Hive.Service.Rpc.Thrift.TGetCrossReferenceReq @req, CancellationToken cancellationToken = default)
      {
        await send_GetCrossReference(@req, cancellationToken);
        return await recv_GetCrossReference(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetCrossReference(global::Apache.Hive.Service.Rpc.Thrift.TGetCrossReferenceReq @req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetCrossReference", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp655 = new InternalStructs.GetCrossReference_args() {
          Req = @req,
        };
        
        await tmp655.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetCrossReferenceResp> recv_GetCrossReference(CancellationToken cancellationToken = default)
      {
        
        var tmp656 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp656.Type == TMessageType.Exception)
        {
          var tmp657 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp657;
        }

        var tmp658 = new InternalStructs.GetCrossReference_result();
        await tmp658.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp658.__isset.success)
        {
          return tmp658.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetCrossReference failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetOperationStatusResp> GetOperationStatus(global::Apache.Hive.Service.Rpc.Thrift.TGetOperationStatusReq @req, CancellationToken cancellationToken = default)
      {
        await send_GetOperationStatus(@req, cancellationToken);
        return await recv_GetOperationStatus(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetOperationStatus(global::Apache.Hive.Service.Rpc.Thrift.TGetOperationStatusReq @req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetOperationStatus", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp659 = new InternalStructs.GetOperationStatus_args() {
          Req = @req,
        };
        
        await tmp659.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetOperationStatusResp> recv_GetOperationStatus(CancellationToken cancellationToken = default)
      {
        
        var tmp660 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp660.Type == TMessageType.Exception)
        {
          var tmp661 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp661;
        }

        var tmp662 = new InternalStructs.GetOperationStatus_result();
        await tmp662.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp662.__isset.success)
        {
          return tmp662.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetOperationStatus failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TCancelOperationResp> CancelOperation(global::Apache.Hive.Service.Rpc.Thrift.TCancelOperationReq @req, CancellationToken cancellationToken = default)
      {
        await send_CancelOperation(@req, cancellationToken);
        return await recv_CancelOperation(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_CancelOperation(global::Apache.Hive.Service.Rpc.Thrift.TCancelOperationReq @req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("CancelOperation", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp663 = new InternalStructs.CancelOperation_args() {
          Req = @req,
        };
        
        await tmp663.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TCancelOperationResp> recv_CancelOperation(CancellationToken cancellationToken = default)
      {
        
        var tmp664 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp664.Type == TMessageType.Exception)
        {
          var tmp665 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp665;
        }

        var tmp666 = new InternalStructs.CancelOperation_result();
        await tmp666.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp666.__isset.success)
        {
          return tmp666.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CancelOperation failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TCloseOperationResp> CloseOperation(global::Apache.Hive.Service.Rpc.Thrift.TCloseOperationReq @req, CancellationToken cancellationToken = default)
      {
        await send_CloseOperation(@req, cancellationToken);
        return await recv_CloseOperation(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_CloseOperation(global::Apache.Hive.Service.Rpc.Thrift.TCloseOperationReq @req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("CloseOperation", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp667 = new InternalStructs.CloseOperation_args() {
          Req = @req,
        };
        
        await tmp667.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TCloseOperationResp> recv_CloseOperation(CancellationToken cancellationToken = default)
      {
        
        var tmp668 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp668.Type == TMessageType.Exception)
        {
          var tmp669 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp669;
        }

        var tmp670 = new InternalStructs.CloseOperation_result();
        await tmp670.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp670.__isset.success)
        {
          return tmp670.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CloseOperation failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetResultSetMetadataResp> GetResultSetMetadata(global::Apache.Hive.Service.Rpc.Thrift.TGetResultSetMetadataReq @req, CancellationToken cancellationToken = default)
      {
        await send_GetResultSetMetadata(@req, cancellationToken);
        return await recv_GetResultSetMetadata(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetResultSetMetadata(global::Apache.Hive.Service.Rpc.Thrift.TGetResultSetMetadataReq @req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetResultSetMetadata", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp671 = new InternalStructs.GetResultSetMetadata_args() {
          Req = @req,
        };
        
        await tmp671.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetResultSetMetadataResp> recv_GetResultSetMetadata(CancellationToken cancellationToken = default)
      {
        
        var tmp672 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp672.Type == TMessageType.Exception)
        {
          var tmp673 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp673;
        }

        var tmp674 = new InternalStructs.GetResultSetMetadata_result();
        await tmp674.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp674.__isset.success)
        {
          return tmp674.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetResultSetMetadata failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TFetchResultsResp> FetchResults(global::Apache.Hive.Service.Rpc.Thrift.TFetchResultsReq @req, CancellationToken cancellationToken = default)
      {
        await send_FetchResults(@req, cancellationToken);
        return await recv_FetchResults(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_FetchResults(global::Apache.Hive.Service.Rpc.Thrift.TFetchResultsReq @req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("FetchResults", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp675 = new InternalStructs.FetchResults_args() {
          Req = @req,
        };
        
        await tmp675.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TFetchResultsResp> recv_FetchResults(CancellationToken cancellationToken = default)
      {
        
        var tmp676 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp676.Type == TMessageType.Exception)
        {
          var tmp677 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp677;
        }

        var tmp678 = new InternalStructs.FetchResults_result();
        await tmp678.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp678.__isset.success)
        {
          return tmp678.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "FetchResults failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetDelegationTokenResp> GetDelegationToken(global::Apache.Hive.Service.Rpc.Thrift.TGetDelegationTokenReq @req, CancellationToken cancellationToken = default)
      {
        await send_GetDelegationToken(@req, cancellationToken);
        return await recv_GetDelegationToken(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetDelegationToken(global::Apache.Hive.Service.Rpc.Thrift.TGetDelegationTokenReq @req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetDelegationToken", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp679 = new InternalStructs.GetDelegationToken_args() {
          Req = @req,
        };
        
        await tmp679.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetDelegationTokenResp> recv_GetDelegationToken(CancellationToken cancellationToken = default)
      {
        
        var tmp680 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp680.Type == TMessageType.Exception)
        {
          var tmp681 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp681;
        }

        var tmp682 = new InternalStructs.GetDelegationToken_result();
        await tmp682.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp682.__isset.success)
        {
          return tmp682.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetDelegationToken failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TCancelDelegationTokenResp> CancelDelegationToken(global::Apache.Hive.Service.Rpc.Thrift.TCancelDelegationTokenReq @req, CancellationToken cancellationToken = default)
      {
        await send_CancelDelegationToken(@req, cancellationToken);
        return await recv_CancelDelegationToken(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_CancelDelegationToken(global::Apache.Hive.Service.Rpc.Thrift.TCancelDelegationTokenReq @req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("CancelDelegationToken", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp683 = new InternalStructs.CancelDelegationToken_args() {
          Req = @req,
        };
        
        await tmp683.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TCancelDelegationTokenResp> recv_CancelDelegationToken(CancellationToken cancellationToken = default)
      {
        
        var tmp684 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp684.Type == TMessageType.Exception)
        {
          var tmp685 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp685;
        }

        var tmp686 = new InternalStructs.CancelDelegationToken_result();
        await tmp686.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp686.__isset.success)
        {
          return tmp686.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CancelDelegationToken failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TRenewDelegationTokenResp> RenewDelegationToken(global::Apache.Hive.Service.Rpc.Thrift.TRenewDelegationTokenReq @req, CancellationToken cancellationToken = default)
      {
        await send_RenewDelegationToken(@req, cancellationToken);
        return await recv_RenewDelegationToken(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RenewDelegationToken(global::Apache.Hive.Service.Rpc.Thrift.TRenewDelegationTokenReq @req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RenewDelegationToken", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp687 = new InternalStructs.RenewDelegationToken_args() {
          Req = @req,
        };
        
        await tmp687.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TRenewDelegationTokenResp> recv_RenewDelegationToken(CancellationToken cancellationToken = default)
      {
        
        var tmp688 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp688.Type == TMessageType.Exception)
        {
          var tmp689 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp689;
        }

        var tmp690 = new InternalStructs.RenewDelegationToken_result();
        await tmp690.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp690.__isset.success)
        {
          return tmp690.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RenewDelegationToken failed: unknown result");
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private readonly IAsync _iAsync;
      private readonly ILogger<AsyncProcessor> _logger;

      public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
      {
        _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
        _logger = logger;
        processMap_["OpenSession"] = OpenSession_ProcessAsync;
        processMap_["CloseSession"] = CloseSession_ProcessAsync;
        processMap_["GetInfo"] = GetInfo_ProcessAsync;
        processMap_["ExecuteStatement"] = ExecuteStatement_ProcessAsync;
        processMap_["GetTypeInfo"] = GetTypeInfo_ProcessAsync;
        processMap_["GetCatalogs"] = GetCatalogs_ProcessAsync;
        processMap_["GetSchemas"] = GetSchemas_ProcessAsync;
        processMap_["GetTables"] = GetTables_ProcessAsync;
        processMap_["GetTableTypes"] = GetTableTypes_ProcessAsync;
        processMap_["GetColumns"] = GetColumns_ProcessAsync;
        processMap_["GetFunctions"] = GetFunctions_ProcessAsync;
        processMap_["GetPrimaryKeys"] = GetPrimaryKeys_ProcessAsync;
        processMap_["GetCrossReference"] = GetCrossReference_ProcessAsync;
        processMap_["GetOperationStatus"] = GetOperationStatus_ProcessAsync;
        processMap_["CancelOperation"] = CancelOperation_ProcessAsync;
        processMap_["CloseOperation"] = CloseOperation_ProcessAsync;
        processMap_["GetResultSetMetadata"] = GetResultSetMetadata_ProcessAsync;
        processMap_["FetchResults"] = FetchResults_ProcessAsync;
        processMap_["GetDelegationToken"] = GetDelegationToken_ProcessAsync;
        processMap_["CancelDelegationToken"] = CancelDelegationToken_ProcessAsync;
        processMap_["RenewDelegationToken"] = RenewDelegationToken_ProcessAsync;
      }

      protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          processMap_.TryGetValue(msg.Name, out var fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async global::System.Threading.Tasks.Task OpenSession_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp691 = new InternalStructs.OpenSession_args();
        await tmp691.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp692 = new InternalStructs.OpenSession_result();
        try
        {
          tmp692.Success = await _iAsync.OpenSession(tmp691.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("OpenSession", TMessageType.Reply, seqid), cancellationToken); 
          await tmp692.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp693)
        {
          var tmp694 = $"Error occurred in {GetType().FullName}: {tmp693.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp693, tmp694);
          else
            Console.Error.WriteLine(tmp694);
          var tmp695 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("OpenSession", TMessageType.Exception, seqid), cancellationToken);
          await tmp695.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task CloseSession_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp696 = new InternalStructs.CloseSession_args();
        await tmp696.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp697 = new InternalStructs.CloseSession_result();
        try
        {
          tmp697.Success = await _iAsync.CloseSession(tmp696.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("CloseSession", TMessageType.Reply, seqid), cancellationToken); 
          await tmp697.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp698)
        {
          var tmp699 = $"Error occurred in {GetType().FullName}: {tmp698.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp698, tmp699);
          else
            Console.Error.WriteLine(tmp699);
          var tmp700 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("CloseSession", TMessageType.Exception, seqid), cancellationToken);
          await tmp700.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetInfo_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp701 = new InternalStructs.GetInfo_args();
        await tmp701.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp702 = new InternalStructs.GetInfo_result();
        try
        {
          tmp702.Success = await _iAsync.GetInfo(tmp701.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetInfo", TMessageType.Reply, seqid), cancellationToken); 
          await tmp702.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp703)
        {
          var tmp704 = $"Error occurred in {GetType().FullName}: {tmp703.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp703, tmp704);
          else
            Console.Error.WriteLine(tmp704);
          var tmp705 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetInfo", TMessageType.Exception, seqid), cancellationToken);
          await tmp705.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task ExecuteStatement_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp706 = new InternalStructs.ExecuteStatement_args();
        await tmp706.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp707 = new InternalStructs.ExecuteStatement_result();
        try
        {
          tmp707.Success = await _iAsync.ExecuteStatement(tmp706.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("ExecuteStatement", TMessageType.Reply, seqid), cancellationToken); 
          await tmp707.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp708)
        {
          var tmp709 = $"Error occurred in {GetType().FullName}: {tmp708.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp708, tmp709);
          else
            Console.Error.WriteLine(tmp709);
          var tmp710 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("ExecuteStatement", TMessageType.Exception, seqid), cancellationToken);
          await tmp710.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetTypeInfo_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp711 = new InternalStructs.GetTypeInfo_args();
        await tmp711.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp712 = new InternalStructs.GetTypeInfo_result();
        try
        {
          tmp712.Success = await _iAsync.GetTypeInfo(tmp711.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetTypeInfo", TMessageType.Reply, seqid), cancellationToken); 
          await tmp712.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp713)
        {
          var tmp714 = $"Error occurred in {GetType().FullName}: {tmp713.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp713, tmp714);
          else
            Console.Error.WriteLine(tmp714);
          var tmp715 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetTypeInfo", TMessageType.Exception, seqid), cancellationToken);
          await tmp715.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetCatalogs_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp716 = new InternalStructs.GetCatalogs_args();
        await tmp716.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp717 = new InternalStructs.GetCatalogs_result();
        try
        {
          tmp717.Success = await _iAsync.GetCatalogs(tmp716.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetCatalogs", TMessageType.Reply, seqid), cancellationToken); 
          await tmp717.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp718)
        {
          var tmp719 = $"Error occurred in {GetType().FullName}: {tmp718.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp718, tmp719);
          else
            Console.Error.WriteLine(tmp719);
          var tmp720 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetCatalogs", TMessageType.Exception, seqid), cancellationToken);
          await tmp720.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetSchemas_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp721 = new InternalStructs.GetSchemas_args();
        await tmp721.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp722 = new InternalStructs.GetSchemas_result();
        try
        {
          tmp722.Success = await _iAsync.GetSchemas(tmp721.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetSchemas", TMessageType.Reply, seqid), cancellationToken); 
          await tmp722.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp723)
        {
          var tmp724 = $"Error occurred in {GetType().FullName}: {tmp723.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp723, tmp724);
          else
            Console.Error.WriteLine(tmp724);
          var tmp725 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetSchemas", TMessageType.Exception, seqid), cancellationToken);
          await tmp725.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetTables_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp726 = new InternalStructs.GetTables_args();
        await tmp726.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp727 = new InternalStructs.GetTables_result();
        try
        {
          tmp727.Success = await _iAsync.GetTables(tmp726.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetTables", TMessageType.Reply, seqid), cancellationToken); 
          await tmp727.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp728)
        {
          var tmp729 = $"Error occurred in {GetType().FullName}: {tmp728.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp728, tmp729);
          else
            Console.Error.WriteLine(tmp729);
          var tmp730 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetTables", TMessageType.Exception, seqid), cancellationToken);
          await tmp730.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetTableTypes_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp731 = new InternalStructs.GetTableTypes_args();
        await tmp731.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp732 = new InternalStructs.GetTableTypes_result();
        try
        {
          tmp732.Success = await _iAsync.GetTableTypes(tmp731.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetTableTypes", TMessageType.Reply, seqid), cancellationToken); 
          await tmp732.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp733)
        {
          var tmp734 = $"Error occurred in {GetType().FullName}: {tmp733.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp733, tmp734);
          else
            Console.Error.WriteLine(tmp734);
          var tmp735 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetTableTypes", TMessageType.Exception, seqid), cancellationToken);
          await tmp735.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetColumns_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp736 = new InternalStructs.GetColumns_args();
        await tmp736.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp737 = new InternalStructs.GetColumns_result();
        try
        {
          tmp737.Success = await _iAsync.GetColumns(tmp736.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetColumns", TMessageType.Reply, seqid), cancellationToken); 
          await tmp737.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp738)
        {
          var tmp739 = $"Error occurred in {GetType().FullName}: {tmp738.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp738, tmp739);
          else
            Console.Error.WriteLine(tmp739);
          var tmp740 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetColumns", TMessageType.Exception, seqid), cancellationToken);
          await tmp740.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetFunctions_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp741 = new InternalStructs.GetFunctions_args();
        await tmp741.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp742 = new InternalStructs.GetFunctions_result();
        try
        {
          tmp742.Success = await _iAsync.GetFunctions(tmp741.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetFunctions", TMessageType.Reply, seqid), cancellationToken); 
          await tmp742.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp743)
        {
          var tmp744 = $"Error occurred in {GetType().FullName}: {tmp743.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp743, tmp744);
          else
            Console.Error.WriteLine(tmp744);
          var tmp745 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetFunctions", TMessageType.Exception, seqid), cancellationToken);
          await tmp745.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetPrimaryKeys_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp746 = new InternalStructs.GetPrimaryKeys_args();
        await tmp746.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp747 = new InternalStructs.GetPrimaryKeys_result();
        try
        {
          tmp747.Success = await _iAsync.GetPrimaryKeys(tmp746.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetPrimaryKeys", TMessageType.Reply, seqid), cancellationToken); 
          await tmp747.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp748)
        {
          var tmp749 = $"Error occurred in {GetType().FullName}: {tmp748.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp748, tmp749);
          else
            Console.Error.WriteLine(tmp749);
          var tmp750 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetPrimaryKeys", TMessageType.Exception, seqid), cancellationToken);
          await tmp750.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetCrossReference_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp751 = new InternalStructs.GetCrossReference_args();
        await tmp751.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp752 = new InternalStructs.GetCrossReference_result();
        try
        {
          tmp752.Success = await _iAsync.GetCrossReference(tmp751.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetCrossReference", TMessageType.Reply, seqid), cancellationToken); 
          await tmp752.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp753)
        {
          var tmp754 = $"Error occurred in {GetType().FullName}: {tmp753.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp753, tmp754);
          else
            Console.Error.WriteLine(tmp754);
          var tmp755 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetCrossReference", TMessageType.Exception, seqid), cancellationToken);
          await tmp755.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetOperationStatus_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp756 = new InternalStructs.GetOperationStatus_args();
        await tmp756.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp757 = new InternalStructs.GetOperationStatus_result();
        try
        {
          tmp757.Success = await _iAsync.GetOperationStatus(tmp756.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetOperationStatus", TMessageType.Reply, seqid), cancellationToken); 
          await tmp757.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp758)
        {
          var tmp759 = $"Error occurred in {GetType().FullName}: {tmp758.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp758, tmp759);
          else
            Console.Error.WriteLine(tmp759);
          var tmp760 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetOperationStatus", TMessageType.Exception, seqid), cancellationToken);
          await tmp760.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task CancelOperation_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp761 = new InternalStructs.CancelOperation_args();
        await tmp761.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp762 = new InternalStructs.CancelOperation_result();
        try
        {
          tmp762.Success = await _iAsync.CancelOperation(tmp761.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("CancelOperation", TMessageType.Reply, seqid), cancellationToken); 
          await tmp762.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp763)
        {
          var tmp764 = $"Error occurred in {GetType().FullName}: {tmp763.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp763, tmp764);
          else
            Console.Error.WriteLine(tmp764);
          var tmp765 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("CancelOperation", TMessageType.Exception, seqid), cancellationToken);
          await tmp765.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task CloseOperation_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp766 = new InternalStructs.CloseOperation_args();
        await tmp766.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp767 = new InternalStructs.CloseOperation_result();
        try
        {
          tmp767.Success = await _iAsync.CloseOperation(tmp766.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("CloseOperation", TMessageType.Reply, seqid), cancellationToken); 
          await tmp767.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp768)
        {
          var tmp769 = $"Error occurred in {GetType().FullName}: {tmp768.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp768, tmp769);
          else
            Console.Error.WriteLine(tmp769);
          var tmp770 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("CloseOperation", TMessageType.Exception, seqid), cancellationToken);
          await tmp770.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetResultSetMetadata_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp771 = new InternalStructs.GetResultSetMetadata_args();
        await tmp771.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp772 = new InternalStructs.GetResultSetMetadata_result();
        try
        {
          tmp772.Success = await _iAsync.GetResultSetMetadata(tmp771.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetResultSetMetadata", TMessageType.Reply, seqid), cancellationToken); 
          await tmp772.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp773)
        {
          var tmp774 = $"Error occurred in {GetType().FullName}: {tmp773.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp773, tmp774);
          else
            Console.Error.WriteLine(tmp774);
          var tmp775 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetResultSetMetadata", TMessageType.Exception, seqid), cancellationToken);
          await tmp775.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task FetchResults_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp776 = new InternalStructs.FetchResults_args();
        await tmp776.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp777 = new InternalStructs.FetchResults_result();
        try
        {
          tmp777.Success = await _iAsync.FetchResults(tmp776.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("FetchResults", TMessageType.Reply, seqid), cancellationToken); 
          await tmp777.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp778)
        {
          var tmp779 = $"Error occurred in {GetType().FullName}: {tmp778.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp778, tmp779);
          else
            Console.Error.WriteLine(tmp779);
          var tmp780 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("FetchResults", TMessageType.Exception, seqid), cancellationToken);
          await tmp780.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetDelegationToken_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp781 = new InternalStructs.GetDelegationToken_args();
        await tmp781.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp782 = new InternalStructs.GetDelegationToken_result();
        try
        {
          tmp782.Success = await _iAsync.GetDelegationToken(tmp781.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetDelegationToken", TMessageType.Reply, seqid), cancellationToken); 
          await tmp782.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp783)
        {
          var tmp784 = $"Error occurred in {GetType().FullName}: {tmp783.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp783, tmp784);
          else
            Console.Error.WriteLine(tmp784);
          var tmp785 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetDelegationToken", TMessageType.Exception, seqid), cancellationToken);
          await tmp785.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task CancelDelegationToken_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp786 = new InternalStructs.CancelDelegationToken_args();
        await tmp786.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp787 = new InternalStructs.CancelDelegationToken_result();
        try
        {
          tmp787.Success = await _iAsync.CancelDelegationToken(tmp786.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("CancelDelegationToken", TMessageType.Reply, seqid), cancellationToken); 
          await tmp787.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp788)
        {
          var tmp789 = $"Error occurred in {GetType().FullName}: {tmp788.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp788, tmp789);
          else
            Console.Error.WriteLine(tmp789);
          var tmp790 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("CancelDelegationToken", TMessageType.Exception, seqid), cancellationToken);
          await tmp790.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RenewDelegationToken_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp791 = new InternalStructs.RenewDelegationToken_args();
        await tmp791.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp792 = new InternalStructs.RenewDelegationToken_result();
        try
        {
          tmp792.Success = await _iAsync.RenewDelegationToken(tmp791.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("RenewDelegationToken", TMessageType.Reply, seqid), cancellationToken); 
          await tmp792.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp793)
        {
          var tmp794 = $"Error occurred in {GetType().FullName}: {tmp793.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp793, tmp794);
          else
            Console.Error.WriteLine(tmp794);
          var tmp795 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RenewDelegationToken", TMessageType.Exception, seqid), cancellationToken);
          await tmp795.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }

    public class InternalStructs
    {

      public partial class OpenSession_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TOpenSessionReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TOpenSessionReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.@req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @req;
        }

        public OpenSession_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TOpenSessionReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp796 = new TStruct("OpenSession_args");
            await oprot.WriteStructBeginAsync(tmp796, cancellationToken);
            var tmp797 = new TField();
            if((Req != null) && __isset.@req)
            {
              tmp797.Name = "req";
              tmp797.Type = TType.Struct;
              tmp797.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp797, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is OpenSession_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.@req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp798 = new StringBuilder("OpenSession_args(");
          int tmp799 = 0;
          if((Req != null) && __isset.@req)
          {
            if(0 < tmp799++) { tmp798.Append(", "); }
            tmp798.Append("Req: ");
            Req.ToString(tmp798);
          }
          tmp798.Append(')');
          return tmp798.ToString();
        }
      }


      public partial class OpenSession_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TOpenSessionResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TOpenSessionResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
        }

        public OpenSession_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TOpenSessionResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp800 = new TStruct("OpenSession_result");
            await oprot.WriteStructBeginAsync(tmp800, cancellationToken);
            var tmp801 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp801.Name = "Success";
                tmp801.Type = TType.Struct;
                tmp801.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp801, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is OpenSession_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp802 = new StringBuilder("OpenSession_result(");
          int tmp803 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp803++) { tmp802.Append(", "); }
            tmp802.Append("Success: ");
            Success.ToString(tmp802);
          }
          tmp802.Append(')');
          return tmp802.ToString();
        }
      }


      public partial class CloseSession_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TCloseSessionReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TCloseSessionReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.@req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @req;
        }

        public CloseSession_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TCloseSessionReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp804 = new TStruct("CloseSession_args");
            await oprot.WriteStructBeginAsync(tmp804, cancellationToken);
            var tmp805 = new TField();
            if((Req != null) && __isset.@req)
            {
              tmp805.Name = "req";
              tmp805.Type = TType.Struct;
              tmp805.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp805, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is CloseSession_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.@req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp806 = new StringBuilder("CloseSession_args(");
          int tmp807 = 0;
          if((Req != null) && __isset.@req)
          {
            if(0 < tmp807++) { tmp806.Append(", "); }
            tmp806.Append("Req: ");
            Req.ToString(tmp806);
          }
          tmp806.Append(')');
          return tmp806.ToString();
        }
      }


      public partial class CloseSession_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TCloseSessionResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TCloseSessionResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
        }

        public CloseSession_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TCloseSessionResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp808 = new TStruct("CloseSession_result");
            await oprot.WriteStructBeginAsync(tmp808, cancellationToken);
            var tmp809 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp809.Name = "Success";
                tmp809.Type = TType.Struct;
                tmp809.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp809, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is CloseSession_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp810 = new StringBuilder("CloseSession_result(");
          int tmp811 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp811++) { tmp810.Append(", "); }
            tmp810.Append("Success: ");
            Success.ToString(tmp810);
          }
          tmp810.Append(')');
          return tmp810.ToString();
        }
      }


      public partial class GetInfo_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetInfoReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetInfoReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.@req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @req;
        }

        public GetInfo_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TGetInfoReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp812 = new TStruct("GetInfo_args");
            await oprot.WriteStructBeginAsync(tmp812, cancellationToken);
            var tmp813 = new TField();
            if((Req != null) && __isset.@req)
            {
              tmp813.Name = "req";
              tmp813.Type = TType.Struct;
              tmp813.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp813, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetInfo_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.@req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp814 = new StringBuilder("GetInfo_args(");
          int tmp815 = 0;
          if((Req != null) && __isset.@req)
          {
            if(0 < tmp815++) { tmp814.Append(", "); }
            tmp814.Append("Req: ");
            Req.ToString(tmp814);
          }
          tmp814.Append(')');
          return tmp814.ToString();
        }
      }


      public partial class GetInfo_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetInfoResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetInfoResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
        }

        public GetInfo_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TGetInfoResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp816 = new TStruct("GetInfo_result");
            await oprot.WriteStructBeginAsync(tmp816, cancellationToken);
            var tmp817 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp817.Name = "Success";
                tmp817.Type = TType.Struct;
                tmp817.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp817, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetInfo_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp818 = new StringBuilder("GetInfo_result(");
          int tmp819 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp819++) { tmp818.Append(", "); }
            tmp818.Append("Success: ");
            Success.ToString(tmp818);
          }
          tmp818.Append(')');
          return tmp818.ToString();
        }
      }


      public partial class ExecuteStatement_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TExecuteStatementReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TExecuteStatementReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.@req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @req;
        }

        public ExecuteStatement_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TExecuteStatementReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp820 = new TStruct("ExecuteStatement_args");
            await oprot.WriteStructBeginAsync(tmp820, cancellationToken);
            var tmp821 = new TField();
            if((Req != null) && __isset.@req)
            {
              tmp821.Name = "req";
              tmp821.Type = TType.Struct;
              tmp821.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp821, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is ExecuteStatement_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.@req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp822 = new StringBuilder("ExecuteStatement_args(");
          int tmp823 = 0;
          if((Req != null) && __isset.@req)
          {
            if(0 < tmp823++) { tmp822.Append(", "); }
            tmp822.Append("Req: ");
            Req.ToString(tmp822);
          }
          tmp822.Append(')');
          return tmp822.ToString();
        }
      }


      public partial class ExecuteStatement_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TExecuteStatementResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TExecuteStatementResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
        }

        public ExecuteStatement_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TExecuteStatementResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp824 = new TStruct("ExecuteStatement_result");
            await oprot.WriteStructBeginAsync(tmp824, cancellationToken);
            var tmp825 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp825.Name = "Success";
                tmp825.Type = TType.Struct;
                tmp825.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp825, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is ExecuteStatement_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp826 = new StringBuilder("ExecuteStatement_result(");
          int tmp827 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp827++) { tmp826.Append(", "); }
            tmp826.Append("Success: ");
            Success.ToString(tmp826);
          }
          tmp826.Append(')');
          return tmp826.ToString();
        }
      }


      public partial class GetTypeInfo_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetTypeInfoReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetTypeInfoReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.@req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @req;
        }

        public GetTypeInfo_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TGetTypeInfoReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp828 = new TStruct("GetTypeInfo_args");
            await oprot.WriteStructBeginAsync(tmp828, cancellationToken);
            var tmp829 = new TField();
            if((Req != null) && __isset.@req)
            {
              tmp829.Name = "req";
              tmp829.Type = TType.Struct;
              tmp829.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp829, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetTypeInfo_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.@req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp830 = new StringBuilder("GetTypeInfo_args(");
          int tmp831 = 0;
          if((Req != null) && __isset.@req)
          {
            if(0 < tmp831++) { tmp830.Append(", "); }
            tmp830.Append("Req: ");
            Req.ToString(tmp830);
          }
          tmp830.Append(')');
          return tmp830.ToString();
        }
      }


      public partial class GetTypeInfo_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetTypeInfoResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetTypeInfoResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
        }

        public GetTypeInfo_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TGetTypeInfoResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp832 = new TStruct("GetTypeInfo_result");
            await oprot.WriteStructBeginAsync(tmp832, cancellationToken);
            var tmp833 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp833.Name = "Success";
                tmp833.Type = TType.Struct;
                tmp833.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp833, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetTypeInfo_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp834 = new StringBuilder("GetTypeInfo_result(");
          int tmp835 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp835++) { tmp834.Append(", "); }
            tmp834.Append("Success: ");
            Success.ToString(tmp834);
          }
          tmp834.Append(')');
          return tmp834.ToString();
        }
      }


      public partial class GetCatalogs_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetCatalogsReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetCatalogsReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.@req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @req;
        }

        public GetCatalogs_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TGetCatalogsReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp836 = new TStruct("GetCatalogs_args");
            await oprot.WriteStructBeginAsync(tmp836, cancellationToken);
            var tmp837 = new TField();
            if((Req != null) && __isset.@req)
            {
              tmp837.Name = "req";
              tmp837.Type = TType.Struct;
              tmp837.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp837, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetCatalogs_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.@req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp838 = new StringBuilder("GetCatalogs_args(");
          int tmp839 = 0;
          if((Req != null) && __isset.@req)
          {
            if(0 < tmp839++) { tmp838.Append(", "); }
            tmp838.Append("Req: ");
            Req.ToString(tmp838);
          }
          tmp838.Append(')');
          return tmp838.ToString();
        }
      }


      public partial class GetCatalogs_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetCatalogsResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetCatalogsResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
        }

        public GetCatalogs_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TGetCatalogsResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp840 = new TStruct("GetCatalogs_result");
            await oprot.WriteStructBeginAsync(tmp840, cancellationToken);
            var tmp841 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp841.Name = "Success";
                tmp841.Type = TType.Struct;
                tmp841.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp841, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetCatalogs_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp842 = new StringBuilder("GetCatalogs_result(");
          int tmp843 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp843++) { tmp842.Append(", "); }
            tmp842.Append("Success: ");
            Success.ToString(tmp842);
          }
          tmp842.Append(')');
          return tmp842.ToString();
        }
      }


      public partial class GetSchemas_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetSchemasReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetSchemasReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.@req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @req;
        }

        public GetSchemas_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TGetSchemasReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp844 = new TStruct("GetSchemas_args");
            await oprot.WriteStructBeginAsync(tmp844, cancellationToken);
            var tmp845 = new TField();
            if((Req != null) && __isset.@req)
            {
              tmp845.Name = "req";
              tmp845.Type = TType.Struct;
              tmp845.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp845, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetSchemas_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.@req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp846 = new StringBuilder("GetSchemas_args(");
          int tmp847 = 0;
          if((Req != null) && __isset.@req)
          {
            if(0 < tmp847++) { tmp846.Append(", "); }
            tmp846.Append("Req: ");
            Req.ToString(tmp846);
          }
          tmp846.Append(')');
          return tmp846.ToString();
        }
      }


      public partial class GetSchemas_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetSchemasResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetSchemasResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
        }

        public GetSchemas_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TGetSchemasResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp848 = new TStruct("GetSchemas_result");
            await oprot.WriteStructBeginAsync(tmp848, cancellationToken);
            var tmp849 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp849.Name = "Success";
                tmp849.Type = TType.Struct;
                tmp849.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp849, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetSchemas_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp850 = new StringBuilder("GetSchemas_result(");
          int tmp851 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp851++) { tmp850.Append(", "); }
            tmp850.Append("Success: ");
            Success.ToString(tmp850);
          }
          tmp850.Append(')');
          return tmp850.ToString();
        }
      }


      public partial class GetTables_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetTablesReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetTablesReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.@req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @req;
        }

        public GetTables_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TGetTablesReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp852 = new TStruct("GetTables_args");
            await oprot.WriteStructBeginAsync(tmp852, cancellationToken);
            var tmp853 = new TField();
            if((Req != null) && __isset.@req)
            {
              tmp853.Name = "req";
              tmp853.Type = TType.Struct;
              tmp853.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp853, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetTables_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.@req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp854 = new StringBuilder("GetTables_args(");
          int tmp855 = 0;
          if((Req != null) && __isset.@req)
          {
            if(0 < tmp855++) { tmp854.Append(", "); }
            tmp854.Append("Req: ");
            Req.ToString(tmp854);
          }
          tmp854.Append(')');
          return tmp854.ToString();
        }
      }


      public partial class GetTables_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetTablesResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetTablesResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
        }

        public GetTables_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TGetTablesResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp856 = new TStruct("GetTables_result");
            await oprot.WriteStructBeginAsync(tmp856, cancellationToken);
            var tmp857 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp857.Name = "Success";
                tmp857.Type = TType.Struct;
                tmp857.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp857, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetTables_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp858 = new StringBuilder("GetTables_result(");
          int tmp859 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp859++) { tmp858.Append(", "); }
            tmp858.Append("Success: ");
            Success.ToString(tmp858);
          }
          tmp858.Append(')');
          return tmp858.ToString();
        }
      }


      public partial class GetTableTypes_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetTableTypesReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetTableTypesReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.@req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @req;
        }

        public GetTableTypes_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TGetTableTypesReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp860 = new TStruct("GetTableTypes_args");
            await oprot.WriteStructBeginAsync(tmp860, cancellationToken);
            var tmp861 = new TField();
            if((Req != null) && __isset.@req)
            {
              tmp861.Name = "req";
              tmp861.Type = TType.Struct;
              tmp861.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp861, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetTableTypes_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.@req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp862 = new StringBuilder("GetTableTypes_args(");
          int tmp863 = 0;
          if((Req != null) && __isset.@req)
          {
            if(0 < tmp863++) { tmp862.Append(", "); }
            tmp862.Append("Req: ");
            Req.ToString(tmp862);
          }
          tmp862.Append(')');
          return tmp862.ToString();
        }
      }


      public partial class GetTableTypes_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetTableTypesResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetTableTypesResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
        }

        public GetTableTypes_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TGetTableTypesResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp864 = new TStruct("GetTableTypes_result");
            await oprot.WriteStructBeginAsync(tmp864, cancellationToken);
            var tmp865 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp865.Name = "Success";
                tmp865.Type = TType.Struct;
                tmp865.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp865, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetTableTypes_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp866 = new StringBuilder("GetTableTypes_result(");
          int tmp867 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp867++) { tmp866.Append(", "); }
            tmp866.Append("Success: ");
            Success.ToString(tmp866);
          }
          tmp866.Append(')');
          return tmp866.ToString();
        }
      }


      public partial class GetColumns_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetColumnsReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetColumnsReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.@req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @req;
        }

        public GetColumns_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TGetColumnsReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp868 = new TStruct("GetColumns_args");
            await oprot.WriteStructBeginAsync(tmp868, cancellationToken);
            var tmp869 = new TField();
            if((Req != null) && __isset.@req)
            {
              tmp869.Name = "req";
              tmp869.Type = TType.Struct;
              tmp869.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp869, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetColumns_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.@req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp870 = new StringBuilder("GetColumns_args(");
          int tmp871 = 0;
          if((Req != null) && __isset.@req)
          {
            if(0 < tmp871++) { tmp870.Append(", "); }
            tmp870.Append("Req: ");
            Req.ToString(tmp870);
          }
          tmp870.Append(')');
          return tmp870.ToString();
        }
      }


      public partial class GetColumns_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetColumnsResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetColumnsResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
        }

        public GetColumns_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TGetColumnsResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp872 = new TStruct("GetColumns_result");
            await oprot.WriteStructBeginAsync(tmp872, cancellationToken);
            var tmp873 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp873.Name = "Success";
                tmp873.Type = TType.Struct;
                tmp873.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp873, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetColumns_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp874 = new StringBuilder("GetColumns_result(");
          int tmp875 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp875++) { tmp874.Append(", "); }
            tmp874.Append("Success: ");
            Success.ToString(tmp874);
          }
          tmp874.Append(')');
          return tmp874.ToString();
        }
      }


      public partial class GetFunctions_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetFunctionsReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetFunctionsReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.@req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @req;
        }

        public GetFunctions_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TGetFunctionsReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp876 = new TStruct("GetFunctions_args");
            await oprot.WriteStructBeginAsync(tmp876, cancellationToken);
            var tmp877 = new TField();
            if((Req != null) && __isset.@req)
            {
              tmp877.Name = "req";
              tmp877.Type = TType.Struct;
              tmp877.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp877, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetFunctions_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.@req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp878 = new StringBuilder("GetFunctions_args(");
          int tmp879 = 0;
          if((Req != null) && __isset.@req)
          {
            if(0 < tmp879++) { tmp878.Append(", "); }
            tmp878.Append("Req: ");
            Req.ToString(tmp878);
          }
          tmp878.Append(')');
          return tmp878.ToString();
        }
      }


      public partial class GetFunctions_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetFunctionsResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetFunctionsResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
        }

        public GetFunctions_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TGetFunctionsResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp880 = new TStruct("GetFunctions_result");
            await oprot.WriteStructBeginAsync(tmp880, cancellationToken);
            var tmp881 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp881.Name = "Success";
                tmp881.Type = TType.Struct;
                tmp881.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp881, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetFunctions_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp882 = new StringBuilder("GetFunctions_result(");
          int tmp883 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp883++) { tmp882.Append(", "); }
            tmp882.Append("Success: ");
            Success.ToString(tmp882);
          }
          tmp882.Append(')');
          return tmp882.ToString();
        }
      }


      public partial class GetPrimaryKeys_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetPrimaryKeysReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetPrimaryKeysReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.@req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @req;
        }

        public GetPrimaryKeys_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TGetPrimaryKeysReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp884 = new TStruct("GetPrimaryKeys_args");
            await oprot.WriteStructBeginAsync(tmp884, cancellationToken);
            var tmp885 = new TField();
            if((Req != null) && __isset.@req)
            {
              tmp885.Name = "req";
              tmp885.Type = TType.Struct;
              tmp885.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp885, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetPrimaryKeys_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.@req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp886 = new StringBuilder("GetPrimaryKeys_args(");
          int tmp887 = 0;
          if((Req != null) && __isset.@req)
          {
            if(0 < tmp887++) { tmp886.Append(", "); }
            tmp886.Append("Req: ");
            Req.ToString(tmp886);
          }
          tmp886.Append(')');
          return tmp886.ToString();
        }
      }


      public partial class GetPrimaryKeys_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetPrimaryKeysResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetPrimaryKeysResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
        }

        public GetPrimaryKeys_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TGetPrimaryKeysResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp888 = new TStruct("GetPrimaryKeys_result");
            await oprot.WriteStructBeginAsync(tmp888, cancellationToken);
            var tmp889 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp889.Name = "Success";
                tmp889.Type = TType.Struct;
                tmp889.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp889, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetPrimaryKeys_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp890 = new StringBuilder("GetPrimaryKeys_result(");
          int tmp891 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp891++) { tmp890.Append(", "); }
            tmp890.Append("Success: ");
            Success.ToString(tmp890);
          }
          tmp890.Append(')');
          return tmp890.ToString();
        }
      }


      public partial class GetCrossReference_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetCrossReferenceReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetCrossReferenceReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.@req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @req;
        }

        public GetCrossReference_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TGetCrossReferenceReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp892 = new TStruct("GetCrossReference_args");
            await oprot.WriteStructBeginAsync(tmp892, cancellationToken);
            var tmp893 = new TField();
            if((Req != null) && __isset.@req)
            {
              tmp893.Name = "req";
              tmp893.Type = TType.Struct;
              tmp893.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp893, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetCrossReference_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.@req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp894 = new StringBuilder("GetCrossReference_args(");
          int tmp895 = 0;
          if((Req != null) && __isset.@req)
          {
            if(0 < tmp895++) { tmp894.Append(", "); }
            tmp894.Append("Req: ");
            Req.ToString(tmp894);
          }
          tmp894.Append(')');
          return tmp894.ToString();
        }
      }


      public partial class GetCrossReference_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetCrossReferenceResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetCrossReferenceResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
        }

        public GetCrossReference_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TGetCrossReferenceResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp896 = new TStruct("GetCrossReference_result");
            await oprot.WriteStructBeginAsync(tmp896, cancellationToken);
            var tmp897 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp897.Name = "Success";
                tmp897.Type = TType.Struct;
                tmp897.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp897, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetCrossReference_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp898 = new StringBuilder("GetCrossReference_result(");
          int tmp899 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp899++) { tmp898.Append(", "); }
            tmp898.Append("Success: ");
            Success.ToString(tmp898);
          }
          tmp898.Append(')');
          return tmp898.ToString();
        }
      }


      public partial class GetOperationStatus_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetOperationStatusReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetOperationStatusReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.@req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @req;
        }

        public GetOperationStatus_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TGetOperationStatusReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp900 = new TStruct("GetOperationStatus_args");
            await oprot.WriteStructBeginAsync(tmp900, cancellationToken);
            var tmp901 = new TField();
            if((Req != null) && __isset.@req)
            {
              tmp901.Name = "req";
              tmp901.Type = TType.Struct;
              tmp901.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp901, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetOperationStatus_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.@req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp902 = new StringBuilder("GetOperationStatus_args(");
          int tmp903 = 0;
          if((Req != null) && __isset.@req)
          {
            if(0 < tmp903++) { tmp902.Append(", "); }
            tmp902.Append("Req: ");
            Req.ToString(tmp902);
          }
          tmp902.Append(')');
          return tmp902.ToString();
        }
      }


      public partial class GetOperationStatus_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetOperationStatusResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetOperationStatusResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
        }

        public GetOperationStatus_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TGetOperationStatusResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp904 = new TStruct("GetOperationStatus_result");
            await oprot.WriteStructBeginAsync(tmp904, cancellationToken);
            var tmp905 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp905.Name = "Success";
                tmp905.Type = TType.Struct;
                tmp905.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp905, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetOperationStatus_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp906 = new StringBuilder("GetOperationStatus_result(");
          int tmp907 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp907++) { tmp906.Append(", "); }
            tmp906.Append("Success: ");
            Success.ToString(tmp906);
          }
          tmp906.Append(')');
          return tmp906.ToString();
        }
      }


      public partial class CancelOperation_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TCancelOperationReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TCancelOperationReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.@req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @req;
        }

        public CancelOperation_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TCancelOperationReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp908 = new TStruct("CancelOperation_args");
            await oprot.WriteStructBeginAsync(tmp908, cancellationToken);
            var tmp909 = new TField();
            if((Req != null) && __isset.@req)
            {
              tmp909.Name = "req";
              tmp909.Type = TType.Struct;
              tmp909.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp909, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is CancelOperation_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.@req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp910 = new StringBuilder("CancelOperation_args(");
          int tmp911 = 0;
          if((Req != null) && __isset.@req)
          {
            if(0 < tmp911++) { tmp910.Append(", "); }
            tmp910.Append("Req: ");
            Req.ToString(tmp910);
          }
          tmp910.Append(')');
          return tmp910.ToString();
        }
      }


      public partial class CancelOperation_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TCancelOperationResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TCancelOperationResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
        }

        public CancelOperation_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TCancelOperationResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp912 = new TStruct("CancelOperation_result");
            await oprot.WriteStructBeginAsync(tmp912, cancellationToken);
            var tmp913 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp913.Name = "Success";
                tmp913.Type = TType.Struct;
                tmp913.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp913, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is CancelOperation_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp914 = new StringBuilder("CancelOperation_result(");
          int tmp915 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp915++) { tmp914.Append(", "); }
            tmp914.Append("Success: ");
            Success.ToString(tmp914);
          }
          tmp914.Append(')');
          return tmp914.ToString();
        }
      }


      public partial class CloseOperation_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TCloseOperationReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TCloseOperationReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.@req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @req;
        }

        public CloseOperation_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TCloseOperationReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp916 = new TStruct("CloseOperation_args");
            await oprot.WriteStructBeginAsync(tmp916, cancellationToken);
            var tmp917 = new TField();
            if((Req != null) && __isset.@req)
            {
              tmp917.Name = "req";
              tmp917.Type = TType.Struct;
              tmp917.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp917, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is CloseOperation_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.@req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp918 = new StringBuilder("CloseOperation_args(");
          int tmp919 = 0;
          if((Req != null) && __isset.@req)
          {
            if(0 < tmp919++) { tmp918.Append(", "); }
            tmp918.Append("Req: ");
            Req.ToString(tmp918);
          }
          tmp918.Append(')');
          return tmp918.ToString();
        }
      }


      public partial class CloseOperation_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TCloseOperationResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TCloseOperationResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
        }

        public CloseOperation_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TCloseOperationResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp920 = new TStruct("CloseOperation_result");
            await oprot.WriteStructBeginAsync(tmp920, cancellationToken);
            var tmp921 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp921.Name = "Success";
                tmp921.Type = TType.Struct;
                tmp921.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp921, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is CloseOperation_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp922 = new StringBuilder("CloseOperation_result(");
          int tmp923 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp923++) { tmp922.Append(", "); }
            tmp922.Append("Success: ");
            Success.ToString(tmp922);
          }
          tmp922.Append(')');
          return tmp922.ToString();
        }
      }


      public partial class GetResultSetMetadata_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetResultSetMetadataReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetResultSetMetadataReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.@req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @req;
        }

        public GetResultSetMetadata_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TGetResultSetMetadataReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp924 = new TStruct("GetResultSetMetadata_args");
            await oprot.WriteStructBeginAsync(tmp924, cancellationToken);
            var tmp925 = new TField();
            if((Req != null) && __isset.@req)
            {
              tmp925.Name = "req";
              tmp925.Type = TType.Struct;
              tmp925.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp925, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetResultSetMetadata_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.@req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp926 = new StringBuilder("GetResultSetMetadata_args(");
          int tmp927 = 0;
          if((Req != null) && __isset.@req)
          {
            if(0 < tmp927++) { tmp926.Append(", "); }
            tmp926.Append("Req: ");
            Req.ToString(tmp926);
          }
          tmp926.Append(')');
          return tmp926.ToString();
        }
      }


      public partial class GetResultSetMetadata_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetResultSetMetadataResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetResultSetMetadataResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
        }

        public GetResultSetMetadata_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TGetResultSetMetadataResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp928 = new TStruct("GetResultSetMetadata_result");
            await oprot.WriteStructBeginAsync(tmp928, cancellationToken);
            var tmp929 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp929.Name = "Success";
                tmp929.Type = TType.Struct;
                tmp929.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp929, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetResultSetMetadata_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp930 = new StringBuilder("GetResultSetMetadata_result(");
          int tmp931 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp931++) { tmp930.Append(", "); }
            tmp930.Append("Success: ");
            Success.ToString(tmp930);
          }
          tmp930.Append(')');
          return tmp930.ToString();
        }
      }


      public partial class FetchResults_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TFetchResultsReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TFetchResultsReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.@req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @req;
        }

        public FetchResults_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TFetchResultsReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp932 = new TStruct("FetchResults_args");
            await oprot.WriteStructBeginAsync(tmp932, cancellationToken);
            var tmp933 = new TField();
            if((Req != null) && __isset.@req)
            {
              tmp933.Name = "req";
              tmp933.Type = TType.Struct;
              tmp933.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp933, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is FetchResults_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.@req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp934 = new StringBuilder("FetchResults_args(");
          int tmp935 = 0;
          if((Req != null) && __isset.@req)
          {
            if(0 < tmp935++) { tmp934.Append(", "); }
            tmp934.Append("Req: ");
            Req.ToString(tmp934);
          }
          tmp934.Append(')');
          return tmp934.ToString();
        }
      }


      public partial class FetchResults_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TFetchResultsResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TFetchResultsResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
        }

        public FetchResults_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TFetchResultsResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp936 = new TStruct("FetchResults_result");
            await oprot.WriteStructBeginAsync(tmp936, cancellationToken);
            var tmp937 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp937.Name = "Success";
                tmp937.Type = TType.Struct;
                tmp937.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp937, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is FetchResults_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp938 = new StringBuilder("FetchResults_result(");
          int tmp939 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp939++) { tmp938.Append(", "); }
            tmp938.Append("Success: ");
            Success.ToString(tmp938);
          }
          tmp938.Append(')');
          return tmp938.ToString();
        }
      }


      public partial class GetDelegationToken_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetDelegationTokenReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetDelegationTokenReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.@req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @req;
        }

        public GetDelegationToken_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TGetDelegationTokenReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp940 = new TStruct("GetDelegationToken_args");
            await oprot.WriteStructBeginAsync(tmp940, cancellationToken);
            var tmp941 = new TField();
            if((Req != null) && __isset.@req)
            {
              tmp941.Name = "req";
              tmp941.Type = TType.Struct;
              tmp941.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp941, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetDelegationToken_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.@req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp942 = new StringBuilder("GetDelegationToken_args(");
          int tmp943 = 0;
          if((Req != null) && __isset.@req)
          {
            if(0 < tmp943++) { tmp942.Append(", "); }
            tmp942.Append("Req: ");
            Req.ToString(tmp942);
          }
          tmp942.Append(')');
          return tmp942.ToString();
        }
      }


      public partial class GetDelegationToken_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetDelegationTokenResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetDelegationTokenResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
        }

        public GetDelegationToken_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TGetDelegationTokenResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp944 = new TStruct("GetDelegationToken_result");
            await oprot.WriteStructBeginAsync(tmp944, cancellationToken);
            var tmp945 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp945.Name = "Success";
                tmp945.Type = TType.Struct;
                tmp945.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp945, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetDelegationToken_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp946 = new StringBuilder("GetDelegationToken_result(");
          int tmp947 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp947++) { tmp946.Append(", "); }
            tmp946.Append("Success: ");
            Success.ToString(tmp946);
          }
          tmp946.Append(')');
          return tmp946.ToString();
        }
      }


      public partial class CancelDelegationToken_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TCancelDelegationTokenReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TCancelDelegationTokenReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.@req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @req;
        }

        public CancelDelegationToken_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TCancelDelegationTokenReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp948 = new TStruct("CancelDelegationToken_args");
            await oprot.WriteStructBeginAsync(tmp948, cancellationToken);
            var tmp949 = new TField();
            if((Req != null) && __isset.@req)
            {
              tmp949.Name = "req";
              tmp949.Type = TType.Struct;
              tmp949.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp949, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is CancelDelegationToken_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.@req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp950 = new StringBuilder("CancelDelegationToken_args(");
          int tmp951 = 0;
          if((Req != null) && __isset.@req)
          {
            if(0 < tmp951++) { tmp950.Append(", "); }
            tmp950.Append("Req: ");
            Req.ToString(tmp950);
          }
          tmp950.Append(')');
          return tmp950.ToString();
        }
      }


      public partial class CancelDelegationToken_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TCancelDelegationTokenResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TCancelDelegationTokenResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
        }

        public CancelDelegationToken_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TCancelDelegationTokenResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp952 = new TStruct("CancelDelegationToken_result");
            await oprot.WriteStructBeginAsync(tmp952, cancellationToken);
            var tmp953 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp953.Name = "Success";
                tmp953.Type = TType.Struct;
                tmp953.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp953, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is CancelDelegationToken_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp954 = new StringBuilder("CancelDelegationToken_result(");
          int tmp955 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp955++) { tmp954.Append(", "); }
            tmp954.Append("Success: ");
            Success.ToString(tmp954);
          }
          tmp954.Append(')');
          return tmp954.ToString();
        }
      }


      public partial class RenewDelegationToken_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TRenewDelegationTokenReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TRenewDelegationTokenReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.@req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @req;
        }

        public RenewDelegationToken_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TRenewDelegationTokenReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp956 = new TStruct("RenewDelegationToken_args");
            await oprot.WriteStructBeginAsync(tmp956, cancellationToken);
            var tmp957 = new TField();
            if((Req != null) && __isset.@req)
            {
              tmp957.Name = "req";
              tmp957.Type = TType.Struct;
              tmp957.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp957, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is RenewDelegationToken_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.@req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp958 = new StringBuilder("RenewDelegationToken_args(");
          int tmp959 = 0;
          if((Req != null) && __isset.@req)
          {
            if(0 < tmp959++) { tmp958.Append(", "); }
            tmp958.Append("Req: ");
            Req.ToString(tmp958);
          }
          tmp958.Append(')');
          return tmp958.ToString();
        }
      }


      public partial class RenewDelegationToken_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TRenewDelegationTokenResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TRenewDelegationTokenResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
        }

        public RenewDelegationToken_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TRenewDelegationTokenResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp960 = new TStruct("RenewDelegationToken_result");
            await oprot.WriteStructBeginAsync(tmp960, cancellationToken);
            var tmp961 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp961.Name = "Success";
                tmp961.Type = TType.Struct;
                tmp961.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp961, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is RenewDelegationToken_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp962 = new StringBuilder("RenewDelegationToken_result(");
          int tmp963 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp963++) { tmp962.Append(", "); }
            tmp962.Append("Success: ");
            Success.ToString(tmp962);
          }
          tmp962.Append(')');
          return tmp962.ToString();
        }
      }

    }

  }
}

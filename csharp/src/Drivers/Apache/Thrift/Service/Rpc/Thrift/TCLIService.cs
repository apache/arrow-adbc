/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.21.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


// targeting netstandard 2.x
#if(! NETSTANDARD2_0_OR_GREATER && ! NET6_0_OR_GREATER && ! NET472_OR_GREATER)
#error Unexpected target platform. See 'thrift --help' for details.
#endif

#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable CS0618   // silence our own deprecation warnings
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Apache.Hive.Service.Rpc.Thrift
{
  public partial class TCLIService
  {
    public interface IAsync
    {
      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TOpenSessionResp> OpenSession(global::Apache.Hive.Service.Rpc.Thrift.TOpenSessionReq @req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TCloseSessionResp> CloseSession(global::Apache.Hive.Service.Rpc.Thrift.TCloseSessionReq @req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetInfoResp> GetInfo(global::Apache.Hive.Service.Rpc.Thrift.TGetInfoReq @req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TExecuteStatementResp> ExecuteStatement(global::Apache.Hive.Service.Rpc.Thrift.TExecuteStatementReq @req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetTypeInfoResp> GetTypeInfo(global::Apache.Hive.Service.Rpc.Thrift.TGetTypeInfoReq @req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetCatalogsResp> GetCatalogs(global::Apache.Hive.Service.Rpc.Thrift.TGetCatalogsReq @req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetSchemasResp> GetSchemas(global::Apache.Hive.Service.Rpc.Thrift.TGetSchemasReq @req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetTablesResp> GetTables(global::Apache.Hive.Service.Rpc.Thrift.TGetTablesReq @req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetTableTypesResp> GetTableTypes(global::Apache.Hive.Service.Rpc.Thrift.TGetTableTypesReq @req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetColumnsResp> GetColumns(global::Apache.Hive.Service.Rpc.Thrift.TGetColumnsReq @req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetFunctionsResp> GetFunctions(global::Apache.Hive.Service.Rpc.Thrift.TGetFunctionsReq @req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetPrimaryKeysResp> GetPrimaryKeys(global::Apache.Hive.Service.Rpc.Thrift.TGetPrimaryKeysReq @req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetCrossReferenceResp> GetCrossReference(global::Apache.Hive.Service.Rpc.Thrift.TGetCrossReferenceReq @req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetOperationStatusResp> GetOperationStatus(global::Apache.Hive.Service.Rpc.Thrift.TGetOperationStatusReq @req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TCancelOperationResp> CancelOperation(global::Apache.Hive.Service.Rpc.Thrift.TCancelOperationReq @req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TCloseOperationResp> CloseOperation(global::Apache.Hive.Service.Rpc.Thrift.TCloseOperationReq @req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetResultSetMetadataResp> GetResultSetMetadata(global::Apache.Hive.Service.Rpc.Thrift.TGetResultSetMetadataReq @req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TFetchResultsResp> FetchResults(global::Apache.Hive.Service.Rpc.Thrift.TFetchResultsReq @req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetDelegationTokenResp> GetDelegationToken(global::Apache.Hive.Service.Rpc.Thrift.TGetDelegationTokenReq @req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TCancelDelegationTokenResp> CancelDelegationToken(global::Apache.Hive.Service.Rpc.Thrift.TCancelDelegationTokenReq @req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TRenewDelegationTokenResp> RenewDelegationToken(global::Apache.Hive.Service.Rpc.Thrift.TRenewDelegationTokenReq @req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetQueryIdResp> GetQueryId(global::Apache.Hive.Service.Rpc.Thrift.TGetQueryIdReq @req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TSetClientInfoResp> SetClientInfo(global::Apache.Hive.Service.Rpc.Thrift.TSetClientInfoReq @req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TUploadDataResp> UploadData(global::Apache.Hive.Service.Rpc.Thrift.TUploadDataReq @req, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TDownloadDataResp> DownloadData(global::Apache.Hive.Service.Rpc.Thrift.TDownloadDataReq @req, CancellationToken cancellationToken = default);

    }


    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
      {
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TOpenSessionResp> OpenSession(global::Apache.Hive.Service.Rpc.Thrift.TOpenSessionReq @req, CancellationToken cancellationToken = default)
      {
        await send_OpenSession(@req, cancellationToken);
        return await recv_OpenSession(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_OpenSession(global::Apache.Hive.Service.Rpc.Thrift.TOpenSessionReq @req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("OpenSession", TMessageType.Call, SeqId), cancellationToken);

        var tmp649 = new InternalStructs.OpenSession_args() {
          Req = @req,
        };

        await tmp649.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TOpenSessionResp> recv_OpenSession(CancellationToken cancellationToken = default)
      {

        var tmp650 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp650.Type == TMessageType.Exception)
        {
          var tmp651 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp651;
        }

        var tmp652 = new InternalStructs.OpenSession_result();
        await tmp652.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp652.__isset.success)
        {
          return tmp652.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "OpenSession failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TCloseSessionResp> CloseSession(global::Apache.Hive.Service.Rpc.Thrift.TCloseSessionReq @req, CancellationToken cancellationToken = default)
      {
        await send_CloseSession(@req, cancellationToken);
        return await recv_CloseSession(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_CloseSession(global::Apache.Hive.Service.Rpc.Thrift.TCloseSessionReq @req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("CloseSession", TMessageType.Call, SeqId), cancellationToken);

        var tmp653 = new InternalStructs.CloseSession_args() {
          Req = @req,
        };

        await tmp653.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TCloseSessionResp> recv_CloseSession(CancellationToken cancellationToken = default)
      {

        var tmp654 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp654.Type == TMessageType.Exception)
        {
          var tmp655 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp655;
        }

        var tmp656 = new InternalStructs.CloseSession_result();
        await tmp656.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp656.__isset.success)
        {
          return tmp656.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CloseSession failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetInfoResp> GetInfo(global::Apache.Hive.Service.Rpc.Thrift.TGetInfoReq @req, CancellationToken cancellationToken = default)
      {
        await send_GetInfo(@req, cancellationToken);
        return await recv_GetInfo(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetInfo(global::Apache.Hive.Service.Rpc.Thrift.TGetInfoReq @req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetInfo", TMessageType.Call, SeqId), cancellationToken);

        var tmp657 = new InternalStructs.GetInfo_args() {
          Req = @req,
        };

        await tmp657.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetInfoResp> recv_GetInfo(CancellationToken cancellationToken = default)
      {

        var tmp658 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp658.Type == TMessageType.Exception)
        {
          var tmp659 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp659;
        }

        var tmp660 = new InternalStructs.GetInfo_result();
        await tmp660.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp660.__isset.success)
        {
          return tmp660.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetInfo failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TExecuteStatementResp> ExecuteStatement(global::Apache.Hive.Service.Rpc.Thrift.TExecuteStatementReq @req, CancellationToken cancellationToken = default)
      {
        await send_ExecuteStatement(@req, cancellationToken);
        return await recv_ExecuteStatement(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_ExecuteStatement(global::Apache.Hive.Service.Rpc.Thrift.TExecuteStatementReq @req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("ExecuteStatement", TMessageType.Call, SeqId), cancellationToken);

        var tmp661 = new InternalStructs.ExecuteStatement_args() {
          Req = @req,
        };

        await tmp661.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TExecuteStatementResp> recv_ExecuteStatement(CancellationToken cancellationToken = default)
      {

        var tmp662 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp662.Type == TMessageType.Exception)
        {
          var tmp663 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp663;
        }

        var tmp664 = new InternalStructs.ExecuteStatement_result();
        await tmp664.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp664.__isset.success)
        {
          return tmp664.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ExecuteStatement failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetTypeInfoResp> GetTypeInfo(global::Apache.Hive.Service.Rpc.Thrift.TGetTypeInfoReq @req, CancellationToken cancellationToken = default)
      {
        await send_GetTypeInfo(@req, cancellationToken);
        return await recv_GetTypeInfo(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetTypeInfo(global::Apache.Hive.Service.Rpc.Thrift.TGetTypeInfoReq @req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetTypeInfo", TMessageType.Call, SeqId), cancellationToken);

        var tmp665 = new InternalStructs.GetTypeInfo_args() {
          Req = @req,
        };

        await tmp665.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetTypeInfoResp> recv_GetTypeInfo(CancellationToken cancellationToken = default)
      {

        var tmp666 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp666.Type == TMessageType.Exception)
        {
          var tmp667 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp667;
        }

        var tmp668 = new InternalStructs.GetTypeInfo_result();
        await tmp668.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp668.__isset.success)
        {
          return tmp668.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetTypeInfo failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetCatalogsResp> GetCatalogs(global::Apache.Hive.Service.Rpc.Thrift.TGetCatalogsReq @req, CancellationToken cancellationToken = default)
      {
        await send_GetCatalogs(@req, cancellationToken);
        return await recv_GetCatalogs(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetCatalogs(global::Apache.Hive.Service.Rpc.Thrift.TGetCatalogsReq @req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetCatalogs", TMessageType.Call, SeqId), cancellationToken);

        var tmp669 = new InternalStructs.GetCatalogs_args() {
          Req = @req,
        };

        await tmp669.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetCatalogsResp> recv_GetCatalogs(CancellationToken cancellationToken = default)
      {

        var tmp670 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp670.Type == TMessageType.Exception)
        {
          var tmp671 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp671;
        }

        var tmp672 = new InternalStructs.GetCatalogs_result();
        await tmp672.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp672.__isset.success)
        {
          return tmp672.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetCatalogs failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetSchemasResp> GetSchemas(global::Apache.Hive.Service.Rpc.Thrift.TGetSchemasReq @req, CancellationToken cancellationToken = default)
      {
        await send_GetSchemas(@req, cancellationToken);
        return await recv_GetSchemas(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetSchemas(global::Apache.Hive.Service.Rpc.Thrift.TGetSchemasReq @req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetSchemas", TMessageType.Call, SeqId), cancellationToken);

        var tmp673 = new InternalStructs.GetSchemas_args() {
          Req = @req,
        };

        await tmp673.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetSchemasResp> recv_GetSchemas(CancellationToken cancellationToken = default)
      {

        var tmp674 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp674.Type == TMessageType.Exception)
        {
          var tmp675 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp675;
        }

        var tmp676 = new InternalStructs.GetSchemas_result();
        await tmp676.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp676.__isset.success)
        {
          return tmp676.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetSchemas failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetTablesResp> GetTables(global::Apache.Hive.Service.Rpc.Thrift.TGetTablesReq @req, CancellationToken cancellationToken = default)
      {
        await send_GetTables(@req, cancellationToken);
        return await recv_GetTables(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetTables(global::Apache.Hive.Service.Rpc.Thrift.TGetTablesReq @req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetTables", TMessageType.Call, SeqId), cancellationToken);

        var tmp677 = new InternalStructs.GetTables_args() {
          Req = @req,
        };

        await tmp677.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetTablesResp> recv_GetTables(CancellationToken cancellationToken = default)
      {

        var tmp678 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp678.Type == TMessageType.Exception)
        {
          var tmp679 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp679;
        }

        var tmp680 = new InternalStructs.GetTables_result();
        await tmp680.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp680.__isset.success)
        {
          return tmp680.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetTables failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetTableTypesResp> GetTableTypes(global::Apache.Hive.Service.Rpc.Thrift.TGetTableTypesReq @req, CancellationToken cancellationToken = default)
      {
        await send_GetTableTypes(@req, cancellationToken);
        return await recv_GetTableTypes(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetTableTypes(global::Apache.Hive.Service.Rpc.Thrift.TGetTableTypesReq @req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetTableTypes", TMessageType.Call, SeqId), cancellationToken);

        var tmp681 = new InternalStructs.GetTableTypes_args() {
          Req = @req,
        };

        await tmp681.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetTableTypesResp> recv_GetTableTypes(CancellationToken cancellationToken = default)
      {

        var tmp682 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp682.Type == TMessageType.Exception)
        {
          var tmp683 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp683;
        }

        var tmp684 = new InternalStructs.GetTableTypes_result();
        await tmp684.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp684.__isset.success)
        {
          return tmp684.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetTableTypes failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetColumnsResp> GetColumns(global::Apache.Hive.Service.Rpc.Thrift.TGetColumnsReq @req, CancellationToken cancellationToken = default)
      {
        await send_GetColumns(@req, cancellationToken);
        return await recv_GetColumns(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetColumns(global::Apache.Hive.Service.Rpc.Thrift.TGetColumnsReq @req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetColumns", TMessageType.Call, SeqId), cancellationToken);

        var tmp685 = new InternalStructs.GetColumns_args() {
          Req = @req,
        };

        await tmp685.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetColumnsResp> recv_GetColumns(CancellationToken cancellationToken = default)
      {

        var tmp686 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp686.Type == TMessageType.Exception)
        {
          var tmp687 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp687;
        }

        var tmp688 = new InternalStructs.GetColumns_result();
        await tmp688.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp688.__isset.success)
        {
          return tmp688.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetColumns failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetFunctionsResp> GetFunctions(global::Apache.Hive.Service.Rpc.Thrift.TGetFunctionsReq @req, CancellationToken cancellationToken = default)
      {
        await send_GetFunctions(@req, cancellationToken);
        return await recv_GetFunctions(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetFunctions(global::Apache.Hive.Service.Rpc.Thrift.TGetFunctionsReq @req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetFunctions", TMessageType.Call, SeqId), cancellationToken);

        var tmp689 = new InternalStructs.GetFunctions_args() {
          Req = @req,
        };

        await tmp689.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetFunctionsResp> recv_GetFunctions(CancellationToken cancellationToken = default)
      {

        var tmp690 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp690.Type == TMessageType.Exception)
        {
          var tmp691 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp691;
        }

        var tmp692 = new InternalStructs.GetFunctions_result();
        await tmp692.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp692.__isset.success)
        {
          return tmp692.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetFunctions failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetPrimaryKeysResp> GetPrimaryKeys(global::Apache.Hive.Service.Rpc.Thrift.TGetPrimaryKeysReq @req, CancellationToken cancellationToken = default)
      {
        await send_GetPrimaryKeys(@req, cancellationToken);
        return await recv_GetPrimaryKeys(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetPrimaryKeys(global::Apache.Hive.Service.Rpc.Thrift.TGetPrimaryKeysReq @req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetPrimaryKeys", TMessageType.Call, SeqId), cancellationToken);

        var tmp693 = new InternalStructs.GetPrimaryKeys_args() {
          Req = @req,
        };

        await tmp693.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetPrimaryKeysResp> recv_GetPrimaryKeys(CancellationToken cancellationToken = default)
      {

        var tmp694 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp694.Type == TMessageType.Exception)
        {
          var tmp695 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp695;
        }

        var tmp696 = new InternalStructs.GetPrimaryKeys_result();
        await tmp696.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp696.__isset.success)
        {
          return tmp696.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetPrimaryKeys failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetCrossReferenceResp> GetCrossReference(global::Apache.Hive.Service.Rpc.Thrift.TGetCrossReferenceReq @req, CancellationToken cancellationToken = default)
      {
        await send_GetCrossReference(@req, cancellationToken);
        return await recv_GetCrossReference(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetCrossReference(global::Apache.Hive.Service.Rpc.Thrift.TGetCrossReferenceReq @req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetCrossReference", TMessageType.Call, SeqId), cancellationToken);

        var tmp697 = new InternalStructs.GetCrossReference_args() {
          Req = @req,
        };

        await tmp697.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetCrossReferenceResp> recv_GetCrossReference(CancellationToken cancellationToken = default)
      {

        var tmp698 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp698.Type == TMessageType.Exception)
        {
          var tmp699 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp699;
        }

        var tmp700 = new InternalStructs.GetCrossReference_result();
        await tmp700.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp700.__isset.success)
        {
          return tmp700.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetCrossReference failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetOperationStatusResp> GetOperationStatus(global::Apache.Hive.Service.Rpc.Thrift.TGetOperationStatusReq @req, CancellationToken cancellationToken = default)
      {
        await send_GetOperationStatus(@req, cancellationToken);
        return await recv_GetOperationStatus(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetOperationStatus(global::Apache.Hive.Service.Rpc.Thrift.TGetOperationStatusReq @req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetOperationStatus", TMessageType.Call, SeqId), cancellationToken);

        var tmp701 = new InternalStructs.GetOperationStatus_args() {
          Req = @req,
        };

        await tmp701.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetOperationStatusResp> recv_GetOperationStatus(CancellationToken cancellationToken = default)
      {

        var tmp702 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp702.Type == TMessageType.Exception)
        {
          var tmp703 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp703;
        }

        var tmp704 = new InternalStructs.GetOperationStatus_result();
        await tmp704.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp704.__isset.success)
        {
          return tmp704.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetOperationStatus failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TCancelOperationResp> CancelOperation(global::Apache.Hive.Service.Rpc.Thrift.TCancelOperationReq @req, CancellationToken cancellationToken = default)
      {
        await send_CancelOperation(@req, cancellationToken);
        return await recv_CancelOperation(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_CancelOperation(global::Apache.Hive.Service.Rpc.Thrift.TCancelOperationReq @req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("CancelOperation", TMessageType.Call, SeqId), cancellationToken);

        var tmp705 = new InternalStructs.CancelOperation_args() {
          Req = @req,
        };

        await tmp705.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TCancelOperationResp> recv_CancelOperation(CancellationToken cancellationToken = default)
      {

        var tmp706 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp706.Type == TMessageType.Exception)
        {
          var tmp707 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp707;
        }

        var tmp708 = new InternalStructs.CancelOperation_result();
        await tmp708.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp708.__isset.success)
        {
          return tmp708.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CancelOperation failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TCloseOperationResp> CloseOperation(global::Apache.Hive.Service.Rpc.Thrift.TCloseOperationReq @req, CancellationToken cancellationToken = default)
      {
        await send_CloseOperation(@req, cancellationToken);
        return await recv_CloseOperation(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_CloseOperation(global::Apache.Hive.Service.Rpc.Thrift.TCloseOperationReq @req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("CloseOperation", TMessageType.Call, SeqId), cancellationToken);

        var tmp709 = new InternalStructs.CloseOperation_args() {
          Req = @req,
        };

        await tmp709.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TCloseOperationResp> recv_CloseOperation(CancellationToken cancellationToken = default)
      {

        var tmp710 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp710.Type == TMessageType.Exception)
        {
          var tmp711 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp711;
        }

        var tmp712 = new InternalStructs.CloseOperation_result();
        await tmp712.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp712.__isset.success)
        {
          return tmp712.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CloseOperation failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetResultSetMetadataResp> GetResultSetMetadata(global::Apache.Hive.Service.Rpc.Thrift.TGetResultSetMetadataReq @req, CancellationToken cancellationToken = default)
      {
        await send_GetResultSetMetadata(@req, cancellationToken);
        return await recv_GetResultSetMetadata(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetResultSetMetadata(global::Apache.Hive.Service.Rpc.Thrift.TGetResultSetMetadataReq @req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetResultSetMetadata", TMessageType.Call, SeqId), cancellationToken);

        var tmp713 = new InternalStructs.GetResultSetMetadata_args() {
          Req = @req,
        };

        await tmp713.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetResultSetMetadataResp> recv_GetResultSetMetadata(CancellationToken cancellationToken = default)
      {

        var tmp714 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp714.Type == TMessageType.Exception)
        {
          var tmp715 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp715;
        }

        var tmp716 = new InternalStructs.GetResultSetMetadata_result();
        await tmp716.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp716.__isset.success)
        {
          return tmp716.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetResultSetMetadata failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TFetchResultsResp> FetchResults(global::Apache.Hive.Service.Rpc.Thrift.TFetchResultsReq @req, CancellationToken cancellationToken = default)
      {
        await send_FetchResults(@req, cancellationToken);
        return await recv_FetchResults(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_FetchResults(global::Apache.Hive.Service.Rpc.Thrift.TFetchResultsReq @req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("FetchResults", TMessageType.Call, SeqId), cancellationToken);

        var tmp717 = new InternalStructs.FetchResults_args() {
          Req = @req,
        };

        await tmp717.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TFetchResultsResp> recv_FetchResults(CancellationToken cancellationToken = default)
      {

        var tmp718 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp718.Type == TMessageType.Exception)
        {
          var tmp719 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp719;
        }

        var tmp720 = new InternalStructs.FetchResults_result();
        await tmp720.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp720.__isset.success)
        {
          return tmp720.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "FetchResults failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetDelegationTokenResp> GetDelegationToken(global::Apache.Hive.Service.Rpc.Thrift.TGetDelegationTokenReq @req, CancellationToken cancellationToken = default)
      {
        await send_GetDelegationToken(@req, cancellationToken);
        return await recv_GetDelegationToken(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetDelegationToken(global::Apache.Hive.Service.Rpc.Thrift.TGetDelegationTokenReq @req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetDelegationToken", TMessageType.Call, SeqId), cancellationToken);

        var tmp721 = new InternalStructs.GetDelegationToken_args() {
          Req = @req,
        };

        await tmp721.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetDelegationTokenResp> recv_GetDelegationToken(CancellationToken cancellationToken = default)
      {

        var tmp722 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp722.Type == TMessageType.Exception)
        {
          var tmp723 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp723;
        }

        var tmp724 = new InternalStructs.GetDelegationToken_result();
        await tmp724.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp724.__isset.success)
        {
          return tmp724.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetDelegationToken failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TCancelDelegationTokenResp> CancelDelegationToken(global::Apache.Hive.Service.Rpc.Thrift.TCancelDelegationTokenReq @req, CancellationToken cancellationToken = default)
      {
        await send_CancelDelegationToken(@req, cancellationToken);
        return await recv_CancelDelegationToken(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_CancelDelegationToken(global::Apache.Hive.Service.Rpc.Thrift.TCancelDelegationTokenReq @req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("CancelDelegationToken", TMessageType.Call, SeqId), cancellationToken);

        var tmp725 = new InternalStructs.CancelDelegationToken_args() {
          Req = @req,
        };

        await tmp725.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TCancelDelegationTokenResp> recv_CancelDelegationToken(CancellationToken cancellationToken = default)
      {

        var tmp726 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp726.Type == TMessageType.Exception)
        {
          var tmp727 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp727;
        }

        var tmp728 = new InternalStructs.CancelDelegationToken_result();
        await tmp728.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp728.__isset.success)
        {
          return tmp728.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CancelDelegationToken failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TRenewDelegationTokenResp> RenewDelegationToken(global::Apache.Hive.Service.Rpc.Thrift.TRenewDelegationTokenReq @req, CancellationToken cancellationToken = default)
      {
        await send_RenewDelegationToken(@req, cancellationToken);
        return await recv_RenewDelegationToken(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_RenewDelegationToken(global::Apache.Hive.Service.Rpc.Thrift.TRenewDelegationTokenReq @req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("RenewDelegationToken", TMessageType.Call, SeqId), cancellationToken);

        var tmp729 = new InternalStructs.RenewDelegationToken_args() {
          Req = @req,
        };

        await tmp729.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TRenewDelegationTokenResp> recv_RenewDelegationToken(CancellationToken cancellationToken = default)
      {

        var tmp730 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp730.Type == TMessageType.Exception)
        {
          var tmp731 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp731;
        }

        var tmp732 = new InternalStructs.RenewDelegationToken_result();
        await tmp732.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp732.__isset.success)
        {
          return tmp732.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "RenewDelegationToken failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetQueryIdResp> GetQueryId(global::Apache.Hive.Service.Rpc.Thrift.TGetQueryIdReq @req, CancellationToken cancellationToken = default)
      {
        await send_GetQueryId(@req, cancellationToken);
        return await recv_GetQueryId(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_GetQueryId(global::Apache.Hive.Service.Rpc.Thrift.TGetQueryIdReq @req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("GetQueryId", TMessageType.Call, SeqId), cancellationToken);

        var tmp733 = new InternalStructs.GetQueryId_args() {
          Req = @req,
        };

        await tmp733.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TGetQueryIdResp> recv_GetQueryId(CancellationToken cancellationToken = default)
      {

        var tmp734 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp734.Type == TMessageType.Exception)
        {
          var tmp735 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp735;
        }

        var tmp736 = new InternalStructs.GetQueryId_result();
        await tmp736.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp736.__isset.success)
        {
          return tmp736.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetQueryId failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TSetClientInfoResp> SetClientInfo(global::Apache.Hive.Service.Rpc.Thrift.TSetClientInfoReq @req, CancellationToken cancellationToken = default)
      {
        await send_SetClientInfo(@req, cancellationToken);
        return await recv_SetClientInfo(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_SetClientInfo(global::Apache.Hive.Service.Rpc.Thrift.TSetClientInfoReq @req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("SetClientInfo", TMessageType.Call, SeqId), cancellationToken);

        var tmp737 = new InternalStructs.SetClientInfo_args() {
          Req = @req,
        };

        await tmp737.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TSetClientInfoResp> recv_SetClientInfo(CancellationToken cancellationToken = default)
      {

        var tmp738 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp738.Type == TMessageType.Exception)
        {
          var tmp739 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp739;
        }

        var tmp740 = new InternalStructs.SetClientInfo_result();
        await tmp740.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp740.__isset.success)
        {
          return tmp740.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "SetClientInfo failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TUploadDataResp> UploadData(global::Apache.Hive.Service.Rpc.Thrift.TUploadDataReq @req, CancellationToken cancellationToken = default)
      {
        await send_UploadData(@req, cancellationToken);
        return await recv_UploadData(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_UploadData(global::Apache.Hive.Service.Rpc.Thrift.TUploadDataReq @req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("UploadData", TMessageType.Call, SeqId), cancellationToken);

        var tmp741 = new InternalStructs.UploadData_args() {
          Req = @req,
        };

        await tmp741.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TUploadDataResp> recv_UploadData(CancellationToken cancellationToken = default)
      {

        var tmp742 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp742.Type == TMessageType.Exception)
        {
          var tmp743 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp743;
        }

        var tmp744 = new InternalStructs.UploadData_result();
        await tmp744.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp744.__isset.success)
        {
          return tmp744.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "UploadData failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TDownloadDataResp> DownloadData(global::Apache.Hive.Service.Rpc.Thrift.TDownloadDataReq @req, CancellationToken cancellationToken = default)
      {
        await send_DownloadData(@req, cancellationToken);
        return await recv_DownloadData(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_DownloadData(global::Apache.Hive.Service.Rpc.Thrift.TDownloadDataReq @req, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("DownloadData", TMessageType.Call, SeqId), cancellationToken);

        var tmp745 = new InternalStructs.DownloadData_args() {
          Req = @req,
        };

        await tmp745.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<global::Apache.Hive.Service.Rpc.Thrift.TDownloadDataResp> recv_DownloadData(CancellationToken cancellationToken = default)
      {

        var tmp746 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp746.Type == TMessageType.Exception)
        {
          var tmp747 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp747;
        }

        var tmp748 = new InternalStructs.DownloadData_result();
        await tmp748.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp748.__isset.success)
        {
          return tmp748.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "DownloadData failed: unknown result");
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private readonly IAsync _iAsync;
      private readonly ILogger<AsyncProcessor> _logger;

      public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
      {
        _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
        _logger = logger;
        processMap_["OpenSession"] = OpenSession_ProcessAsync;
        processMap_["CloseSession"] = CloseSession_ProcessAsync;
        processMap_["GetInfo"] = GetInfo_ProcessAsync;
        processMap_["ExecuteStatement"] = ExecuteStatement_ProcessAsync;
        processMap_["GetTypeInfo"] = GetTypeInfo_ProcessAsync;
        processMap_["GetCatalogs"] = GetCatalogs_ProcessAsync;
        processMap_["GetSchemas"] = GetSchemas_ProcessAsync;
        processMap_["GetTables"] = GetTables_ProcessAsync;
        processMap_["GetTableTypes"] = GetTableTypes_ProcessAsync;
        processMap_["GetColumns"] = GetColumns_ProcessAsync;
        processMap_["GetFunctions"] = GetFunctions_ProcessAsync;
        processMap_["GetPrimaryKeys"] = GetPrimaryKeys_ProcessAsync;
        processMap_["GetCrossReference"] = GetCrossReference_ProcessAsync;
        processMap_["GetOperationStatus"] = GetOperationStatus_ProcessAsync;
        processMap_["CancelOperation"] = CancelOperation_ProcessAsync;
        processMap_["CloseOperation"] = CloseOperation_ProcessAsync;
        processMap_["GetResultSetMetadata"] = GetResultSetMetadata_ProcessAsync;
        processMap_["FetchResults"] = FetchResults_ProcessAsync;
        processMap_["GetDelegationToken"] = GetDelegationToken_ProcessAsync;
        processMap_["CancelDelegationToken"] = CancelDelegationToken_ProcessAsync;
        processMap_["RenewDelegationToken"] = RenewDelegationToken_ProcessAsync;
        processMap_["GetQueryId"] = GetQueryId_ProcessAsync;
        processMap_["SetClientInfo"] = SetClientInfo_ProcessAsync;
        processMap_["UploadData"] = UploadData_ProcessAsync;
        processMap_["DownloadData"] = DownloadData_ProcessAsync;
      }

      protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          processMap_.TryGetValue(msg.Name, out var fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async global::System.Threading.Tasks.Task OpenSession_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp749 = new InternalStructs.OpenSession_args();
        await tmp749.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp750 = new InternalStructs.OpenSession_result();
        try
        {
          tmp750.Success = await _iAsync.OpenSession(tmp749.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("OpenSession", TMessageType.Reply, seqid), cancellationToken);
          await tmp750.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp751)
        {
          var tmp752 = $"Error occurred in {GetType().FullName}: {tmp751.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp751, tmp752);
          else
            Console.Error.WriteLine(tmp752);
          var tmp753 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("OpenSession", TMessageType.Exception, seqid), cancellationToken);
          await tmp753.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task CloseSession_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp754 = new InternalStructs.CloseSession_args();
        await tmp754.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp755 = new InternalStructs.CloseSession_result();
        try
        {
          tmp755.Success = await _iAsync.CloseSession(tmp754.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("CloseSession", TMessageType.Reply, seqid), cancellationToken);
          await tmp755.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp756)
        {
          var tmp757 = $"Error occurred in {GetType().FullName}: {tmp756.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp756, tmp757);
          else
            Console.Error.WriteLine(tmp757);
          var tmp758 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("CloseSession", TMessageType.Exception, seqid), cancellationToken);
          await tmp758.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetInfo_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp759 = new InternalStructs.GetInfo_args();
        await tmp759.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp760 = new InternalStructs.GetInfo_result();
        try
        {
          tmp760.Success = await _iAsync.GetInfo(tmp759.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetInfo", TMessageType.Reply, seqid), cancellationToken);
          await tmp760.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp761)
        {
          var tmp762 = $"Error occurred in {GetType().FullName}: {tmp761.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp761, tmp762);
          else
            Console.Error.WriteLine(tmp762);
          var tmp763 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetInfo", TMessageType.Exception, seqid), cancellationToken);
          await tmp763.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task ExecuteStatement_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp764 = new InternalStructs.ExecuteStatement_args();
        await tmp764.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp765 = new InternalStructs.ExecuteStatement_result();
        try
        {
          tmp765.Success = await _iAsync.ExecuteStatement(tmp764.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("ExecuteStatement", TMessageType.Reply, seqid), cancellationToken);
          await tmp765.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp766)
        {
          var tmp767 = $"Error occurred in {GetType().FullName}: {tmp766.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp766, tmp767);
          else
            Console.Error.WriteLine(tmp767);
          var tmp768 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("ExecuteStatement", TMessageType.Exception, seqid), cancellationToken);
          await tmp768.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetTypeInfo_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp769 = new InternalStructs.GetTypeInfo_args();
        await tmp769.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp770 = new InternalStructs.GetTypeInfo_result();
        try
        {
          tmp770.Success = await _iAsync.GetTypeInfo(tmp769.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetTypeInfo", TMessageType.Reply, seqid), cancellationToken);
          await tmp770.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp771)
        {
          var tmp772 = $"Error occurred in {GetType().FullName}: {tmp771.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp771, tmp772);
          else
            Console.Error.WriteLine(tmp772);
          var tmp773 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetTypeInfo", TMessageType.Exception, seqid), cancellationToken);
          await tmp773.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetCatalogs_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp774 = new InternalStructs.GetCatalogs_args();
        await tmp774.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp775 = new InternalStructs.GetCatalogs_result();
        try
        {
          tmp775.Success = await _iAsync.GetCatalogs(tmp774.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetCatalogs", TMessageType.Reply, seqid), cancellationToken);
          await tmp775.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp776)
        {
          var tmp777 = $"Error occurred in {GetType().FullName}: {tmp776.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp776, tmp777);
          else
            Console.Error.WriteLine(tmp777);
          var tmp778 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetCatalogs", TMessageType.Exception, seqid), cancellationToken);
          await tmp778.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetSchemas_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp779 = new InternalStructs.GetSchemas_args();
        await tmp779.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp780 = new InternalStructs.GetSchemas_result();
        try
        {
          tmp780.Success = await _iAsync.GetSchemas(tmp779.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetSchemas", TMessageType.Reply, seqid), cancellationToken);
          await tmp780.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp781)
        {
          var tmp782 = $"Error occurred in {GetType().FullName}: {tmp781.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp781, tmp782);
          else
            Console.Error.WriteLine(tmp782);
          var tmp783 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetSchemas", TMessageType.Exception, seqid), cancellationToken);
          await tmp783.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetTables_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp784 = new InternalStructs.GetTables_args();
        await tmp784.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp785 = new InternalStructs.GetTables_result();
        try
        {
          tmp785.Success = await _iAsync.GetTables(tmp784.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetTables", TMessageType.Reply, seqid), cancellationToken);
          await tmp785.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp786)
        {
          var tmp787 = $"Error occurred in {GetType().FullName}: {tmp786.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp786, tmp787);
          else
            Console.Error.WriteLine(tmp787);
          var tmp788 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetTables", TMessageType.Exception, seqid), cancellationToken);
          await tmp788.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetTableTypes_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp789 = new InternalStructs.GetTableTypes_args();
        await tmp789.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp790 = new InternalStructs.GetTableTypes_result();
        try
        {
          tmp790.Success = await _iAsync.GetTableTypes(tmp789.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetTableTypes", TMessageType.Reply, seqid), cancellationToken);
          await tmp790.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp791)
        {
          var tmp792 = $"Error occurred in {GetType().FullName}: {tmp791.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp791, tmp792);
          else
            Console.Error.WriteLine(tmp792);
          var tmp793 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetTableTypes", TMessageType.Exception, seqid), cancellationToken);
          await tmp793.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetColumns_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp794 = new InternalStructs.GetColumns_args();
        await tmp794.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp795 = new InternalStructs.GetColumns_result();
        try
        {
          tmp795.Success = await _iAsync.GetColumns(tmp794.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetColumns", TMessageType.Reply, seqid), cancellationToken);
          await tmp795.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp796)
        {
          var tmp797 = $"Error occurred in {GetType().FullName}: {tmp796.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp796, tmp797);
          else
            Console.Error.WriteLine(tmp797);
          var tmp798 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetColumns", TMessageType.Exception, seqid), cancellationToken);
          await tmp798.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetFunctions_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp799 = new InternalStructs.GetFunctions_args();
        await tmp799.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp800 = new InternalStructs.GetFunctions_result();
        try
        {
          tmp800.Success = await _iAsync.GetFunctions(tmp799.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetFunctions", TMessageType.Reply, seqid), cancellationToken);
          await tmp800.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp801)
        {
          var tmp802 = $"Error occurred in {GetType().FullName}: {tmp801.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp801, tmp802);
          else
            Console.Error.WriteLine(tmp802);
          var tmp803 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetFunctions", TMessageType.Exception, seqid), cancellationToken);
          await tmp803.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetPrimaryKeys_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp804 = new InternalStructs.GetPrimaryKeys_args();
        await tmp804.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp805 = new InternalStructs.GetPrimaryKeys_result();
        try
        {
          tmp805.Success = await _iAsync.GetPrimaryKeys(tmp804.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetPrimaryKeys", TMessageType.Reply, seqid), cancellationToken);
          await tmp805.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp806)
        {
          var tmp807 = $"Error occurred in {GetType().FullName}: {tmp806.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp806, tmp807);
          else
            Console.Error.WriteLine(tmp807);
          var tmp808 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetPrimaryKeys", TMessageType.Exception, seqid), cancellationToken);
          await tmp808.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetCrossReference_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp809 = new InternalStructs.GetCrossReference_args();
        await tmp809.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp810 = new InternalStructs.GetCrossReference_result();
        try
        {
          tmp810.Success = await _iAsync.GetCrossReference(tmp809.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetCrossReference", TMessageType.Reply, seqid), cancellationToken);
          await tmp810.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp811)
        {
          var tmp812 = $"Error occurred in {GetType().FullName}: {tmp811.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp811, tmp812);
          else
            Console.Error.WriteLine(tmp812);
          var tmp813 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetCrossReference", TMessageType.Exception, seqid), cancellationToken);
          await tmp813.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetOperationStatus_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp814 = new InternalStructs.GetOperationStatus_args();
        await tmp814.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp815 = new InternalStructs.GetOperationStatus_result();
        try
        {
          tmp815.Success = await _iAsync.GetOperationStatus(tmp814.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetOperationStatus", TMessageType.Reply, seqid), cancellationToken);
          await tmp815.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp816)
        {
          var tmp817 = $"Error occurred in {GetType().FullName}: {tmp816.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp816, tmp817);
          else
            Console.Error.WriteLine(tmp817);
          var tmp818 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetOperationStatus", TMessageType.Exception, seqid), cancellationToken);
          await tmp818.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task CancelOperation_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp819 = new InternalStructs.CancelOperation_args();
        await tmp819.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp820 = new InternalStructs.CancelOperation_result();
        try
        {
          tmp820.Success = await _iAsync.CancelOperation(tmp819.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("CancelOperation", TMessageType.Reply, seqid), cancellationToken);
          await tmp820.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp821)
        {
          var tmp822 = $"Error occurred in {GetType().FullName}: {tmp821.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp821, tmp822);
          else
            Console.Error.WriteLine(tmp822);
          var tmp823 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("CancelOperation", TMessageType.Exception, seqid), cancellationToken);
          await tmp823.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task CloseOperation_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp824 = new InternalStructs.CloseOperation_args();
        await tmp824.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp825 = new InternalStructs.CloseOperation_result();
        try
        {
          tmp825.Success = await _iAsync.CloseOperation(tmp824.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("CloseOperation", TMessageType.Reply, seqid), cancellationToken);
          await tmp825.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp826)
        {
          var tmp827 = $"Error occurred in {GetType().FullName}: {tmp826.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp826, tmp827);
          else
            Console.Error.WriteLine(tmp827);
          var tmp828 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("CloseOperation", TMessageType.Exception, seqid), cancellationToken);
          await tmp828.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetResultSetMetadata_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp829 = new InternalStructs.GetResultSetMetadata_args();
        await tmp829.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp830 = new InternalStructs.GetResultSetMetadata_result();
        try
        {
          tmp830.Success = await _iAsync.GetResultSetMetadata(tmp829.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetResultSetMetadata", TMessageType.Reply, seqid), cancellationToken);
          await tmp830.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp831)
        {
          var tmp832 = $"Error occurred in {GetType().FullName}: {tmp831.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp831, tmp832);
          else
            Console.Error.WriteLine(tmp832);
          var tmp833 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetResultSetMetadata", TMessageType.Exception, seqid), cancellationToken);
          await tmp833.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task FetchResults_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp834 = new InternalStructs.FetchResults_args();
        await tmp834.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp835 = new InternalStructs.FetchResults_result();
        try
        {
          tmp835.Success = await _iAsync.FetchResults(tmp834.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("FetchResults", TMessageType.Reply, seqid), cancellationToken);
          await tmp835.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp836)
        {
          var tmp837 = $"Error occurred in {GetType().FullName}: {tmp836.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp836, tmp837);
          else
            Console.Error.WriteLine(tmp837);
          var tmp838 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("FetchResults", TMessageType.Exception, seqid), cancellationToken);
          await tmp838.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetDelegationToken_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp839 = new InternalStructs.GetDelegationToken_args();
        await tmp839.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp840 = new InternalStructs.GetDelegationToken_result();
        try
        {
          tmp840.Success = await _iAsync.GetDelegationToken(tmp839.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetDelegationToken", TMessageType.Reply, seqid), cancellationToken);
          await tmp840.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp841)
        {
          var tmp842 = $"Error occurred in {GetType().FullName}: {tmp841.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp841, tmp842);
          else
            Console.Error.WriteLine(tmp842);
          var tmp843 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetDelegationToken", TMessageType.Exception, seqid), cancellationToken);
          await tmp843.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task CancelDelegationToken_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp844 = new InternalStructs.CancelDelegationToken_args();
        await tmp844.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp845 = new InternalStructs.CancelDelegationToken_result();
        try
        {
          tmp845.Success = await _iAsync.CancelDelegationToken(tmp844.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("CancelDelegationToken", TMessageType.Reply, seqid), cancellationToken);
          await tmp845.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp846)
        {
          var tmp847 = $"Error occurred in {GetType().FullName}: {tmp846.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp846, tmp847);
          else
            Console.Error.WriteLine(tmp847);
          var tmp848 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("CancelDelegationToken", TMessageType.Exception, seqid), cancellationToken);
          await tmp848.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task RenewDelegationToken_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp849 = new InternalStructs.RenewDelegationToken_args();
        await tmp849.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp850 = new InternalStructs.RenewDelegationToken_result();
        try
        {
          tmp850.Success = await _iAsync.RenewDelegationToken(tmp849.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("RenewDelegationToken", TMessageType.Reply, seqid), cancellationToken);
          await tmp850.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp851)
        {
          var tmp852 = $"Error occurred in {GetType().FullName}: {tmp851.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp851, tmp852);
          else
            Console.Error.WriteLine(tmp852);
          var tmp853 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("RenewDelegationToken", TMessageType.Exception, seqid), cancellationToken);
          await tmp853.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task GetQueryId_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp854 = new InternalStructs.GetQueryId_args();
        await tmp854.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp855 = new InternalStructs.GetQueryId_result();
        try
        {
          tmp855.Success = await _iAsync.GetQueryId(tmp854.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("GetQueryId", TMessageType.Reply, seqid), cancellationToken);
          await tmp855.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp856)
        {
          var tmp857 = $"Error occurred in {GetType().FullName}: {tmp856.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp856, tmp857);
          else
            Console.Error.WriteLine(tmp857);
          var tmp858 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("GetQueryId", TMessageType.Exception, seqid), cancellationToken);
          await tmp858.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task SetClientInfo_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp859 = new InternalStructs.SetClientInfo_args();
        await tmp859.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp860 = new InternalStructs.SetClientInfo_result();
        try
        {
          tmp860.Success = await _iAsync.SetClientInfo(tmp859.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("SetClientInfo", TMessageType.Reply, seqid), cancellationToken);
          await tmp860.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp861)
        {
          var tmp862 = $"Error occurred in {GetType().FullName}: {tmp861.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp861, tmp862);
          else
            Console.Error.WriteLine(tmp862);
          var tmp863 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("SetClientInfo", TMessageType.Exception, seqid), cancellationToken);
          await tmp863.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task UploadData_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp864 = new InternalStructs.UploadData_args();
        await tmp864.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp865 = new InternalStructs.UploadData_result();
        try
        {
          tmp865.Success = await _iAsync.UploadData(tmp864.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("UploadData", TMessageType.Reply, seqid), cancellationToken);
          await tmp865.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp866)
        {
          var tmp867 = $"Error occurred in {GetType().FullName}: {tmp866.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp866, tmp867);
          else
            Console.Error.WriteLine(tmp867);
          var tmp868 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("UploadData", TMessageType.Exception, seqid), cancellationToken);
          await tmp868.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task DownloadData_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp869 = new InternalStructs.DownloadData_args();
        await tmp869.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp870 = new InternalStructs.DownloadData_result();
        try
        {
          tmp870.Success = await _iAsync.DownloadData(tmp869.Req, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("DownloadData", TMessageType.Reply, seqid), cancellationToken);
          await tmp870.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp871)
        {
          var tmp872 = $"Error occurred in {GetType().FullName}: {tmp871.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp871, tmp872);
          else
            Console.Error.WriteLine(tmp872);
          var tmp873 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("DownloadData", TMessageType.Exception, seqid), cancellationToken);
          await tmp873.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }

    public class InternalStructs
    {

      public partial class OpenSession_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TOpenSessionReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TOpenSessionReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.@req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @req;
        }

        public OpenSession_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TOpenSessionReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp874 = new TStruct("OpenSession_args");
            await oprot.WriteStructBeginAsync(tmp874, cancellationToken);
            var tmp875 = new TField();
            if((Req != null) && __isset.@req)
            {
              tmp875.Name = "req";
              tmp875.Type = TType.Struct;
              tmp875.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp875, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is OpenSession_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.@req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp876 = new StringBuilder("OpenSession_args(");
          int tmp877 = 0;
          if((Req != null) && __isset.@req)
          {
            if(0 < tmp877++) { tmp876.Append(", "); }
            tmp876.Append("Req: ");
            Req.ToString(tmp876);
          }
          tmp876.Append(')');
          return tmp876.ToString();
        }
      }


      public partial class OpenSession_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TOpenSessionResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TOpenSessionResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
        }

        public OpenSession_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TOpenSessionResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp878 = new TStruct("OpenSession_result");
            await oprot.WriteStructBeginAsync(tmp878, cancellationToken);
            var tmp879 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp879.Name = "Success";
                tmp879.Type = TType.Struct;
                tmp879.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp879, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is OpenSession_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp880 = new StringBuilder("OpenSession_result(");
          int tmp881 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp881++) { tmp880.Append(", "); }
            tmp880.Append("Success: ");
            Success.ToString(tmp880);
          }
          tmp880.Append(')');
          return tmp880.ToString();
        }
      }


      public partial class CloseSession_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TCloseSessionReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TCloseSessionReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.@req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @req;
        }

        public CloseSession_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TCloseSessionReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp882 = new TStruct("CloseSession_args");
            await oprot.WriteStructBeginAsync(tmp882, cancellationToken);
            var tmp883 = new TField();
            if((Req != null) && __isset.@req)
            {
              tmp883.Name = "req";
              tmp883.Type = TType.Struct;
              tmp883.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp883, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is CloseSession_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.@req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp884 = new StringBuilder("CloseSession_args(");
          int tmp885 = 0;
          if((Req != null) && __isset.@req)
          {
            if(0 < tmp885++) { tmp884.Append(", "); }
            tmp884.Append("Req: ");
            Req.ToString(tmp884);
          }
          tmp884.Append(')');
          return tmp884.ToString();
        }
      }


      public partial class CloseSession_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TCloseSessionResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TCloseSessionResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
        }

        public CloseSession_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TCloseSessionResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp886 = new TStruct("CloseSession_result");
            await oprot.WriteStructBeginAsync(tmp886, cancellationToken);
            var tmp887 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp887.Name = "Success";
                tmp887.Type = TType.Struct;
                tmp887.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp887, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is CloseSession_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp888 = new StringBuilder("CloseSession_result(");
          int tmp889 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp889++) { tmp888.Append(", "); }
            tmp888.Append("Success: ");
            Success.ToString(tmp888);
          }
          tmp888.Append(')');
          return tmp888.ToString();
        }
      }


      public partial class GetInfo_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetInfoReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetInfoReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.@req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @req;
        }

        public GetInfo_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TGetInfoReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp890 = new TStruct("GetInfo_args");
            await oprot.WriteStructBeginAsync(tmp890, cancellationToken);
            var tmp891 = new TField();
            if((Req != null) && __isset.@req)
            {
              tmp891.Name = "req";
              tmp891.Type = TType.Struct;
              tmp891.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp891, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetInfo_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.@req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp892 = new StringBuilder("GetInfo_args(");
          int tmp893 = 0;
          if((Req != null) && __isset.@req)
          {
            if(0 < tmp893++) { tmp892.Append(", "); }
            tmp892.Append("Req: ");
            Req.ToString(tmp892);
          }
          tmp892.Append(')');
          return tmp892.ToString();
        }
      }


      public partial class GetInfo_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetInfoResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetInfoResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
        }

        public GetInfo_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TGetInfoResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp894 = new TStruct("GetInfo_result");
            await oprot.WriteStructBeginAsync(tmp894, cancellationToken);
            var tmp895 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp895.Name = "Success";
                tmp895.Type = TType.Struct;
                tmp895.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp895, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetInfo_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp896 = new StringBuilder("GetInfo_result(");
          int tmp897 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp897++) { tmp896.Append(", "); }
            tmp896.Append("Success: ");
            Success.ToString(tmp896);
          }
          tmp896.Append(')');
          return tmp896.ToString();
        }
      }


      public partial class ExecuteStatement_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TExecuteStatementReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TExecuteStatementReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.@req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @req;
        }

        public ExecuteStatement_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TExecuteStatementReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp898 = new TStruct("ExecuteStatement_args");
            await oprot.WriteStructBeginAsync(tmp898, cancellationToken);
            var tmp899 = new TField();
            if((Req != null) && __isset.@req)
            {
              tmp899.Name = "req";
              tmp899.Type = TType.Struct;
              tmp899.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp899, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is ExecuteStatement_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.@req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp900 = new StringBuilder("ExecuteStatement_args(");
          int tmp901 = 0;
          if((Req != null) && __isset.@req)
          {
            if(0 < tmp901++) { tmp900.Append(", "); }
            tmp900.Append("Req: ");
            Req.ToString(tmp900);
          }
          tmp900.Append(')');
          return tmp900.ToString();
        }
      }


      public partial class ExecuteStatement_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TExecuteStatementResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TExecuteStatementResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
        }

        public ExecuteStatement_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TExecuteStatementResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp902 = new TStruct("ExecuteStatement_result");
            await oprot.WriteStructBeginAsync(tmp902, cancellationToken);
            var tmp903 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp903.Name = "Success";
                tmp903.Type = TType.Struct;
                tmp903.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp903, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is ExecuteStatement_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp904 = new StringBuilder("ExecuteStatement_result(");
          int tmp905 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp905++) { tmp904.Append(", "); }
            tmp904.Append("Success: ");
            Success.ToString(tmp904);
          }
          tmp904.Append(')');
          return tmp904.ToString();
        }
      }


      public partial class GetTypeInfo_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetTypeInfoReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetTypeInfoReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.@req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @req;
        }

        public GetTypeInfo_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TGetTypeInfoReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp906 = new TStruct("GetTypeInfo_args");
            await oprot.WriteStructBeginAsync(tmp906, cancellationToken);
            var tmp907 = new TField();
            if((Req != null) && __isset.@req)
            {
              tmp907.Name = "req";
              tmp907.Type = TType.Struct;
              tmp907.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp907, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetTypeInfo_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.@req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp908 = new StringBuilder("GetTypeInfo_args(");
          int tmp909 = 0;
          if((Req != null) && __isset.@req)
          {
            if(0 < tmp909++) { tmp908.Append(", "); }
            tmp908.Append("Req: ");
            Req.ToString(tmp908);
          }
          tmp908.Append(')');
          return tmp908.ToString();
        }
      }


      public partial class GetTypeInfo_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetTypeInfoResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetTypeInfoResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
        }

        public GetTypeInfo_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TGetTypeInfoResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp910 = new TStruct("GetTypeInfo_result");
            await oprot.WriteStructBeginAsync(tmp910, cancellationToken);
            var tmp911 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp911.Name = "Success";
                tmp911.Type = TType.Struct;
                tmp911.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp911, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetTypeInfo_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp912 = new StringBuilder("GetTypeInfo_result(");
          int tmp913 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp913++) { tmp912.Append(", "); }
            tmp912.Append("Success: ");
            Success.ToString(tmp912);
          }
          tmp912.Append(')');
          return tmp912.ToString();
        }
      }


      public partial class GetCatalogs_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetCatalogsReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetCatalogsReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.@req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @req;
        }

        public GetCatalogs_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TGetCatalogsReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp914 = new TStruct("GetCatalogs_args");
            await oprot.WriteStructBeginAsync(tmp914, cancellationToken);
            var tmp915 = new TField();
            if((Req != null) && __isset.@req)
            {
              tmp915.Name = "req";
              tmp915.Type = TType.Struct;
              tmp915.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp915, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetCatalogs_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.@req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp916 = new StringBuilder("GetCatalogs_args(");
          int tmp917 = 0;
          if((Req != null) && __isset.@req)
          {
            if(0 < tmp917++) { tmp916.Append(", "); }
            tmp916.Append("Req: ");
            Req.ToString(tmp916);
          }
          tmp916.Append(')');
          return tmp916.ToString();
        }
      }


      public partial class GetCatalogs_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetCatalogsResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetCatalogsResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
        }

        public GetCatalogs_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TGetCatalogsResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp918 = new TStruct("GetCatalogs_result");
            await oprot.WriteStructBeginAsync(tmp918, cancellationToken);
            var tmp919 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp919.Name = "Success";
                tmp919.Type = TType.Struct;
                tmp919.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp919, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetCatalogs_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp920 = new StringBuilder("GetCatalogs_result(");
          int tmp921 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp921++) { tmp920.Append(", "); }
            tmp920.Append("Success: ");
            Success.ToString(tmp920);
          }
          tmp920.Append(')');
          return tmp920.ToString();
        }
      }


      public partial class GetSchemas_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetSchemasReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetSchemasReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.@req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @req;
        }

        public GetSchemas_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TGetSchemasReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp922 = new TStruct("GetSchemas_args");
            await oprot.WriteStructBeginAsync(tmp922, cancellationToken);
            var tmp923 = new TField();
            if((Req != null) && __isset.@req)
            {
              tmp923.Name = "req";
              tmp923.Type = TType.Struct;
              tmp923.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp923, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetSchemas_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.@req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp924 = new StringBuilder("GetSchemas_args(");
          int tmp925 = 0;
          if((Req != null) && __isset.@req)
          {
            if(0 < tmp925++) { tmp924.Append(", "); }
            tmp924.Append("Req: ");
            Req.ToString(tmp924);
          }
          tmp924.Append(')');
          return tmp924.ToString();
        }
      }


      public partial class GetSchemas_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetSchemasResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetSchemasResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
        }

        public GetSchemas_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TGetSchemasResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp926 = new TStruct("GetSchemas_result");
            await oprot.WriteStructBeginAsync(tmp926, cancellationToken);
            var tmp927 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp927.Name = "Success";
                tmp927.Type = TType.Struct;
                tmp927.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp927, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetSchemas_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp928 = new StringBuilder("GetSchemas_result(");
          int tmp929 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp929++) { tmp928.Append(", "); }
            tmp928.Append("Success: ");
            Success.ToString(tmp928);
          }
          tmp928.Append(')');
          return tmp928.ToString();
        }
      }


      public partial class GetTables_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetTablesReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetTablesReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.@req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @req;
        }

        public GetTables_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TGetTablesReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp930 = new TStruct("GetTables_args");
            await oprot.WriteStructBeginAsync(tmp930, cancellationToken);
            var tmp931 = new TField();
            if((Req != null) && __isset.@req)
            {
              tmp931.Name = "req";
              tmp931.Type = TType.Struct;
              tmp931.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp931, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetTables_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.@req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp932 = new StringBuilder("GetTables_args(");
          int tmp933 = 0;
          if((Req != null) && __isset.@req)
          {
            if(0 < tmp933++) { tmp932.Append(", "); }
            tmp932.Append("Req: ");
            Req.ToString(tmp932);
          }
          tmp932.Append(')');
          return tmp932.ToString();
        }
      }


      public partial class GetTables_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetTablesResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetTablesResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
        }

        public GetTables_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TGetTablesResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp934 = new TStruct("GetTables_result");
            await oprot.WriteStructBeginAsync(tmp934, cancellationToken);
            var tmp935 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp935.Name = "Success";
                tmp935.Type = TType.Struct;
                tmp935.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp935, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetTables_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp936 = new StringBuilder("GetTables_result(");
          int tmp937 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp937++) { tmp936.Append(", "); }
            tmp936.Append("Success: ");
            Success.ToString(tmp936);
          }
          tmp936.Append(')');
          return tmp936.ToString();
        }
      }


      public partial class GetTableTypes_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetTableTypesReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetTableTypesReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.@req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @req;
        }

        public GetTableTypes_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TGetTableTypesReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp938 = new TStruct("GetTableTypes_args");
            await oprot.WriteStructBeginAsync(tmp938, cancellationToken);
            var tmp939 = new TField();
            if((Req != null) && __isset.@req)
            {
              tmp939.Name = "req";
              tmp939.Type = TType.Struct;
              tmp939.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp939, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetTableTypes_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.@req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp940 = new StringBuilder("GetTableTypes_args(");
          int tmp941 = 0;
          if((Req != null) && __isset.@req)
          {
            if(0 < tmp941++) { tmp940.Append(", "); }
            tmp940.Append("Req: ");
            Req.ToString(tmp940);
          }
          tmp940.Append(')');
          return tmp940.ToString();
        }
      }


      public partial class GetTableTypes_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetTableTypesResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetTableTypesResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
        }

        public GetTableTypes_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TGetTableTypesResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp942 = new TStruct("GetTableTypes_result");
            await oprot.WriteStructBeginAsync(tmp942, cancellationToken);
            var tmp943 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp943.Name = "Success";
                tmp943.Type = TType.Struct;
                tmp943.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp943, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetTableTypes_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp944 = new StringBuilder("GetTableTypes_result(");
          int tmp945 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp945++) { tmp944.Append(", "); }
            tmp944.Append("Success: ");
            Success.ToString(tmp944);
          }
          tmp944.Append(')');
          return tmp944.ToString();
        }
      }


      public partial class GetColumns_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetColumnsReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetColumnsReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.@req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @req;
        }

        public GetColumns_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TGetColumnsReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp946 = new TStruct("GetColumns_args");
            await oprot.WriteStructBeginAsync(tmp946, cancellationToken);
            var tmp947 = new TField();
            if((Req != null) && __isset.@req)
            {
              tmp947.Name = "req";
              tmp947.Type = TType.Struct;
              tmp947.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp947, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetColumns_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.@req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp948 = new StringBuilder("GetColumns_args(");
          int tmp949 = 0;
          if((Req != null) && __isset.@req)
          {
            if(0 < tmp949++) { tmp948.Append(", "); }
            tmp948.Append("Req: ");
            Req.ToString(tmp948);
          }
          tmp948.Append(')');
          return tmp948.ToString();
        }
      }


      public partial class GetColumns_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetColumnsResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetColumnsResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
        }

        public GetColumns_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TGetColumnsResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp950 = new TStruct("GetColumns_result");
            await oprot.WriteStructBeginAsync(tmp950, cancellationToken);
            var tmp951 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp951.Name = "Success";
                tmp951.Type = TType.Struct;
                tmp951.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp951, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetColumns_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp952 = new StringBuilder("GetColumns_result(");
          int tmp953 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp953++) { tmp952.Append(", "); }
            tmp952.Append("Success: ");
            Success.ToString(tmp952);
          }
          tmp952.Append(')');
          return tmp952.ToString();
        }
      }


      public partial class GetFunctions_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetFunctionsReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetFunctionsReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.@req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @req;
        }

        public GetFunctions_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TGetFunctionsReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp954 = new TStruct("GetFunctions_args");
            await oprot.WriteStructBeginAsync(tmp954, cancellationToken);
            var tmp955 = new TField();
            if((Req != null) && __isset.@req)
            {
              tmp955.Name = "req";
              tmp955.Type = TType.Struct;
              tmp955.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp955, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetFunctions_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.@req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp956 = new StringBuilder("GetFunctions_args(");
          int tmp957 = 0;
          if((Req != null) && __isset.@req)
          {
            if(0 < tmp957++) { tmp956.Append(", "); }
            tmp956.Append("Req: ");
            Req.ToString(tmp956);
          }
          tmp956.Append(')');
          return tmp956.ToString();
        }
      }


      public partial class GetFunctions_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetFunctionsResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetFunctionsResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
        }

        public GetFunctions_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TGetFunctionsResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp958 = new TStruct("GetFunctions_result");
            await oprot.WriteStructBeginAsync(tmp958, cancellationToken);
            var tmp959 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp959.Name = "Success";
                tmp959.Type = TType.Struct;
                tmp959.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp959, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetFunctions_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp960 = new StringBuilder("GetFunctions_result(");
          int tmp961 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp961++) { tmp960.Append(", "); }
            tmp960.Append("Success: ");
            Success.ToString(tmp960);
          }
          tmp960.Append(')');
          return tmp960.ToString();
        }
      }


      public partial class GetPrimaryKeys_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetPrimaryKeysReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetPrimaryKeysReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.@req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @req;
        }

        public GetPrimaryKeys_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TGetPrimaryKeysReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp962 = new TStruct("GetPrimaryKeys_args");
            await oprot.WriteStructBeginAsync(tmp962, cancellationToken);
            var tmp963 = new TField();
            if((Req != null) && __isset.@req)
            {
              tmp963.Name = "req";
              tmp963.Type = TType.Struct;
              tmp963.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp963, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetPrimaryKeys_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.@req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp964 = new StringBuilder("GetPrimaryKeys_args(");
          int tmp965 = 0;
          if((Req != null) && __isset.@req)
          {
            if(0 < tmp965++) { tmp964.Append(", "); }
            tmp964.Append("Req: ");
            Req.ToString(tmp964);
          }
          tmp964.Append(')');
          return tmp964.ToString();
        }
      }


      public partial class GetPrimaryKeys_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetPrimaryKeysResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetPrimaryKeysResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
        }

        public GetPrimaryKeys_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TGetPrimaryKeysResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp966 = new TStruct("GetPrimaryKeys_result");
            await oprot.WriteStructBeginAsync(tmp966, cancellationToken);
            var tmp967 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp967.Name = "Success";
                tmp967.Type = TType.Struct;
                tmp967.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp967, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetPrimaryKeys_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp968 = new StringBuilder("GetPrimaryKeys_result(");
          int tmp969 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp969++) { tmp968.Append(", "); }
            tmp968.Append("Success: ");
            Success.ToString(tmp968);
          }
          tmp968.Append(')');
          return tmp968.ToString();
        }
      }


      public partial class GetCrossReference_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetCrossReferenceReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetCrossReferenceReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.@req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @req;
        }

        public GetCrossReference_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TGetCrossReferenceReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp970 = new TStruct("GetCrossReference_args");
            await oprot.WriteStructBeginAsync(tmp970, cancellationToken);
            var tmp971 = new TField();
            if((Req != null) && __isset.@req)
            {
              tmp971.Name = "req";
              tmp971.Type = TType.Struct;
              tmp971.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp971, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetCrossReference_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.@req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp972 = new StringBuilder("GetCrossReference_args(");
          int tmp973 = 0;
          if((Req != null) && __isset.@req)
          {
            if(0 < tmp973++) { tmp972.Append(", "); }
            tmp972.Append("Req: ");
            Req.ToString(tmp972);
          }
          tmp972.Append(')');
          return tmp972.ToString();
        }
      }


      public partial class GetCrossReference_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetCrossReferenceResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetCrossReferenceResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
        }

        public GetCrossReference_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TGetCrossReferenceResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp974 = new TStruct("GetCrossReference_result");
            await oprot.WriteStructBeginAsync(tmp974, cancellationToken);
            var tmp975 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp975.Name = "Success";
                tmp975.Type = TType.Struct;
                tmp975.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp975, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetCrossReference_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp976 = new StringBuilder("GetCrossReference_result(");
          int tmp977 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp977++) { tmp976.Append(", "); }
            tmp976.Append("Success: ");
            Success.ToString(tmp976);
          }
          tmp976.Append(')');
          return tmp976.ToString();
        }
      }


      public partial class GetOperationStatus_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetOperationStatusReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetOperationStatusReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.@req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @req;
        }

        public GetOperationStatus_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TGetOperationStatusReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp978 = new TStruct("GetOperationStatus_args");
            await oprot.WriteStructBeginAsync(tmp978, cancellationToken);
            var tmp979 = new TField();
            if((Req != null) && __isset.@req)
            {
              tmp979.Name = "req";
              tmp979.Type = TType.Struct;
              tmp979.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp979, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetOperationStatus_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.@req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp980 = new StringBuilder("GetOperationStatus_args(");
          int tmp981 = 0;
          if((Req != null) && __isset.@req)
          {
            if(0 < tmp981++) { tmp980.Append(", "); }
            tmp980.Append("Req: ");
            Req.ToString(tmp980);
          }
          tmp980.Append(')');
          return tmp980.ToString();
        }
      }


      public partial class GetOperationStatus_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetOperationStatusResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetOperationStatusResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
        }

        public GetOperationStatus_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TGetOperationStatusResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp982 = new TStruct("GetOperationStatus_result");
            await oprot.WriteStructBeginAsync(tmp982, cancellationToken);
            var tmp983 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp983.Name = "Success";
                tmp983.Type = TType.Struct;
                tmp983.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp983, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetOperationStatus_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp984 = new StringBuilder("GetOperationStatus_result(");
          int tmp985 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp985++) { tmp984.Append(", "); }
            tmp984.Append("Success: ");
            Success.ToString(tmp984);
          }
          tmp984.Append(')');
          return tmp984.ToString();
        }
      }


      public partial class CancelOperation_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TCancelOperationReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TCancelOperationReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.@req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @req;
        }

        public CancelOperation_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TCancelOperationReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp986 = new TStruct("CancelOperation_args");
            await oprot.WriteStructBeginAsync(tmp986, cancellationToken);
            var tmp987 = new TField();
            if((Req != null) && __isset.@req)
            {
              tmp987.Name = "req";
              tmp987.Type = TType.Struct;
              tmp987.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp987, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is CancelOperation_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.@req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp988 = new StringBuilder("CancelOperation_args(");
          int tmp989 = 0;
          if((Req != null) && __isset.@req)
          {
            if(0 < tmp989++) { tmp988.Append(", "); }
            tmp988.Append("Req: ");
            Req.ToString(tmp988);
          }
          tmp988.Append(')');
          return tmp988.ToString();
        }
      }


      public partial class CancelOperation_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TCancelOperationResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TCancelOperationResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
        }

        public CancelOperation_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TCancelOperationResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp990 = new TStruct("CancelOperation_result");
            await oprot.WriteStructBeginAsync(tmp990, cancellationToken);
            var tmp991 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp991.Name = "Success";
                tmp991.Type = TType.Struct;
                tmp991.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp991, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is CancelOperation_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp992 = new StringBuilder("CancelOperation_result(");
          int tmp993 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp993++) { tmp992.Append(", "); }
            tmp992.Append("Success: ");
            Success.ToString(tmp992);
          }
          tmp992.Append(')');
          return tmp992.ToString();
        }
      }


      public partial class CloseOperation_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TCloseOperationReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TCloseOperationReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.@req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @req;
        }

        public CloseOperation_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TCloseOperationReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp994 = new TStruct("CloseOperation_args");
            await oprot.WriteStructBeginAsync(tmp994, cancellationToken);
            var tmp995 = new TField();
            if((Req != null) && __isset.@req)
            {
              tmp995.Name = "req";
              tmp995.Type = TType.Struct;
              tmp995.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp995, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is CloseOperation_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.@req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp996 = new StringBuilder("CloseOperation_args(");
          int tmp997 = 0;
          if((Req != null) && __isset.@req)
          {
            if(0 < tmp997++) { tmp996.Append(", "); }
            tmp996.Append("Req: ");
            Req.ToString(tmp996);
          }
          tmp996.Append(')');
          return tmp996.ToString();
        }
      }


      public partial class CloseOperation_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TCloseOperationResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TCloseOperationResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
        }

        public CloseOperation_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TCloseOperationResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp998 = new TStruct("CloseOperation_result");
            await oprot.WriteStructBeginAsync(tmp998, cancellationToken);
            var tmp999 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp999.Name = "Success";
                tmp999.Type = TType.Struct;
                tmp999.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp999, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is CloseOperation_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1000 = new StringBuilder("CloseOperation_result(");
          int tmp1001 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp1001++) { tmp1000.Append(", "); }
            tmp1000.Append("Success: ");
            Success.ToString(tmp1000);
          }
          tmp1000.Append(')');
          return tmp1000.ToString();
        }
      }


      public partial class GetResultSetMetadata_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetResultSetMetadataReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetResultSetMetadataReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.@req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @req;
        }

        public GetResultSetMetadata_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TGetResultSetMetadataReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1002 = new TStruct("GetResultSetMetadata_args");
            await oprot.WriteStructBeginAsync(tmp1002, cancellationToken);
            var tmp1003 = new TField();
            if((Req != null) && __isset.@req)
            {
              tmp1003.Name = "req";
              tmp1003.Type = TType.Struct;
              tmp1003.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1003, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetResultSetMetadata_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.@req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1004 = new StringBuilder("GetResultSetMetadata_args(");
          int tmp1005 = 0;
          if((Req != null) && __isset.@req)
          {
            if(0 < tmp1005++) { tmp1004.Append(", "); }
            tmp1004.Append("Req: ");
            Req.ToString(tmp1004);
          }
          tmp1004.Append(')');
          return tmp1004.ToString();
        }
      }


      public partial class GetResultSetMetadata_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetResultSetMetadataResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetResultSetMetadataResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
        }

        public GetResultSetMetadata_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TGetResultSetMetadataResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1006 = new TStruct("GetResultSetMetadata_result");
            await oprot.WriteStructBeginAsync(tmp1006, cancellationToken);
            var tmp1007 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp1007.Name = "Success";
                tmp1007.Type = TType.Struct;
                tmp1007.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1007, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetResultSetMetadata_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1008 = new StringBuilder("GetResultSetMetadata_result(");
          int tmp1009 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp1009++) { tmp1008.Append(", "); }
            tmp1008.Append("Success: ");
            Success.ToString(tmp1008);
          }
          tmp1008.Append(')');
          return tmp1008.ToString();
        }
      }


      public partial class FetchResults_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TFetchResultsReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TFetchResultsReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.@req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @req;
        }

        public FetchResults_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TFetchResultsReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1010 = new TStruct("FetchResults_args");
            await oprot.WriteStructBeginAsync(tmp1010, cancellationToken);
            var tmp1011 = new TField();
            if((Req != null) && __isset.@req)
            {
              tmp1011.Name = "req";
              tmp1011.Type = TType.Struct;
              tmp1011.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1011, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is FetchResults_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.@req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1012 = new StringBuilder("FetchResults_args(");
          int tmp1013 = 0;
          if((Req != null) && __isset.@req)
          {
            if(0 < tmp1013++) { tmp1012.Append(", "); }
            tmp1012.Append("Req: ");
            Req.ToString(tmp1012);
          }
          tmp1012.Append(')');
          return tmp1012.ToString();
        }
      }


      public partial class FetchResults_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TFetchResultsResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TFetchResultsResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
        }

        public FetchResults_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TFetchResultsResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1014 = new TStruct("FetchResults_result");
            await oprot.WriteStructBeginAsync(tmp1014, cancellationToken);
            var tmp1015 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp1015.Name = "Success";
                tmp1015.Type = TType.Struct;
                tmp1015.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1015, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is FetchResults_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1016 = new StringBuilder("FetchResults_result(");
          int tmp1017 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp1017++) { tmp1016.Append(", "); }
            tmp1016.Append("Success: ");
            Success.ToString(tmp1016);
          }
          tmp1016.Append(')');
          return tmp1016.ToString();
        }
      }


      public partial class GetDelegationToken_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetDelegationTokenReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetDelegationTokenReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.@req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @req;
        }

        public GetDelegationToken_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TGetDelegationTokenReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1018 = new TStruct("GetDelegationToken_args");
            await oprot.WriteStructBeginAsync(tmp1018, cancellationToken);
            var tmp1019 = new TField();
            if((Req != null) && __isset.@req)
            {
              tmp1019.Name = "req";
              tmp1019.Type = TType.Struct;
              tmp1019.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1019, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetDelegationToken_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.@req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1020 = new StringBuilder("GetDelegationToken_args(");
          int tmp1021 = 0;
          if((Req != null) && __isset.@req)
          {
            if(0 < tmp1021++) { tmp1020.Append(", "); }
            tmp1020.Append("Req: ");
            Req.ToString(tmp1020);
          }
          tmp1020.Append(')');
          return tmp1020.ToString();
        }
      }


      public partial class GetDelegationToken_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetDelegationTokenResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetDelegationTokenResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
        }

        public GetDelegationToken_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TGetDelegationTokenResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1022 = new TStruct("GetDelegationToken_result");
            await oprot.WriteStructBeginAsync(tmp1022, cancellationToken);
            var tmp1023 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp1023.Name = "Success";
                tmp1023.Type = TType.Struct;
                tmp1023.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1023, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetDelegationToken_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1024 = new StringBuilder("GetDelegationToken_result(");
          int tmp1025 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp1025++) { tmp1024.Append(", "); }
            tmp1024.Append("Success: ");
            Success.ToString(tmp1024);
          }
          tmp1024.Append(')');
          return tmp1024.ToString();
        }
      }


      public partial class CancelDelegationToken_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TCancelDelegationTokenReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TCancelDelegationTokenReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.@req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @req;
        }

        public CancelDelegationToken_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TCancelDelegationTokenReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1026 = new TStruct("CancelDelegationToken_args");
            await oprot.WriteStructBeginAsync(tmp1026, cancellationToken);
            var tmp1027 = new TField();
            if((Req != null) && __isset.@req)
            {
              tmp1027.Name = "req";
              tmp1027.Type = TType.Struct;
              tmp1027.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1027, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is CancelDelegationToken_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.@req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1028 = new StringBuilder("CancelDelegationToken_args(");
          int tmp1029 = 0;
          if((Req != null) && __isset.@req)
          {
            if(0 < tmp1029++) { tmp1028.Append(", "); }
            tmp1028.Append("Req: ");
            Req.ToString(tmp1028);
          }
          tmp1028.Append(')');
          return tmp1028.ToString();
        }
      }


      public partial class CancelDelegationToken_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TCancelDelegationTokenResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TCancelDelegationTokenResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
        }

        public CancelDelegationToken_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TCancelDelegationTokenResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1030 = new TStruct("CancelDelegationToken_result");
            await oprot.WriteStructBeginAsync(tmp1030, cancellationToken);
            var tmp1031 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp1031.Name = "Success";
                tmp1031.Type = TType.Struct;
                tmp1031.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1031, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is CancelDelegationToken_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1032 = new StringBuilder("CancelDelegationToken_result(");
          int tmp1033 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp1033++) { tmp1032.Append(", "); }
            tmp1032.Append("Success: ");
            Success.ToString(tmp1032);
          }
          tmp1032.Append(')');
          return tmp1032.ToString();
        }
      }


      public partial class RenewDelegationToken_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TRenewDelegationTokenReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TRenewDelegationTokenReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.@req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @req;
        }

        public RenewDelegationToken_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TRenewDelegationTokenReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1034 = new TStruct("RenewDelegationToken_args");
            await oprot.WriteStructBeginAsync(tmp1034, cancellationToken);
            var tmp1035 = new TField();
            if((Req != null) && __isset.@req)
            {
              tmp1035.Name = "req";
              tmp1035.Type = TType.Struct;
              tmp1035.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1035, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is RenewDelegationToken_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.@req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1036 = new StringBuilder("RenewDelegationToken_args(");
          int tmp1037 = 0;
          if((Req != null) && __isset.@req)
          {
            if(0 < tmp1037++) { tmp1036.Append(", "); }
            tmp1036.Append("Req: ");
            Req.ToString(tmp1036);
          }
          tmp1036.Append(')');
          return tmp1036.ToString();
        }
      }


      public partial class RenewDelegationToken_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TRenewDelegationTokenResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TRenewDelegationTokenResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
        }

        public RenewDelegationToken_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TRenewDelegationTokenResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1038 = new TStruct("RenewDelegationToken_result");
            await oprot.WriteStructBeginAsync(tmp1038, cancellationToken);
            var tmp1039 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp1039.Name = "Success";
                tmp1039.Type = TType.Struct;
                tmp1039.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1039, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is RenewDelegationToken_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1040 = new StringBuilder("RenewDelegationToken_result(");
          int tmp1041 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp1041++) { tmp1040.Append(", "); }
            tmp1040.Append("Success: ");
            Success.ToString(tmp1040);
          }
          tmp1040.Append(')');
          return tmp1040.ToString();
        }
      }


      public partial class GetQueryId_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetQueryIdReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetQueryIdReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.@req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @req;
        }

        public GetQueryId_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TGetQueryIdReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1042 = new TStruct("GetQueryId_args");
            await oprot.WriteStructBeginAsync(tmp1042, cancellationToken);
            var tmp1043 = new TField();
            if((Req != null) && __isset.@req)
            {
              tmp1043.Name = "req";
              tmp1043.Type = TType.Struct;
              tmp1043.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1043, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetQueryId_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.@req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1044 = new StringBuilder("GetQueryId_args(");
          int tmp1045 = 0;
          if((Req != null) && __isset.@req)
          {
            if(0 < tmp1045++) { tmp1044.Append(", "); }
            tmp1044.Append("Req: ");
            Req.ToString(tmp1044);
          }
          tmp1044.Append(')');
          return tmp1044.ToString();
        }
      }


      public partial class GetQueryId_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TGetQueryIdResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TGetQueryIdResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
        }

        public GetQueryId_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TGetQueryIdResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1046 = new TStruct("GetQueryId_result");
            await oprot.WriteStructBeginAsync(tmp1046, cancellationToken);
            var tmp1047 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp1047.Name = "Success";
                tmp1047.Type = TType.Struct;
                tmp1047.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1047, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is GetQueryId_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1048 = new StringBuilder("GetQueryId_result(");
          int tmp1049 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp1049++) { tmp1048.Append(", "); }
            tmp1048.Append("Success: ");
            Success.ToString(tmp1048);
          }
          tmp1048.Append(')');
          return tmp1048.ToString();
        }
      }


      public partial class SetClientInfo_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TSetClientInfoReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TSetClientInfoReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.@req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @req;
        }

        public SetClientInfo_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TSetClientInfoReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1050 = new TStruct("SetClientInfo_args");
            await oprot.WriteStructBeginAsync(tmp1050, cancellationToken);
            var tmp1051 = new TField();
            if((Req != null) && __isset.@req)
            {
              tmp1051.Name = "req";
              tmp1051.Type = TType.Struct;
              tmp1051.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1051, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is SetClientInfo_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.@req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1052 = new StringBuilder("SetClientInfo_args(");
          int tmp1053 = 0;
          if((Req != null) && __isset.@req)
          {
            if(0 < tmp1053++) { tmp1052.Append(", "); }
            tmp1052.Append("Req: ");
            Req.ToString(tmp1052);
          }
          tmp1052.Append(')');
          return tmp1052.ToString();
        }
      }


      public partial class SetClientInfo_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TSetClientInfoResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TSetClientInfoResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
        }

        public SetClientInfo_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TSetClientInfoResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1054 = new TStruct("SetClientInfo_result");
            await oprot.WriteStructBeginAsync(tmp1054, cancellationToken);
            var tmp1055 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp1055.Name = "Success";
                tmp1055.Type = TType.Struct;
                tmp1055.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1055, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is SetClientInfo_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1056 = new StringBuilder("SetClientInfo_result(");
          int tmp1057 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp1057++) { tmp1056.Append(", "); }
            tmp1056.Append("Success: ");
            Success.ToString(tmp1056);
          }
          tmp1056.Append(')');
          return tmp1056.ToString();
        }
      }


      public partial class UploadData_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TUploadDataReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TUploadDataReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.@req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @req;
        }

        public UploadData_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TUploadDataReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1058 = new TStruct("UploadData_args");
            await oprot.WriteStructBeginAsync(tmp1058, cancellationToken);
            var tmp1059 = new TField();
            if((Req != null) && __isset.@req)
            {
              tmp1059.Name = "req";
              tmp1059.Type = TType.Struct;
              tmp1059.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1059, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is UploadData_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.@req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1060 = new StringBuilder("UploadData_args(");
          int tmp1061 = 0;
          if((Req != null) && __isset.@req)
          {
            if(0 < tmp1061++) { tmp1060.Append(", "); }
            tmp1060.Append("Req: ");
            Req.ToString(tmp1060);
          }
          tmp1060.Append(')');
          return tmp1060.ToString();
        }
      }


      public partial class UploadData_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TUploadDataResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TUploadDataResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
        }

        public UploadData_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TUploadDataResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1062 = new TStruct("UploadData_result");
            await oprot.WriteStructBeginAsync(tmp1062, cancellationToken);
            var tmp1063 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp1063.Name = "Success";
                tmp1063.Type = TType.Struct;
                tmp1063.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1063, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is UploadData_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1064 = new StringBuilder("UploadData_result(");
          int tmp1065 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp1065++) { tmp1064.Append(", "); }
            tmp1064.Append("Success: ");
            Success.ToString(tmp1064);
          }
          tmp1064.Append(')');
          return tmp1064.ToString();
        }
      }


      public partial class DownloadData_args : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TDownloadDataReq _req;

        public global::Apache.Hive.Service.Rpc.Thrift.TDownloadDataReq Req
        {
          get
          {
            return _req;
          }
          set
          {
            __isset.@req = true;
            this._req = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @req;
        }

        public DownloadData_args()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.Struct)
                  {
                    Req = new global::Apache.Hive.Service.Rpc.Thrift.TDownloadDataReq();
                    await Req.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1066 = new TStruct("DownloadData_args");
            await oprot.WriteStructBeginAsync(tmp1066, cancellationToken);
            var tmp1067 = new TField();
            if((Req != null) && __isset.@req)
            {
              tmp1067.Name = "req";
              tmp1067.Type = TType.Struct;
              tmp1067.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1067, cancellationToken);
              await Req.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is DownloadData_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@req == other.__isset.@req) && ((!__isset.@req) || (global::System.Object.Equals(Req, other.Req))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Req != null) && __isset.@req)
            {
              hashcode = (hashcode * 397) + Req.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1068 = new StringBuilder("DownloadData_args(");
          int tmp1069 = 0;
          if((Req != null) && __isset.@req)
          {
            if(0 < tmp1069++) { tmp1068.Append(", "); }
            tmp1068.Append("Req: ");
            Req.ToString(tmp1068);
          }
          tmp1068.Append(')');
          return tmp1068.ToString();
        }
      }


      public partial class DownloadData_result : TBase
      {
        private global::Apache.Hive.Service.Rpc.Thrift.TDownloadDataResp _success;

        public global::Apache.Hive.Service.Rpc.Thrift.TDownloadDataResp Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
        }

        public DownloadData_result()
        {
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Struct)
                  {
                    Success = new global::Apache.Hive.Service.Rpc.Thrift.TDownloadDataResp();
                    await Success.ReadAsync(iprot, cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default:
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp1070 = new TStruct("DownloadData_result");
            await oprot.WriteStructBeginAsync(tmp1070, cancellationToken);
            var tmp1071 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp1071.Name = "Success";
                tmp1071.Type = TType.Struct;
                tmp1071.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp1071, cancellationToken);
                await Success.WriteAsync(oprot, cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is DownloadData_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp1072 = new StringBuilder("DownloadData_result(");
          int tmp1073 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp1073++) { tmp1072.Append(", "); }
            tmp1072.Append("Success: ");
            Success.ToString(tmp1072);
          }
          tmp1072.Append(')');
          return tmp1072.ToString();
        }
      }

    }

  }
}

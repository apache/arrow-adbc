/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Apache.Hive.Service.Rpc.Thrift
{

  public partial class TOpenSessionReq : TBase
  {
    private string _username;
    private string _password;
    private Dictionary<string, string> _configuration;
    private List<int> _getInfos;
    private long _client_protocol_i64;
    private Dictionary<string, string> _connectionProperties;
    private global::Apache.Hive.Service.Rpc.Thrift.TNamespace _initialNamespace;
    private bool _canUseMultipleCatalogs;
    private global::Apache.Hive.Service.Rpc.Thrift.THandleIdentifier _sessionId;

    /// <summary>
    ///
    /// <seealso cref="global::Apache.Hive.Service.Rpc.Thrift.TProtocolVersion"/>
    /// </summary>
    public global::Apache.Hive.Service.Rpc.Thrift.TProtocolVersion Client_protocol { get; set; }

    public string Username
    {
      get
      {
        return _username;
      }
      set
      {
        __isset.username = true;
        this._username = value;
      }
    }

    public string Password
    {
      get
      {
        return _password;
      }
      set
      {
        __isset.password = true;
        this._password = value;
      }
    }

    public Dictionary<string, string> Configuration
    {
      get
      {
        return _configuration;
      }
      set
      {
        __isset.configuration = true;
        this._configuration = value;
      }
    }

    public List<int> GetInfos
    {
      get
      {
        return _getInfos;
      }
      set
      {
        __isset.getInfos = true;
        this._getInfos = value;
      }
    }

    public long Client_protocol_i64
    {
      get
      {
        return _client_protocol_i64;
      }
      set
      {
        __isset.client_protocol_i64 = true;
        this._client_protocol_i64 = value;
      }
    }

    public Dictionary<string, string> ConnectionProperties
    {
      get
      {
        return _connectionProperties;
      }
      set
      {
        __isset.connectionProperties = true;
        this._connectionProperties = value;
      }
    }

    public global::Apache.Hive.Service.Rpc.Thrift.TNamespace InitialNamespace
    {
      get
      {
        return _initialNamespace;
      }
      set
      {
        __isset.initialNamespace = true;
        this._initialNamespace = value;
      }
    }

    public bool CanUseMultipleCatalogs
    {
      get
      {
        return _canUseMultipleCatalogs;
      }
      set
      {
        __isset.canUseMultipleCatalogs = true;
        this._canUseMultipleCatalogs = value;
      }
    }

    public global::Apache.Hive.Service.Rpc.Thrift.THandleIdentifier SessionId
    {
      get
      {
        return _sessionId;
      }
      set
      {
        __isset.sessionId = true;
        this._sessionId = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool username;
      public bool password;
      public bool configuration;
      public bool getInfos;
      public bool client_protocol_i64;
      public bool connectionProperties;
      public bool initialNamespace;
      public bool canUseMultipleCatalogs;
      public bool sessionId;
    }

    public TOpenSessionReq()
    {
      this.Client_protocol = global::Apache.Hive.Service.Rpc.Thrift.TProtocolVersion.HIVE_CLI_SERVICE_PROTOCOL_V10;
    }

    public TOpenSessionReq(global::Apache.Hive.Service.Rpc.Thrift.TProtocolVersion client_protocol) : this()
    {
      this.Client_protocol = client_protocol;
    }

    public TOpenSessionReq DeepCopy()
    {
      var tmp279 = new TOpenSessionReq();
      tmp279.Client_protocol = this.Client_protocol;
      if ((Username != null) && __isset.username)
      {
        tmp279.Username = this.Username;
      }
      tmp279.__isset.username = this.__isset.username;
      if ((Password != null) && __isset.password)
      {
        tmp279.Password = this.Password;
      }
      tmp279.__isset.password = this.__isset.password;
      if ((Configuration != null) && __isset.configuration)
      {
        tmp279.Configuration = this.Configuration.DeepCopy();
      }
      tmp279.__isset.configuration = this.__isset.configuration;
      if ((GetInfos != null) && __isset.getInfos)
      {
        tmp279.GetInfos = this.GetInfos.DeepCopy();
      }
      tmp279.__isset.getInfos = this.__isset.getInfos;
      if (__isset.client_protocol_i64)
      {
        tmp279.Client_protocol_i64 = this.Client_protocol_i64;
      }
      tmp279.__isset.client_protocol_i64 = this.__isset.client_protocol_i64;
      if ((ConnectionProperties != null) && __isset.connectionProperties)
      {
        tmp279.ConnectionProperties = this.ConnectionProperties.DeepCopy();
      }
      tmp279.__isset.connectionProperties = this.__isset.connectionProperties;
      if ((InitialNamespace != null) && __isset.initialNamespace)
      {
        tmp279.InitialNamespace = (global::Apache.Hive.Service.Rpc.Thrift.TNamespace)this.InitialNamespace.DeepCopy();
      }
      tmp279.__isset.initialNamespace = this.__isset.initialNamespace;
      if (__isset.canUseMultipleCatalogs)
      {
        tmp279.CanUseMultipleCatalogs = this.CanUseMultipleCatalogs;
      }
      tmp279.__isset.canUseMultipleCatalogs = this.__isset.canUseMultipleCatalogs;
      if ((SessionId != null) && __isset.sessionId)
      {
        tmp279.SessionId = (global::Apache.Hive.Service.Rpc.Thrift.THandleIdentifier)this.SessionId.DeepCopy();
      }
      tmp279.__isset.sessionId = this.__isset.sessionId;
      return tmp279;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_client_protocol = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Client_protocol = (global::Apache.Hive.Service.Rpc.Thrift.TProtocolVersion)await iprot.ReadI32Async(cancellationToken);
                isset_client_protocol = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                Username = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                Password = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Map)
              {
                {
                  var _map280 = await iprot.ReadMapBeginAsync(cancellationToken);
                  Configuration = new Dictionary<string, string>(_map280.Count);
                  for(int _i281 = 0; _i281 < _map280.Count; ++_i281)
                  {
                    string _key282;
                    string _val283;
                    _key282 = await iprot.ReadStringAsync(cancellationToken);
                    _val283 = await iprot.ReadStringAsync(cancellationToken);
                    Configuration[_key282] = _val283;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1281:
              if (field.Type == TType.List)
              {
                {
                  var _list284 = await iprot.ReadListBeginAsync(cancellationToken);
                  GetInfos = new List<int>(_list284.Count);
                  for(int _i285 = 0; _i285 < _list284.Count; ++_i285)
                  {
                    int _elem286;
                    _elem286 = await iprot.ReadI32Async(cancellationToken);
                    GetInfos.Add(_elem286);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1282:
              if (field.Type == TType.I64)
              {
                Client_protocol_i64 = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1283:
              if (field.Type == TType.Map)
              {
                {
                  var _map287 = await iprot.ReadMapBeginAsync(cancellationToken);
                  ConnectionProperties = new Dictionary<string, string>(_map287.Count);
                  for(int _i288 = 0; _i288 < _map287.Count; ++_i288)
                  {
                    string _key289;
                    string _val290;
                    _key289 = await iprot.ReadStringAsync(cancellationToken);
                    _val290 = await iprot.ReadStringAsync(cancellationToken);
                    ConnectionProperties[_key289] = _val290;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1284:
              if (field.Type == TType.Struct)
              {
                InitialNamespace = new global::Apache.Hive.Service.Rpc.Thrift.TNamespace();
                await InitialNamespace.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 1285:
              if (field.Type == TType.Bool)
              {
                CanUseMultipleCatalogs = await iprot.ReadBoolAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3329:
              if (field.Type == TType.Struct)
              {
                SessionId = new global::Apache.Hive.Service.Rpc.Thrift.THandleIdentifier();
                await SessionId.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default:
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_client_protocol)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp291 = new TStruct("TOpenSessionReq");
        await oprot.WriteStructBeginAsync(tmp291, cancellationToken);
        var tmp292 = new TField();
        tmp292.Name = "client_protocol";
        tmp292.Type = TType.I32;
        tmp292.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp292, cancellationToken);
        await oprot.WriteI32Async((int)Client_protocol, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if ((Username != null) && __isset.username)
        {
          tmp292.Name = "username";
          tmp292.Type = TType.String;
          tmp292.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp292, cancellationToken);
          await oprot.WriteStringAsync(Username, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if ((Password != null) && __isset.password)
        {
          tmp292.Name = "password";
          tmp292.Type = TType.String;
          tmp292.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp292, cancellationToken);
          await oprot.WriteStringAsync(Password, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if ((Configuration != null) && __isset.configuration)
        {
          tmp292.Name = "configuration";
          tmp292.Type = TType.Map;
          tmp292.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp292, cancellationToken);
          await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, Configuration.Count), cancellationToken);
          foreach (string _iter293 in Configuration.Keys)
          {
            await oprot.WriteStringAsync(_iter293, cancellationToken);
            await oprot.WriteStringAsync(Configuration[_iter293], cancellationToken);
          }
          await oprot.WriteMapEndAsync(cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if ((GetInfos != null) && __isset.getInfos)
        {
          tmp292.Name = "getInfos";
          tmp292.Type = TType.List;
          tmp292.ID = 1281;
          await oprot.WriteFieldBeginAsync(tmp292, cancellationToken);
          await oprot.WriteListBeginAsync(new TList(TType.I32, GetInfos.Count), cancellationToken);
          foreach (int _iter294 in GetInfos)
          {
            await oprot.WriteI32Async(_iter294, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.client_protocol_i64)
        {
          tmp292.Name = "client_protocol_i64";
          tmp292.Type = TType.I64;
          tmp292.ID = 1282;
          await oprot.WriteFieldBeginAsync(tmp292, cancellationToken);
          await oprot.WriteI64Async(Client_protocol_i64, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if ((ConnectionProperties != null) && __isset.connectionProperties)
        {
          tmp292.Name = "connectionProperties";
          tmp292.Type = TType.Map;
          tmp292.ID = 1283;
          await oprot.WriteFieldBeginAsync(tmp292, cancellationToken);
          await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, ConnectionProperties.Count), cancellationToken);
          foreach (string _iter295 in ConnectionProperties.Keys)
          {
            await oprot.WriteStringAsync(_iter295, cancellationToken);
            await oprot.WriteStringAsync(ConnectionProperties[_iter295], cancellationToken);
          }
          await oprot.WriteMapEndAsync(cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if ((InitialNamespace != null) && __isset.initialNamespace)
        {
          tmp292.Name = "initialNamespace";
          tmp292.Type = TType.Struct;
          tmp292.ID = 1284;
          await oprot.WriteFieldBeginAsync(tmp292, cancellationToken);
          await InitialNamespace.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.canUseMultipleCatalogs)
        {
          tmp292.Name = "canUseMultipleCatalogs";
          tmp292.Type = TType.Bool;
          tmp292.ID = 1285;
          await oprot.WriteFieldBeginAsync(tmp292, cancellationToken);
          await oprot.WriteBoolAsync(CanUseMultipleCatalogs, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if ((SessionId != null) && __isset.sessionId)
        {
          tmp292.Name = "sessionId";
          tmp292.Type = TType.Struct;
          tmp292.ID = 3329;
          await oprot.WriteFieldBeginAsync(tmp292, cancellationToken);
          await SessionId.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is TOpenSessionReq other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return global::System.Object.Equals(Client_protocol, other.Client_protocol)
        && ((__isset.username == other.__isset.username) && ((!__isset.username) || (global::System.Object.Equals(Username, other.Username))))
        && ((__isset.password == other.__isset.password) && ((!__isset.password) || (global::System.Object.Equals(Password, other.Password))))
        && ((__isset.configuration == other.__isset.configuration) && ((!__isset.configuration) || (TCollections.Equals(Configuration, other.Configuration))))
        && ((__isset.getInfos == other.__isset.getInfos) && ((!__isset.getInfos) || (TCollections.Equals(GetInfos, other.GetInfos))))
        && ((__isset.client_protocol_i64 == other.__isset.client_protocol_i64) && ((!__isset.client_protocol_i64) || (global::System.Object.Equals(Client_protocol_i64, other.Client_protocol_i64))))
        && ((__isset.connectionProperties == other.__isset.connectionProperties) && ((!__isset.connectionProperties) || (TCollections.Equals(ConnectionProperties, other.ConnectionProperties))))
        && ((__isset.initialNamespace == other.__isset.initialNamespace) && ((!__isset.initialNamespace) || (global::System.Object.Equals(InitialNamespace, other.InitialNamespace))))
        && ((__isset.canUseMultipleCatalogs == other.__isset.canUseMultipleCatalogs) && ((!__isset.canUseMultipleCatalogs) || (global::System.Object.Equals(CanUseMultipleCatalogs, other.CanUseMultipleCatalogs))))
        && ((__isset.sessionId == other.__isset.sessionId) && ((!__isset.sessionId) || (global::System.Object.Equals(SessionId, other.SessionId))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        hashcode = (hashcode * 397) + Client_protocol.GetHashCode();
        if ((Username != null) && __isset.username)
        {
          hashcode = (hashcode * 397) + Username.GetHashCode();
        }
        if ((Password != null) && __isset.password)
        {
          hashcode = (hashcode * 397) + Password.GetHashCode();
        }
        if ((Configuration != null) && __isset.configuration)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Configuration);
        }
        if ((GetInfos != null) && __isset.getInfos)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(GetInfos);
        }
        if (__isset.client_protocol_i64)
        {
          hashcode = (hashcode * 397) + Client_protocol_i64.GetHashCode();
        }
        if ((ConnectionProperties != null) && __isset.connectionProperties)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(ConnectionProperties);
        }
        if ((InitialNamespace != null) && __isset.initialNamespace)
        {
          hashcode = (hashcode * 397) + InitialNamespace.GetHashCode();
        }
        if (__isset.canUseMultipleCatalogs)
        {
          hashcode = (hashcode * 397) + CanUseMultipleCatalogs.GetHashCode();
        }
        if ((SessionId != null) && __isset.sessionId)
        {
          hashcode = (hashcode * 397) + SessionId.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp296 = new StringBuilder("TOpenSessionReq(");
      tmp296.Append(", Client_protocol: ");
      Client_protocol.ToString(tmp296);
      if ((Username != null) && __isset.username)
      {
        tmp296.Append(", Username: ");
        Username.ToString(tmp296);
      }
      if ((Password != null) && __isset.password)
      {
        tmp296.Append(", Password: ");
        Password.ToString(tmp296);
      }
      if ((Configuration != null) && __isset.configuration)
      {
        tmp296.Append(", Configuration: ");
        Configuration.ToString(tmp296);
      }
      if ((GetInfos != null) && __isset.getInfos)
      {
        tmp296.Append(", GetInfos: ");
        GetInfos.ToString(tmp296);
      }
      if (__isset.client_protocol_i64)
      {
        tmp296.Append(", Client_protocol_i64: ");
        Client_protocol_i64.ToString(tmp296);
      }
      if ((ConnectionProperties != null) && __isset.connectionProperties)
      {
        tmp296.Append(", ConnectionProperties: ");
        ConnectionProperties.ToString(tmp296);
      }
      if ((InitialNamespace != null) && __isset.initialNamespace)
      {
        tmp296.Append(", InitialNamespace: ");
        InitialNamespace.ToString(tmp296);
      }
      if (__isset.canUseMultipleCatalogs)
      {
        tmp296.Append(", CanUseMultipleCatalogs: ");
        CanUseMultipleCatalogs.ToString(tmp296);
      }
      if ((SessionId != null) && __isset.sessionId)
      {
        tmp296.Append(", SessionId: ");
        SessionId.ToString(tmp296);
      }
      tmp296.Append(')');
      return tmp296.ToString();
    }
  }

}

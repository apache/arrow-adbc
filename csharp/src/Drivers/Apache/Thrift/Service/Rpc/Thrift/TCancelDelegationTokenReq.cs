/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Apache.Hive.Service.Rpc.Thrift
{

  public partial class TCancelDelegationTokenReq : TBase
  {

    public global::Apache.Hive.Service.Rpc.Thrift.TSessionHandle SessionHandle { get; set; }

    public string DelegationToken { get; set; }

    public TCancelDelegationTokenReq()
    {
    }

    public TCancelDelegationTokenReq(global::Apache.Hive.Service.Rpc.Thrift.TSessionHandle sessionHandle, string delegationToken) : this()
    {
      this.SessionHandle = sessionHandle;
      this.DelegationToken = delegationToken;
    }

    public TCancelDelegationTokenReq DeepCopy()
    {
      var tmp608 = new TCancelDelegationTokenReq();
      if ((SessionHandle != null))
      {
        tmp608.SessionHandle = (global::Apache.Hive.Service.Rpc.Thrift.TSessionHandle)this.SessionHandle.DeepCopy();
      }
      if ((DelegationToken != null))
      {
        tmp608.DelegationToken = this.DelegationToken;
      }
      return tmp608;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_sessionHandle = false;
        bool isset_delegationToken = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct)
              {
                SessionHandle = new global::Apache.Hive.Service.Rpc.Thrift.TSessionHandle();
                await SessionHandle.ReadAsync(iprot, cancellationToken);
                isset_sessionHandle = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                DelegationToken = await iprot.ReadStringAsync(cancellationToken);
                isset_delegationToken = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default:
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_sessionHandle)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_delegationToken)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp609 = new TStruct("TCancelDelegationTokenReq");
        await oprot.WriteStructBeginAsync(tmp609, cancellationToken);
        var tmp610 = new TField();
        if ((SessionHandle != null))
        {
          tmp610.Name = "sessionHandle";
          tmp610.Type = TType.Struct;
          tmp610.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp610, cancellationToken);
          await SessionHandle.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if ((DelegationToken != null))
        {
          tmp610.Name = "delegationToken";
          tmp610.Type = TType.String;
          tmp610.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp610, cancellationToken);
          await oprot.WriteStringAsync(DelegationToken, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is TCancelDelegationTokenReq other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return global::System.Object.Equals(SessionHandle, other.SessionHandle)
        && global::System.Object.Equals(DelegationToken, other.DelegationToken);
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if ((SessionHandle != null))
        {
          hashcode = (hashcode * 397) + SessionHandle.GetHashCode();
        }
        if ((DelegationToken != null))
        {
          hashcode = (hashcode * 397) + DelegationToken.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp611 = new StringBuilder("TCancelDelegationTokenReq(");
      if ((SessionHandle != null))
      {
        tmp611.Append(", SessionHandle: ");
        SessionHandle.ToString(tmp611);
      }
      if ((DelegationToken != null))
      {
        tmp611.Append(", DelegationToken: ");
        DelegationToken.ToString(tmp611);
      }
      tmp611.Append(')');
      return tmp611.ToString();
    }
  }

}

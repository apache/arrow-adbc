/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.21.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


// targeting netstandard 2.x
#if(! NETSTANDARD2_0_OR_GREATER && ! NET6_0_OR_GREATER && ! NET472_OR_GREATER)
#error Unexpected target platform. See 'thrift --help' for details.
#endif

#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable CS0618   // silence our own deprecation warnings
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Apache.Hive.Service.Rpc.Thrift
{

  public partial class TDBSqlCloudResultFile : TBase
  {
    private string _filePath;
    private long _startRowOffset;
    private long _rowCount;
    private long _uncompressedBytes;
    private long _compressedBytes;
    private string _fileLink;
    private long _linkExpiryTime;
    private Dictionary<string, string> _httpHeaders;

    public string FilePath
    {
      get
      {
        return _filePath;
      }
      set
      {
        __isset.filePath = true;
        this._filePath = value;
      }
    }

    public long StartRowOffset
    {
      get
      {
        return _startRowOffset;
      }
      set
      {
        __isset.startRowOffset = true;
        this._startRowOffset = value;
      }
    }

    public long RowCount
    {
      get
      {
        return _rowCount;
      }
      set
      {
        __isset.rowCount = true;
        this._rowCount = value;
      }
    }

    public long UncompressedBytes
    {
      get
      {
        return _uncompressedBytes;
      }
      set
      {
        __isset.uncompressedBytes = true;
        this._uncompressedBytes = value;
      }
    }

    public long CompressedBytes
    {
      get
      {
        return _compressedBytes;
      }
      set
      {
        __isset.compressedBytes = true;
        this._compressedBytes = value;
      }
    }

    public string FileLink
    {
      get
      {
        return _fileLink;
      }
      set
      {
        __isset.fileLink = true;
        this._fileLink = value;
      }
    }

    public long LinkExpiryTime
    {
      get
      {
        return _linkExpiryTime;
      }
      set
      {
        __isset.linkExpiryTime = true;
        this._linkExpiryTime = value;
      }
    }

    public Dictionary<string, string> HttpHeaders
    {
      get
      {
        return _httpHeaders;
      }
      set
      {
        __isset.httpHeaders = true;
        this._httpHeaders = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool filePath;
      public bool startRowOffset;
      public bool rowCount;
      public bool uncompressedBytes;
      public bool compressedBytes;
      public bool fileLink;
      public bool linkExpiryTime;
      public bool httpHeaders;
    }

    public TDBSqlCloudResultFile()
    {
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                FilePath = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I64)
              {
                StartRowOffset = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I64)
              {
                RowCount = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I64)
              {
                UncompressedBytes = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.I64)
              {
                CompressedBytes = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 6:
              if (field.Type == TType.String)
              {
                FileLink = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 7:
              if (field.Type == TType.I64)
              {
                LinkExpiryTime = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 8:
              if (field.Type == TType.Map)
              {
                {
                  var _map208 = await iprot.ReadMapBeginAsync(cancellationToken);
                  HttpHeaders = new Dictionary<string, string>(_map208.Count);
                  for(int _i209 = 0; _i209 < _map208.Count; ++_i209)
                  {
                    string _key210;
                    string _val211;
                    _key210 = await iprot.ReadStringAsync(cancellationToken);
                    _val211 = await iprot.ReadStringAsync(cancellationToken);
                    HttpHeaders[_key210] = _val211;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default:
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp212 = new TStruct("TDBSqlCloudResultFile");
        await oprot.WriteStructBeginAsync(tmp212, cancellationToken);
        var tmp213 = new TField();
        if((FilePath != null) && __isset.filePath)
        {
          tmp213.Name = "filePath";
          tmp213.Type = TType.String;
          tmp213.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp213, cancellationToken);
          await oprot.WriteStringAsync(FilePath, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.startRowOffset)
        {
          tmp213.Name = "startRowOffset";
          tmp213.Type = TType.I64;
          tmp213.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp213, cancellationToken);
          await oprot.WriteI64Async(StartRowOffset, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.rowCount)
        {
          tmp213.Name = "rowCount";
          tmp213.Type = TType.I64;
          tmp213.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp213, cancellationToken);
          await oprot.WriteI64Async(RowCount, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.uncompressedBytes)
        {
          tmp213.Name = "uncompressedBytes";
          tmp213.Type = TType.I64;
          tmp213.ID = 4;
          await oprot.WriteFieldBeginAsync(tmp213, cancellationToken);
          await oprot.WriteI64Async(UncompressedBytes, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.compressedBytes)
        {
          tmp213.Name = "compressedBytes";
          tmp213.Type = TType.I64;
          tmp213.ID = 5;
          await oprot.WriteFieldBeginAsync(tmp213, cancellationToken);
          await oprot.WriteI64Async(CompressedBytes, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((FileLink != null) && __isset.fileLink)
        {
          tmp213.Name = "fileLink";
          tmp213.Type = TType.String;
          tmp213.ID = 6;
          await oprot.WriteFieldBeginAsync(tmp213, cancellationToken);
          await oprot.WriteStringAsync(FileLink, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.linkExpiryTime)
        {
          tmp213.Name = "linkExpiryTime";
          tmp213.Type = TType.I64;
          tmp213.ID = 7;
          await oprot.WriteFieldBeginAsync(tmp213, cancellationToken);
          await oprot.WriteI64Async(LinkExpiryTime, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((HttpHeaders != null) && __isset.httpHeaders)
        {
          tmp213.Name = "httpHeaders";
          tmp213.Type = TType.Map;
          tmp213.ID = 8;
          await oprot.WriteFieldBeginAsync(tmp213, cancellationToken);
          await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, HttpHeaders.Count), cancellationToken);
          foreach (string _iter214 in HttpHeaders.Keys)
          {
            await oprot.WriteStringAsync(_iter214, cancellationToken);
            await oprot.WriteStringAsync(HttpHeaders[_iter214], cancellationToken);
          }
          await oprot.WriteMapEndAsync(cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is TDBSqlCloudResultFile other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.filePath == other.__isset.filePath) && ((!__isset.filePath) || (global::System.Object.Equals(FilePath, other.FilePath))))
        && ((__isset.startRowOffset == other.__isset.startRowOffset) && ((!__isset.startRowOffset) || (global::System.Object.Equals(StartRowOffset, other.StartRowOffset))))
        && ((__isset.rowCount == other.__isset.rowCount) && ((!__isset.rowCount) || (global::System.Object.Equals(RowCount, other.RowCount))))
        && ((__isset.uncompressedBytes == other.__isset.uncompressedBytes) && ((!__isset.uncompressedBytes) || (global::System.Object.Equals(UncompressedBytes, other.UncompressedBytes))))
        && ((__isset.compressedBytes == other.__isset.compressedBytes) && ((!__isset.compressedBytes) || (global::System.Object.Equals(CompressedBytes, other.CompressedBytes))))
        && ((__isset.fileLink == other.__isset.fileLink) && ((!__isset.fileLink) || (global::System.Object.Equals(FileLink, other.FileLink))))
        && ((__isset.linkExpiryTime == other.__isset.linkExpiryTime) && ((!__isset.linkExpiryTime) || (global::System.Object.Equals(LinkExpiryTime, other.LinkExpiryTime))))
        && ((__isset.httpHeaders == other.__isset.httpHeaders) && ((!__isset.httpHeaders) || (TCollections.Equals(HttpHeaders, other.HttpHeaders))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((FilePath != null) && __isset.filePath)
        {
          hashcode = (hashcode * 397) + FilePath.GetHashCode();
        }
        if(__isset.startRowOffset)
        {
          hashcode = (hashcode * 397) + StartRowOffset.GetHashCode();
        }
        if(__isset.rowCount)
        {
          hashcode = (hashcode * 397) + RowCount.GetHashCode();
        }
        if(__isset.uncompressedBytes)
        {
          hashcode = (hashcode * 397) + UncompressedBytes.GetHashCode();
        }
        if(__isset.compressedBytes)
        {
          hashcode = (hashcode * 397) + CompressedBytes.GetHashCode();
        }
        if((FileLink != null) && __isset.fileLink)
        {
          hashcode = (hashcode * 397) + FileLink.GetHashCode();
        }
        if(__isset.linkExpiryTime)
        {
          hashcode = (hashcode * 397) + LinkExpiryTime.GetHashCode();
        }
        if((HttpHeaders != null) && __isset.httpHeaders)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(HttpHeaders);
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp215 = new StringBuilder("TDBSqlCloudResultFile(");
      int tmp216 = 0;
      if((FilePath != null) && __isset.filePath)
      {
        if(0 < tmp216++) { tmp215.Append(", "); }
        tmp215.Append("FilePath: ");
        FilePath.ToString(tmp215);
      }
      if(__isset.startRowOffset)
      {
        if(0 < tmp216++) { tmp215.Append(", "); }
        tmp215.Append("StartRowOffset: ");
        StartRowOffset.ToString(tmp215);
      }
      if(__isset.rowCount)
      {
        if(0 < tmp216++) { tmp215.Append(", "); }
        tmp215.Append("RowCount: ");
        RowCount.ToString(tmp215);
      }
      if(__isset.uncompressedBytes)
      {
        if(0 < tmp216++) { tmp215.Append(", "); }
        tmp215.Append("UncompressedBytes: ");
        UncompressedBytes.ToString(tmp215);
      }
      if(__isset.compressedBytes)
      {
        if(0 < tmp216++) { tmp215.Append(", "); }
        tmp215.Append("CompressedBytes: ");
        CompressedBytes.ToString(tmp215);
      }
      if((FileLink != null) && __isset.fileLink)
      {
        if(0 < tmp216++) { tmp215.Append(", "); }
        tmp215.Append("FileLink: ");
        FileLink.ToString(tmp215);
      }
      if(__isset.linkExpiryTime)
      {
        if(0 < tmp216++) { tmp215.Append(", "); }
        tmp215.Append("LinkExpiryTime: ");
        LinkExpiryTime.ToString(tmp215);
      }
      if((HttpHeaders != null) && __isset.httpHeaders)
      {
        if(0 < tmp216++) { tmp215.Append(", "); }
        tmp215.Append("HttpHeaders: ");
        HttpHeaders.ToString(tmp215);
      }
      tmp215.Append(')');
      return tmp215.ToString();
    }
  }

}

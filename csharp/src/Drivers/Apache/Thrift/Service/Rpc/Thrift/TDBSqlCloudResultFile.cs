/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace Apache.Hive.Service.Rpc.Thrift
{

  public partial class TDBSqlCloudResultFile : TBase
  {

    public string FilePath { get; set; }

    public long StartRowOffset { get; set; }

    public long RowCount { get; set; }

    public long UncompressedBytes { get; set; }

    public long CompressedBytes { get; set; }

    public TDBSqlCloudResultFile()
    {
    }

    public TDBSqlCloudResultFile(string filePath, long startRowOffset, long rowCount, long uncompressedBytes, long compressedBytes) : this()
    {
      this.FilePath = filePath;
      this.StartRowOffset = startRowOffset;
      this.RowCount = rowCount;
      this.UncompressedBytes = uncompressedBytes;
      this.CompressedBytes = compressedBytes;
    }

    public TDBSqlCloudResultFile DeepCopy()
    {
      var tmp583 = new TDBSqlCloudResultFile();
      if ((FilePath != null))
      {
        tmp583.FilePath = this.FilePath;
      }
      tmp583.StartRowOffset = this.StartRowOffset;
      tmp583.RowCount = this.RowCount;
      tmp583.UncompressedBytes = this.UncompressedBytes;
      tmp583.CompressedBytes = this.CompressedBytes;
      return tmp583;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_filePath = false;
        bool isset_startRowOffset = false;
        bool isset_rowCount = false;
        bool isset_uncompressedBytes = false;
        bool isset_compressedBytes = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                FilePath = await iprot.ReadStringAsync(cancellationToken);
                isset_filePath = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I64)
              {
                StartRowOffset = await iprot.ReadI64Async(cancellationToken);
                isset_startRowOffset = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I64)
              {
                RowCount = await iprot.ReadI64Async(cancellationToken);
                isset_rowCount = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.I64)
              {
                UncompressedBytes = await iprot.ReadI64Async(cancellationToken);
                isset_uncompressedBytes = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.I64)
              {
                CompressedBytes = await iprot.ReadI64Async(cancellationToken);
                isset_compressedBytes = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default:
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_filePath)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_startRowOffset)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_rowCount)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_uncompressedBytes)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_compressedBytes)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp584 = new TStruct("TDBSqlCloudResultFile");
        await oprot.WriteStructBeginAsync(tmp584, cancellationToken);
        var tmp585 = new TField();
        if ((FilePath != null))
        {
          tmp585.Name = "filePath";
          tmp585.Type = TType.String;
          tmp585.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp585, cancellationToken);
          await oprot.WriteStringAsync(FilePath, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        tmp585.Name = "startRowOffset";
        tmp585.Type = TType.I64;
        tmp585.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp585, cancellationToken);
        await oprot.WriteI64Async(StartRowOffset, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        tmp585.Name = "rowCount";
        tmp585.Type = TType.I64;
        tmp585.ID = 3;
        await oprot.WriteFieldBeginAsync(tmp585, cancellationToken);
        await oprot.WriteI64Async(RowCount, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        tmp585.Name = "uncompressedBytes";
        tmp585.Type = TType.I64;
        tmp585.ID = 4;
        await oprot.WriteFieldBeginAsync(tmp585, cancellationToken);
        await oprot.WriteI64Async(UncompressedBytes, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        tmp585.Name = "compressedBytes";
        tmp585.Type = TType.I64;
        tmp585.ID = 5;
        await oprot.WriteFieldBeginAsync(tmp585, cancellationToken);
        await oprot.WriteI64Async(CompressedBytes, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is TDBSqlCloudResultFile other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return global::System.Object.Equals(FilePath, other.FilePath)
        && global::System.Object.Equals(StartRowOffset, other.StartRowOffset)
        && global::System.Object.Equals(RowCount, other.RowCount)
        && global::System.Object.Equals(UncompressedBytes, other.UncompressedBytes)
        && global::System.Object.Equals(CompressedBytes, other.CompressedBytes);
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if ((FilePath != null))
        {
          hashcode = (hashcode * 397) + FilePath.GetHashCode();
        }
        hashcode = (hashcode * 397) + StartRowOffset.GetHashCode();
        hashcode = (hashcode * 397) + RowCount.GetHashCode();
        hashcode = (hashcode * 397) + UncompressedBytes.GetHashCode();
        hashcode = (hashcode * 397) + CompressedBytes.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp586 = new StringBuilder("TDBSqlCloudResultFile(");
      if ((FilePath != null))
      {
        tmp586.Append(", FilePath: ");
        FilePath.ToString(tmp586);
      }
      tmp586.Append(", StartRowOffset: ");
      StartRowOffset.ToString(tmp586);
      tmp586.Append(", RowCount: ");
      RowCount.ToString(tmp586);
      tmp586.Append(", UncompressedBytes: ");
      UncompressedBytes.ToString(tmp586);
      tmp586.Append(", CompressedBytes: ");
      CompressedBytes.ToString(tmp586);
      tmp586.Append(')');
      return tmp586.ToString();
    }
  }

}
